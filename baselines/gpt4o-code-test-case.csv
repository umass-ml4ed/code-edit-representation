problemID,problemDescription,studentID,test_case_verdict_i,codeID_i,code_i,score_i,score_calc_i,test_case_verdict_j,codeID_j,code_j,score_j,score_calc_j,code_gpt
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",0aaf61723a352ba7ea1be4502df85765,0110011011011111100001111,c43fedd3cc4c07a165093ff002a4c179ec3ee6e9,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.36,0.36,1111111110111110111111011,1b69fb0fcd0fd9e2f828a894d1bb9acb234d9fe4,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    a = this.fixTeen(a);
    b = this.fixTeen(b);
    c = this.fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",1cd45c346398d2ee6a71296e1fa88796,0110011011011111100001111,87b89975807d681ba1b9eb5c5134ecf53b13cc65,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.36,0.36,1111111110111110111111011,e3a4c70270775af6ed179fd50eb2ec497f85d1f6,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
        return n;   
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",0aaf61723a352ba7ea1be4502df85765,0110011011011111100001111,c43fedd3cc4c07a165093ff002a4c179ec3ee6e9,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.36,0.36,1111111110111110111111011,1b69fb0fcd0fd9e2f828a894d1bb9acb234d9fe4,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    a = this.fixTeen(a);
    b = this.fixTeen(b);
    c = this.fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20 && n != 15 && n != 16)
    {
     	n = 0;   
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",1cd45c346398d2ee6a71296e1fa88796,0110011011011111100001111,e878bcbb2267842146333e62bd32474c9fe8fa93,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.36,0.36,1111111110111110111111011,70706455e348610ac26719514d98baa79986f46d,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",0aaf61723a352ba7ea1be4502df85765,0110011011011111100001111,c43fedd3cc4c07a165093ff002a4c179ec3ee6e9,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.36,0.36,1111111110111110111111011,1b69fb0fcd0fd9e2f828a894d1bb9acb234d9fe4,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,0110011011011111100001111,980cb3c1cc3745b38924b37e898bb56c27ab3b23,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.36,0.36,1111111110111110111111011,bc4ae2d44795097bf91c4f88d25c28ae7878334d,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 19) && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",0aaf61723a352ba7ea1be4502df85765,1111111110111110111111011,1b69fb0fcd0fd9e2f828a894d1bb9acb234d9fe4,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,0110011011011111100001111,9d0c5126614820c88e9e8dc0deb0497be8b46653,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n > 12 && n < 20) && (n != 15 || n != 16))
    {
     	n = 0;   
    }
    return n;
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",1cd45c346398d2ee6a71296e1fa88796,1111111110111110111111011,5c20d52421952488c8f59a74bd0ad6891d653059,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,0110011011011111100001111,e878bcbb2267842146333e62bd32474c9fe8fa93,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n > 12 && n < 20) && (n != 15 || n != 16))
    {
     	n = 0;   
    }
    return n;
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
        return n;   
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",0aaf61723a352ba7ea1be4502df85765,1111111110111110111111011,1b69fb0fcd0fd9e2f828a894d1bb9acb234d9fe4,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,0110011011011111100001111,9d0c5126614820c88e9e8dc0deb0497be8b46653,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n > 12 && n < 20) && (n != 15 || n != 16))
    {
     	n = 0;   
    }
    return n;
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    a = this.fixTeen(a);
    b = this.fixTeen(b);
    c = this.fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,e45d9b9f8908ed389ea6d9dcc6791d64b07ce12c,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,0110011011011111100001111,980cb3c1cc3745b38924b37e898bb56c27ab3b23,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n > 12 && n < 20) && (n != 15 || n != 16))
    {
     	n = 0;   
    }
    return n;
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 19) && !(n == 15 || n == 16)) 
    {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",0aaf61723a352ba7ea1be4502df85765,1111111110111110111111011,1b69fb0fcd0fd9e2f828a894d1bb9acb234d9fe4,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,0110011011011111100001111,9d0c5126614820c88e9e8dc0deb0497be8b46653,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n > 12 && n < 20) && (n != 15 || n != 16))
    {
     	n = 0;   
    }
    return n;
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c) {
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n) {
    if (n >= 13 && n <= 19 && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,a5d7917bfe97bd6de2ab56e6aec05332ab6506e5,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,0110011011011111100001111,31fd5a9d49e7fa935fcea50f686ca625243b2f7b,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n > 12 && n < 20) && (n != 15 || n != 16))
    {
     	n = 0;   
    }
    return n;
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 14) || (n >= 17 && n <= 19)) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",0aaf61723a352ba7ea1be4502df85765,1111111110111110111111011,1b69fb0fcd0fd9e2f828a894d1bb9acb234d9fe4,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,0110011011011111100001111,9d0c5126614820c88e9e8dc0deb0497be8b46653,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n > 12 && n < 20) && (n != 15 || n != 16))
    {
     	n = 0;   
    }
    return n;
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 14) || (n >= 17 && n <= 19))
    {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,5bb2e646954929706ab59cfd53041e415310cb25,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,0110011011011111100001111,46a0d541af9801b6ac3fdcf828215340f7658838,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n > 12 && n < 20) && (n != 15 || n != 16))
    {
     	n = 0;   
    }
    return n;
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 19) && n != 15 && n != 16)
    {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",1cd45c346398d2ee6a71296e1fa88796,0110011011011111100001111,87b89975807d681ba1b9eb5c5134ecf53b13cc65,"public int noTeenSum(int a, int b, int c)
{
	int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,1111111110111110111111011,e3a4c70270775af6ed179fd50eb2ec497f85d1f6,"public int noTeenSum(int a, int b, int c)
{
	if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
        return 0;
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
        return 0;
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
        return 0;
    }
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
        return n;   
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",1cd45c346398d2ee6a71296e1fa88796,0110011011011111100001111,e878bcbb2267842146333e62bd32474c9fe8fa93,"public int noTeenSum(int a, int b, int c)
{
	int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,1111111110111110111111011,70706455e348610ac26719514d98baa79986f46d,"public int noTeenSum(int a, int b, int c)
{
	if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
        return 0;
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
        return 0;
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
        return 0;
    }
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",1cd45c346398d2ee6a71296e1fa88796,0110011011011111100001111,87b89975807d681ba1b9eb5c5134ecf53b13cc65,"public int noTeenSum(int a, int b, int c)
{
	int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,1111111110111110111111011,e3a4c70270775af6ed179fd50eb2ec497f85d1f6,"public int noTeenSum(int a, int b, int c)
{
	if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
        return 0;
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
        return 0;
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
        return 0;
    }
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
        return n;   
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,0110011011011111100001111,980cb3c1cc3745b38924b37e898bb56c27ab3b23,"public int noTeenSum(int a, int b, int c)
{
	int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,1111111110111110111111011,bc4ae2d44795097bf91c4f88d25c28ae7878334d,"public int noTeenSum(int a, int b, int c)
{
	if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
        return 0;
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
        return 0;
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
        return 0;
    }
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 14) || (n >= 17 && n <= 19)) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",1cd45c346398d2ee6a71296e1fa88796,1111111110111110111111011,5c20d52421952488c8f59a74bd0ad6891d653059,"public int noTeenSum(int a, int b, int c)
{
	if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
        return 0;
    }
    else if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
        return 0;
    }
    else if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
        return 0;
    }
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,0110011011011111100001111,e878bcbb2267842146333e62bd32474c9fe8fa93,"public int noTeenSum(int a, int b, int c)
{
	
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
        return n;   
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,e45d9b9f8908ed389ea6d9dcc6791d64b07ce12c,"public int noTeenSum(int a, int b, int c)
{
	if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
        return 0;
    }
    else if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
        return 0;
    }
    else if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
        return 0;
    }
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,0110011011011111100001111,980cb3c1cc3745b38924b37e898bb56c27ab3b23,"public int noTeenSum(int a, int b, int c)
{
	
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}
public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",1cd45c346398d2ee6a71296e1fa88796,1111111110111110111111011,5c20d52421952488c8f59a74bd0ad6891d653059,"public int noTeenSum(int a, int b, int c)
{
	if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
        return 0;
    }
    else if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
        return 0;
    }
    else if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
        return 0;
    }
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,0110011011011111100001111,e878bcbb2267842146333e62bd32474c9fe8fa93,"public int noTeenSum(int a, int b, int c)
{
	
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
        return n;   
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,a5d7917bfe97bd6de2ab56e6aec05332ab6506e5,"public int noTeenSum(int a, int b, int c)
{
	if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
        return 0;
    }
    else if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
        return 0;
    }
    else if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
        return 0;
    }
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,0110011011011111100001111,31fd5a9d49e7fa935fcea50f686ca625243b2f7b,"public int noTeenSum(int a, int b, int c)
{
	
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",1cd45c346398d2ee6a71296e1fa88796,1111111110111110111111011,5c20d52421952488c8f59a74bd0ad6891d653059,"public int noTeenSum(int a, int b, int c)
{
	if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
        return 0;
    }
    else if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
        return 0;
    }
    else if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
        return 0;
    }
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,0110011011011111100001111,e878bcbb2267842146333e62bd32474c9fe8fa93,"public int noTeenSum(int a, int b, int c)
{
	
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
        return n;   
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,5bb2e646954929706ab59cfd53041e415310cb25,"public int noTeenSum(int a, int b, int c)
{
	if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
        return 0;
    }
    else if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
        return 0;
    }
    else if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
        return 0;
    }
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,0110011011011111100001111,46a0d541af9801b6ac3fdcf828215340f7658838,"public int noTeenSum(int a, int b, int c)
{
	
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 19) && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",1cd45c346398d2ee6a71296e1fa88796,0110011011011111100001111,e878bcbb2267842146333e62bd32474c9fe8fa93,"public int noTeenSum(int a, int b, int c)
{
	
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,1111111110111110111111011,70706455e348610ac26719514d98baa79986f46d,"public int noTeenSum(int a, int b, int c)
{
	
    int sum = fixTeen(a) + fixTeen(b) + fixTeen(c);
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
        return n;   
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,0110011011011111100001111,980cb3c1cc3745b38924b37e898bb56c27ab3b23,"public int noTeenSum(int a, int b, int c)
{
	
    int sum = a + b + c;
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.36,0.36,1111111110111110111111011,bc4ae2d44795097bf91c4f88d25c28ae7878334d,"public int noTeenSum(int a, int b, int c)
{
	
    int sum = fixTeen(a) + fixTeen(b) + fixTeen(c);
    return sum;
}

public int fixTeen(int n)
{
    if (n >= 13 || n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    else 
    {
     	return n;   
    }
}

/*if (a >= 13 || a <= 19 && a != 15 && a != 16)
    {
     	return 0;   
    }
    if (b >= 13 || b <= 19 && b != 15 && b != 16)
    {
     	return 0;   
    }
    if (c >= 13 || c <= 19 && c != 15 && c != 16)
    {
     	return 0;   
    }*/
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 19) && (n != 15 && n != 16)) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,a5edde62609d9d9ea46b81ad9e9a526b6c2bcaf5,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
		return a = 0;
	if(b == 13 || b > 13 || b == 19 || b < 19)
		return b = 0;
	if(c == 13 || c > 13 || c == 19 || c < 19)
		return c = 0;
	return (a + b + c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,1111110111111111111110111,1229a87ad17146e8b40edb2435f4fcc980da5fbd,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
		return b + c;
	if(b == 13 || b > 13 || b == 19 || b < 19)
		return a + c;
	if(c == 13 || c > 13 || c == 19 || c < 19)
		return a + b;
	return (a + b + c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.08,0.08,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
        return 0;
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,f2431424ae43cf6ecb1da0c34b23a49b80c50e0e,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
		return a = 0;
	if(b == 13 || b > 13 || b == 19 || b < 19)
		return b = 0;
	if(c == 13 || c > 13 || c == 19 || c < 19)
		return c = 0;
	return (a + b + c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,1111110111111111111110111,7f36c2750627e5aab0c755dee31e591f48339471,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
		return b + c;
	if(b == 13 || b > 13 || b == 19 || b < 19)
		return a + c;
	if(c == 13 || c > 13 || c == 19 || c < 19)
		return a + b;
	return (a + b + c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.08,0.08,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 14) || (n >= 17 && n <= 19)) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111110111111111111110111,1229a87ad17146e8b40edb2435f4fcc980da5fbd,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
		return b + c;
	if(b == 13 || b > 13 || b == 19 || b < 19)
		return a + c;
	if(c == 13 || c > 13 || c == 19 || c < 19)
		return a + b;
	return (a + b + c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.08,0.08,1111111110111110111111011,810f328cf2e41daf653396bcca1ae36eddeb8a34,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
    {	if(b == 13 || b > 13 || b == 19 || b < 19)
    	{
        	if(c == 13 || c > 13 || c == 19 || c < 19)
               {
                   return 0;
               }
               return c; 
    	}
	return (a + b);
    }
               return (a+b+c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
        return 0;
    return n; 
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111110111111111111110111,0ece541e54b6ccfb68dee504ce97b21406f6033b,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
		return b + c;
	if(b == 13 || b > 13 || b == 19 || b < 19)
		return a + c;
	if(c == 13 || c > 13 || c == 19 || c < 19)
		return a + b;
	return (a + b + c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.08,0.08,1111111110111110111111011,a5d7917bfe97bd6de2ab56e6aec05332ab6506e5,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
    {	if(b == 13 || b > 13 || b == 19 || b < 19)
    	{
        	if(c == 13 || c > 13 || c == 19 || c < 19)
               {
                   return 0;
               }
               return c; 
    	}
	return (a + b);
    }
               return (a+b+c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111110111111111111110111,1229a87ad17146e8b40edb2435f4fcc980da5fbd,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
		return b + c;
	if(b == 13 || b > 13 || b == 19 || b < 19)
		return a + c;
	if(c == 13 || c > 13 || c == 19 || c < 19)
		return a + b;
	return (a + b + c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.08,0.08,1111111110111110111111011,810f328cf2e41daf653396bcca1ae36eddeb8a34,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
    {	if(b == 13 || b > 13 || b == 19 || b < 19)
    	{
        	if(c == 13 || c > 13 || c == 19 || c < 19)
               {
                   return 0;
               }
               return c; 
    	}
	return (a + b);
    }
               return (a+b+c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 19) && !(n == 15 || n == 16))
        return 0;
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111110111111111111110111,b8f9820fb0ba5ce547dca7c0cedfea8708ea51d7,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
		return b + c;
	if(b == 13 || b > 13 || b == 19 || b < 19)
		return a + c;
	if(c == 13 || c > 13 || c == 19 || c < 19)
		return a + b;
	return (a + b + c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.08,0.08,1111111110111110111111011,4634664a318ff8fdb4b748ad81799233f8869796,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
    {	if(b == 13 || b > 13 || b == 19 || b < 19)
    	{
        	if(c == 13 || c > 13 || c == 19 || c < 19)
               {
                   return 0;
               }
               return c; 
    	}
	return (a + b);
    }
               return (a+b+c);
}

public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 19) && (n != 15 && n != 16))
    {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,e45d9b9f8908ed389ea6d9dcc6791d64b07ce12c,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
    {
     	return a = 0 ;   
    }
   	if(b == 13 || b > 13 || b == 19 || b < 19)
    {
     	   return b = 0;
    }
    if(c == 13 || c > 13 || c == 19 || c < 19)
    {
     	return c = 0;   
    }
    return (a+b+c);
 
}
public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,0110011011011111100001111,980cb3c1cc3745b38924b37e898bb56c27ab3b23,"public int noTeenSum(int a, int b, int c)
{

    return (a+b+c);
 
}
public int fixTeen(int n)
{
    return n; 
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16) 
    {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,a5d7917bfe97bd6de2ab56e6aec05332ab6506e5,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
    {
     	return a = 0 ;   
    }
   	if(b == 13 || b > 13 || b == 19 || b < 19)
    {
     	   return b = 0;
    }
    if(c == 13 || c > 13 || c == 19 || c < 19)
    {
     	return c = 0;   
    }
    return (a+b+c);
 
}
public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,0110011011011111100001111,31fd5a9d49e7fa935fcea50f686ca625243b2f7b,"public int noTeenSum(int a, int b, int c)
{

    return (a+b+c);
 
}
public int fixTeen(int n)
{
    return n; 
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,e45d9b9f8908ed389ea6d9dcc6791d64b07ce12c,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
    {
     	return a = 0 ;   
    }
   	if(b == 13 || b > 13 || b == 19 || b < 19)
    {
     	   return b = 0;
    }
    if(c == 13 || c > 13 || c == 19 || c < 19)
    {
     	return c = 0;   
    }
    return (a+b+c);
 
}
public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,0110011011011111100001111,980cb3c1cc3745b38924b37e898bb56c27ab3b23,"public int noTeenSum(int a, int b, int c)
{

    return (a+b+c);
 
}
public int fixTeen(int n)
{
    return n; 
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 19) && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,5bb2e646954929706ab59cfd53041e415310cb25,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19)
    {
     	return a = 0 ;   
    }
   	if(b == 13 || b > 13 || b == 19 || b < 19)
    {
     	   return b = 0;
    }
    if(c == 13 || c > 13 || c == 19 || c < 19)
    {
     	return c = 0;   
    }
    return (a+b+c);
 
}
public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,0110011011011111100001111,46a0d541af9801b6ac3fdcf828215340f7658838,"public int noTeenSum(int a, int b, int c)
{

    return (a+b+c);
 
}
public int fixTeen(int n)
{
    return n; 
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 19) && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111110111111111111110111,0ece541e54b6ccfb68dee504ce97b21406f6033b,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19 &&
       b == 13 || b > 13 || a == 19 || b < 19 &&
      c == 13 || c > 13 || c == 19 || c < 19 )
    {
		return b + c; 
    }
 
 	return (a+b+c);
}
public int fixTeen(int n)
{
    return n; 
}
",0.08,0.08,1111111110111110111111011,a5d7917bfe97bd6de2ab56e6aec05332ab6506e5,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19 &&
       b == 13 || b > 13 || a == 19 || b < 19 &&
      c == 13 || c > 13 || c == 19 || c < 19 )
    {
		return 0; 
    }
 
 	return (a+b+c);
}
public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111110111111111111110111,b8f9820fb0ba5ce547dca7c0cedfea8708ea51d7,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19 &&
       b == 13 || b > 13 || a == 19 || b < 19 &&
      c == 13 || c > 13 || c == 19 || c < 19 )
    {
		return b + c; 
    }
 
 	return (a+b+c);
}
public int fixTeen(int n)
{
    return n; 
}
",0.08,0.08,1111111110111110111111011,4634664a318ff8fdb4b748ad81799233f8869796,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19 &&
       b == 13 || b > 13 || a == 19 || b < 19 &&
      c == 13 || c > 13 || c == 19 || c < 19 )
    {
		return 0; 
    }
 
 	return (a+b+c);
}
public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,a5d7917bfe97bd6de2ab56e6aec05332ab6506e5,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19 &&
       b == 13 || b > 13 || a == 19 || b < 19 &&
      c == 13 || c > 13 || c == 19 || c < 19 )
    {
		return 0; 
    }
 
 	return (a+b+c);
}
public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,0110011011011111100001111,31fd5a9d49e7fa935fcea50f686ca625243b2f7b,"public int noTeenSum(int a, int b, int c)
{
    return a + b+ c;

}
public int fixTeen(int n)
{
    return n; 
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if ((n >= 13 && n <= 19) && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,5bb2e646954929706ab59cfd53041e415310cb25,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19 &&
       b == 13 || b > 13 || a == 19 || b < 19 &&
      c == 13 || c > 13 || c == 19 || c < 19 )
    {
		return 0; 
    }
 
 	return (a+b+c);
}
public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,0110011011011111100001111,46a0d541af9801b6ac3fdcf828215340f7658838,"public int noTeenSum(int a, int b, int c)
{
    return a + b+ c;

}
public int fixTeen(int n)
{
    return n; 
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",43a87a86ea9aee0255325e2865d6b503,0011001000010000011000,aa1ba4ebd20768d12c7d4d15c16c386cb6b2d6f9,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b)
        {
            return a;
        }
        else if(b>a)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.727273,0.7272727272727273,1111001000010010011000,23fc83dc640f5b0f6fd5de52ef9fd71f03de80fa,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b && a<21)
        {
            return a;
        }
        else if(b>a && b<21)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.590909,0.5909090909090909,"public int blackjack(int a, int b)
{
    if ((a > 21) && (b > 21))
    {
        return 0;
    }
    else
    {
        if ((a > 21 && b <= 21) || (b > a && b <= 21))
        {
            return b;
        }
        else if ((b > 21 && a <= 21) || (a > b && a <= 21))
        {
            return a;
        }
        else 
            return 0;
    }
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",43a87a86ea9aee0255325e2865d6b503,0011001000010000011000,3725e88b38e2085a2e8fd46f96dc0804cab08957,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b)
        {
            return a;
        }
        else if(b>a)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.727273,0.7272727272727273,1111001000010010011000,a8b1e277f724cf4476a11e95a9aa03cb7e0f9e9b,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b && a<21)
        {
            return a;
        }
        else if(b>a && b<21)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.590909,0.5909090909090909,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a <= 21 && (b > 21 || a > b))
        {
            return a;
        }
        else if(b <= 21 && (a > 21 || b > a))
        {
            return b;
        }
        
        else 
            return 0;
    }
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",43a87a86ea9aee0255325e2865d6b503,1111001000010010011000,23fc83dc640f5b0f6fd5de52ef9fd71f03de80fa,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b && a<21)
        {
            return a;
        }
        else if(b>a && b<21)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.590909,0.5909090909090909,0011001000010000011000,3725e88b38e2085a2e8fd46f96dc0804cab08957,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b)
        {
            return a;
        }
        else if(b>a)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.727273,0.7272727272727273,"public int blackjack(int a, int b)
{
    if ((a > 21) && (b > 21))
    {
        return 0;
    }
    else
    {
        if (a <= 21 && (b > 21 || a >= b))
        {
            return a;
        }
        else if (b <= 21 && (a > 21 || b >= a))
        {
            return b;
        }
        else 
        {
            return 0;
        }
    }
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",580274a213455c56684ab9f6e7a9995a,1111001000010010011000,ecddebc8a0ba263e625d3d9a75d5c9aa770520d5,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b && a<21)
        {
            return a;
        }
        else if(b>a && b<21)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.590909,0.5909090909090909,0011001000010000011000,c351444e7f6e1a891ea166e89baf09beaac8c351,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b)
        {
            return a;
        }
        else if(b>a)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.727273,0.7272727272727273,"public int blackjack(int a, int b)
{
    int x = 0;
    if ((b <= 21 && b > a) || (b <= 21 && a > 21))
    {
        x = b;
    }
    else if ((a <= 21 && a > b) || (a <= 21 && b > 21))
    {
        x = a;
    }
    else
    {
        x = 0;
    }
    return x;					
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",37b1fe960daba91fffadbdb5a3a9db15,0100011011010001,78584a7116610e1dbff4c43314a27ff1075e107f,"public boolean canBalance(int[] nums)
{
    return true;
    
    
    
    
    
    
    
    
    
    
    
    
}
",0.5625,0.5625,1011100100101110,f82cb4c34e250308d5e4696f0b0bb82412ecc050,"public boolean canBalance(int[] nums)
{
   int right = 0;
    int left = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
     right = right + nums[i];
        
    }
    
    for (int i = 0; i < nums.length - 1; i++)
    {
     left = left + nums[i];
        right = right + nums[i];
        if (left == right)
        {
         return true;   
        }
    }
    return false;
}
",0.4375,0.4375,"public boolean canBalance(int[] nums)
{
    int leftSum = 0;
    int totalSum = 0;
    
    for (int num : nums) {
        totalSum += num;
    }
    
    for (int num : nums) {
        leftSum += num;
        if (leftSum * 2 == totalSum) {
            return true;
        }
    }
    
    return false;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",76d0863b5d13a9ed61f7df9149fb93d8,0100011011010001,be38064cd21dc445371be81a02f66aceae5485e0,"public boolean canBalance(int[] nums)
{
    return true;
    
    
    
    
    
    
    
    
    
    
    
    
}
",0.5625,0.5625,1011100100101110,d2d8672dfaaa4d5ba0fa368a67ff95c37e4e0044,"public boolean canBalance(int[] nums)
{
   int right = 0;
    int left = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
     right = right + nums[i];
        
    }
    
    for (int i = 0; i < nums.length - 1; i++)
    {
     left = left + nums[i];
        right = right + nums[i];
        if (left == right)
        {
         return true;   
        }
    }
    return false;
}
",0.4375,0.4375,"public boolean canBalance(int[] nums)
{
    int totalSum = 0;
    for (int num : nums) {
        totalSum += num;
    }
    int leftSum = 0;
    for (int num : nums) {
        leftSum += num;
        if (leftSum * 2 == totalSum) {
            return true;
        }
    }
    return false;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",580274a213455c56684ab9f6e7a9995a,1011100100101110,8ac12af44d16118509eb7af4063491a8d8afceaf,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.4375,0.4375,2222222222222222,4274c04276ecb8b34de25d81834677dac913e495,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i + 1;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.0,0.0,"public boolean canBalance(int[] nums)
{
    return false;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",580274a213455c56684ab9f6e7a9995a,1011100100101110,e957beec4da5778c6505b96d867a8afcfe117492,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.4375,0.4375,2222222222222222,393718f4349fa7fdc104bef72c28ee6c233ce57a,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i + 1;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.0,0.0,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
        int sum1 = 0;
        int sum2 = 0;
        for (int j = 0; j <= i; j++)
        {
            sum1 += nums[j];
        }
        for (int j = i + 1; j < nums.length; j++)
        {
            sum2 += nums[j];
        }
        if (sum1 == sum2)
        {
            x = true;
            break;
        }
    }
    return x;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",580274a213455c56684ab9f6e7a9995a,2222222222222222,4274c04276ecb8b34de25d81834677dac913e495,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i + 1;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.0,0.0,1011100100101110,c0e0396b83b9a863f4bf925b92fdabf4b0c7dacc,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.4375,0.4375,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
        int sum1 = 0;
        int sum2 = 0;
        for (int j = 0; j < nums.length; j++)
        {
            if (j <= i)
            {
                sum1 += nums[j];
            }
            else
            {
                sum2 += nums[j];
            }
        }
        if (sum1 == sum2)
        {
            x = true;
            break;
        }
    }
    return x;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",580274a213455c56684ab9f6e7a9995a,2222222222222222,8c7547c3ce9120e7339ca15bebdc5c899d2ab54d,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i + 1;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.0,0.0,1011100100101110,cb0d0d39d3accc119e3a208f8d9fd33d8fa4449b,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.4375,0.4375,"public boolean canBalance(int[] nums)
{
    int leftSum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        leftSum += nums[i];
        int rightSum = 0;
        for (int j = i + 1; j < nums.length; j++)
        {
            rightSum += nums[j];
        }
        if (leftSum == rightSum)
        {
            return true;
        }
    }
    return false;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",580274a213455c56684ab9f6e7a9995a,1011100100101110,fdb905dba46aca45f2d2f472ba53ce654a3ed331,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i + 1;
            if (y < nums.length)
            {
            	sum1 += nums[y];
                y++;
            }
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.4375,0.4375,1000100100101110,6cdb23e470ff7a11984fdbc21bf4f0273d9cd9de,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
        y = i + 1;
		for (int j = 0; j < nums.length; j++)
        {
            if (y < nums.length)
            {
            	sum1 += nums[y];
                y++;
            }
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.5625,0.5625,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    for (int i = 0; i < nums.length; i++)
    {
        sum1 += nums[i];
        sum2 = 0;
        for (int j = i + 1; j < nums.length; j++)
        {
            sum2 += nums[j];
        }
        if (sum1 == sum2)
        {
            x = true;
            break;
        }
    }
    return x;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",580274a213455c56684ab9f6e7a9995a,1011100100101110,fb5a615cf029ddf5b01968a0d8d671af0ea641d6,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i + 1;
            if (y < nums.length)
            {
            	sum1 += nums[y];
                y++;
            }
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.4375,0.4375,1000100100101110,dfdd4475798dda07ebe1e1026626a875cc4b6454,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
        y = i + 1;
		for (int j = 0; j < nums.length; j++)
        {
            if (y < nums.length)
            {
            	sum1 += nums[y];
                y++;
            }
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.5625,0.5625,"public boolean canBalance(int[] nums) {
    for (int i = 0; i < nums.length; i++) {
        int sum1 = 0;
        int sum2 = 0;
        for (int j = 0; j < nums.length; j++) {
            if (j <= i) {
                sum1 += nums[j];
            } else {
                sum2 += nums[j];
            }
        }
        if (sum1 == sum2) {
            return true;
        }
    }
    return false;
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",76d0863b5d13a9ed61f7df9149fb93d8,11111000100100,333ae73c73a72cc5df72b6c279116a96db594989,"public String zipZap(String str)
{
    String word = """";

for (int i=0; i< str.length(); i++)
{
	if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && 		           (str.substring( i + 2, i + 3).equals(""p""))))
	{ 
		word += ""zp"";
		//i += 2;
	} 
	else{ 
		word += str.substring(i, i + 1);

    }
}
	return word;
}
",0.5,0.5,11100000000000,863c731460896a5b4c0cda1a9f17d844cd81d3be,"public String zipZap(String str)
{
    String word = """";

for (int i=0; i< str.length(); i++)
{
	if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && 		           (str.substring( i + 2, i + 3).equals(""p""))))
	{ 
		word += ""zp"";
		i += 3;
	} 
	else{ 
		word += str.substring(i, i + 1);

    }
}
	return word;
}
",0.785714,0.7857142857142857,"public String zipZap(String str)
{
    String word = """";

for (int i=0; i< str.length(); i++)
{
	if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && 		           (str.substring( i + 2, i + 3).equals(""p""))))
	{ 
		word += ""zp"";
		i += 2;
	} 
	else{ 
		word += str.substring(i, i + 1);

    }
}
	return word;
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",a4546d484e137a6c92e317daae0e7131,11111000100100,fe711fbfd812439fa1da5c4d76511ea0d57c63d9,"public String zipZap(String str)
{
    String word = """";

for (int i=0; i< str.length(); i++)
{
	if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && 		           (str.substring( i + 2, i + 3).equals(""p""))))
	{ 
		word += ""zp"";
		//i += 2;
	} 
	else{ 
		word += str.substring(i, i + 1);

    }
}
	return word;
}
",0.5,0.5,11100000000000,d32a371b1c9b4257ff2a57370b8386a36cdac8f5,"public String zipZap(String str)
{
    String word = """";

for (int i=0; i< str.length(); i++)
{
	if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && 		           (str.substring( i + 2, i + 3).equals(""p""))))
	{ 
		word += ""zp"";
		i += 3;
	} 
	else{ 
		word += str.substring(i, i + 1);

    }
}
	return word;
}
",0.785714,0.7857142857142857,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i < str.length() - 2; i++)
    {
        if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
        {
            newStr.deleteCharAt(i+1);
            i++; // Move to the next character to avoid re-checking the current sequence
        }
    }
    return newStr.toString();
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",76d0863b5d13a9ed61f7df9149fb93d8,11111000100100,333ae73c73a72cc5df72b6c279116a96db594989,"public String zipZap(String str)
{
    String word = """";

for (int i=0; i< str.length(); i++)
{
	if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && 		           (str.substring( i + 2, i + 3).equals(""p""))))
	{ 
		word += ""zp"";
		//i += 2;
	} 
	else{ 
		word += str.substring(i, i + 1);

    }
}
	return word;
}
",0.5,0.5,11100000000000,863c731460896a5b4c0cda1a9f17d844cd81d3be,"public String zipZap(String str)
{
    String word = """";

for (int i=0; i< str.length(); i++)
{
	if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && 		           (str.substring( i + 2, i + 3).equals(""p""))))
	{ 
		word += ""zp"";
		i += 3;
	} 
	else{ 
		word += str.substring(i, i + 1);

    }
}
	return word;
}
",0.785714,0.7857142857142857,"public String zipZap(String str)
{
    String word = """";

for (int i=0; i< str.length(); i++)
{
	if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && 		           (str.substring( i + 2, i + 3).equals(""p""))))
	{ 
		word += ""zp"";
		i += 2;
	} 
	else{ 
		word += str.substring(i, i + 1);

    }
}
	return word;
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",a4546d484e137a6c92e317daae0e7131,11111000100100,1755fb305e23400555a1a06671e2ba62c2e47bd3,"public String zipZap(String str)
{
    String word = """";

for (int i=0; i< str.length(); i++)
{
	if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && 		           (str.substring( i + 2, i + 3).equals(""p""))))
	{ 
		word += ""zp"";
		//i += 2;
	} 
	else{ 
		word += str.substring(i, i + 1);

    }
}
	return word;
}
",0.5,0.5,11100000000000,702a5861097b7cc0d78ea1af1f734e32bd87ff2e,"public String zipZap(String str)
{
    String word = """";

for (int i=0; i< str.length(); i++)
{
	if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && 		           (str.substring( i + 2, i + 3).equals(""p""))))
	{ 
		word += ""zp"";
		i += 3;
	} 
	else{ 
		word += str.substring(i, i + 1);

    }
}
	return word;
}
",0.785714,0.7857142857142857,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i < str.length() - 2; i++)
    {
        if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
        {
            newStr.deleteCharAt(i+1);
            i++; // Skip the next character to prevent overlapping checks
        }
    }
    return newStr.toString();
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",a4546d484e137a6c92e317daae0e7131,11100000000000,fe38ee0d5df1a720e5ae599e63110fbf4a80804a,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i< str.length()-2; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}
",0.785714,0.7857142857142857,11111000100100,fe711fbfd812439fa1da5c4d76511ea0d57c63d9,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i< str.length()-3; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}
",0.5,0.5,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder();
    for (int i = 0; i < str.length(); i++)
    {
        if (i < str.length()-2 && str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
        {
            newStr.append('z').append('p');
            i += 2;
        }
        else
        {
            newStr.append(str.charAt(i));
        }
    }
    return newStr.toString();
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",a4546d484e137a6c92e317daae0e7131,11100000000000,d95b2d159f1bfc3583c09e067f42c328510654f1,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i< str.length()-2; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}
",0.785714,0.7857142857142857,11111000100100,1755fb305e23400555a1a06671e2ba62c2e47bd3,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i< str.length()-3; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}
",0.5,0.5,"public String zipZap(String str)
{
        StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i<= str.length()-3; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString().replace(""zzp"", ""zop"");


}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",a4546d484e137a6c92e317daae0e7131,11111000100100,fe711fbfd812439fa1da5c4d76511ea0d57c63d9,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i< str.length()-3; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}
",0.5,0.5,11100000000000,d32a371b1c9b4257ff2a57370b8386a36cdac8f5,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i< str.length()-2; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}
",0.785714,0.7857142857142857,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i< str.length()-2; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",a4546d484e137a6c92e317daae0e7131,11111000100100,1755fb305e23400555a1a06671e2ba62c2e47bd3,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i< str.length()-3; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}
",0.5,0.5,11100000000000,702a5861097b7cc0d78ea1af1f734e32bd87ff2e,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i< str.length()-2; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}
",0.785714,0.7857142857142857,"public String zipZap(String str)
{
        StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i < str.length() - 2; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",0aaf61723a352ba7ea1be4502df85765,010100001000001000100,47953789f046b4d28fde1e98a12ebcc6a9a0526a,"public boolean evenlySpaced(int a, int b, int c)
{
    if((a-b) == (b-c))
    {
        return true;
    }
    return false;
}
",0.761905,0.7619047619047619,000100000000001000000,441d5fe707bbac4e300bcc78d71e736a9cd58c90,"public boolean evenlySpaced(int a, int b, int c)
{
    if(((a-b) == (b-c)) || ((b-a) == (a-c)) )
    {
        return true;
    }
    return false;
}
",0.904762,0.9047619047619048,"public boolean evenlySpaced(int a, int b, int c)
{
    int[] arr = {a, b, c};
    java.util.Arrays.sort(arr);
    return (arr[2] - arr[1]) == (arr[1] - arr[0]);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",43a87a86ea9aee0255325e2865d6b503,010100001000001000100,3a5d8d626c71062644c2d2cd302ff7cfd516a82c,"public boolean evenlySpaced(int a, int b, int c)
{
    if((a-b) == (b-c))
    {
        return true;
    }
    return false;
}
",0.761905,0.7619047619047619,000100000000001000000,045db482748a4fafe8b860327f70862e1c25aff1,"public boolean evenlySpaced(int a, int b, int c)
{
    if(((a-b) == (b-c)) || ((b-a) == (a-c)) )
    {
        return true;
    }
    return false;
}
",0.904762,0.9047619047619048,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = Math.min(a, Math.min(b, c));
    int large = Math.max(a, Math.max(b, c));
    int medium = a + b + c - small - large;
    
    if((medium-small) == (large-medium))
        return true;
    else
        return false;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",2e0a791950a53842e60d83295368cdff,010000101001000000100,fb6565dfe7dff7ccdd9e7ed468143bd5bea22a4f,"public boolean evenlySpaced(int a, int b, int c)
{
    if (Math.abs(a-b) == Math.abs(c-b) || Math.abs(b-c) == Math.abs(a-c))
    {
     	return true;   
    }
    else
    {
     	return false;   
    }
}
",0.761905,0.7619047619047619,000000100111000000010,504e62b016892b968569de29e062664a91f3b1f8,"public boolean evenlySpaced(int a, int b, int c)
{
    if (Math.abs(a-b) == Math.abs(c-b) || Math.abs(b-c) == Math.abs(a-c) || Math.abs(a-b) == Math.abs(a-c))
    {
     	return true;
    }
    else
    {
     	return false;   
    }
}
",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    int[] arr = {a, b, c};
    Arrays.sort(arr);
    return arr[2] - arr[1] == arr[1] - arr[0];
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",b36fd154dd0df788b77b7cfe39200ba3,010000101001000000100,e5b276cd5d6e83468a89d7b63258d310cf40d6bd,"public boolean evenlySpaced(int a, int b, int c)
{
    if (Math.abs(a-b) == Math.abs(c-b) || Math.abs(b-c) == Math.abs(a-c))
    {
     	return true;   
    }
    else
    {
     	return false;   
    }
}
",0.761905,0.7619047619047619,000000100111000000010,4ed5e81d40dca262145c7d2ed4988af7cecbf914,"public boolean evenlySpaced(int a, int b, int c)
{
    if (Math.abs(a-b) == Math.abs(c-b) || Math.abs(b-c) == Math.abs(a-c) || Math.abs(a-b) == Math.abs(a-c))
    {
     	return true;
    }
    else
    {
     	return false;   
    }
}
",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = Math.min(a, Math.min(b, c));
    int large = Math.max(a, Math.max(b, c));
    int medium = a + b + c - small - large;
    
    return (large - medium == medium - small);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",66e8d052ec2230c66bd11ee6b5a0e3c8,010100001000001000100,70d69602da63aec9c72bed37b9042f5887439d52,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean spacing = false;
    if (Math.abs(a - b) == Math.abs(b - c))
        spacing =  true;
    return spacing;
}
",0.761905,0.7619047619047619,010000101001000000100,12189792fd29766f2a2cbcf75634aa859e101354,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean spacing = false;
    if ((Math.abs(a - b) == Math.abs(b - c))
       || (Math.abs(a-c) == Math.abs(c-b)))
        spacing =  true;
    return spacing;
}
",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = Math.min(a, Math.min(b, c));
    int large = Math.max(a, Math.max(b, c));
    int medium = a + b + c - small - large;
    return (large - medium) == (medium - small);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",b36fd154dd0df788b77b7cfe39200ba3,010100001000001000100,7e5b6b0d79be66e1382b0952842d3cf1c691770b,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean spacing = false;
    if (Math.abs(a - b) == Math.abs(b - c))
        spacing =  true;
    return spacing;
}
",0.761905,0.7619047619047619,010000101001000000100,e5b276cd5d6e83468a89d7b63258d310cf40d6bd,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean spacing = false;
    if ((Math.abs(a - b) == Math.abs(b - c))
       || (Math.abs(a-c) == Math.abs(c-b)))
        spacing =  true;
    return spacing;
}
",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    int max = Math.max(a, Math.max(b, c));
    int min = Math.min(a, Math.min(b, c));
    int mid = a + b + c - max - min;

    return (max - mid) == (mid - min);
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",0aaf61723a352ba7ea1be4502df85765,0010010101010101,5111cf985c4df63ecbf98c80a91105ac676db5a1,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 && n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.5625,0.5625,0110011101110101,2087c0ba904bf5a7f6b622cc2f26e828bdef8f6f,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.375,0.375,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    }
    else
    {
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
    }
    return checker;     
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",0aaf61723a352ba7ea1be4502df85765,0010010101010101,122ed5c8457bcc9ab653057bd878dcfa21560c12,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 && n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.5625,0.5625,0110011101110101,112deec222412a3aaa27aa780655a82a3b306dca,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.375,0.375,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
        else
            {
                checker = false;
            }
    }
    else
    {
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
        else
            {
                checker = false;
            }
    }
   return checker;     
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",0aaf61723a352ba7ea1be4502df85765,0010010101010101,5111cf985c4df63ecbf98c80a91105ac676db5a1,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 && n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.5625,0.5625,0110011101110101,2087c0ba904bf5a7f6b622cc2f26e828bdef8f6f,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.375,0.375,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    }
    else
    {
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",37b1fe960daba91fffadbdb5a3a9db15,0010010101010101,ce4848761402d88d241a4ec8fb16ed9ed4e4d300,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 && n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.5625,0.5625,0110011101110101,ca8a65f87878348ae8d30cb1d89b115035c12a2f,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.375,0.375,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
    {
        return n <= 1 || n >= 10;
    }
    else
    {
        return n >= 1 && n <= 10;
    }
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",0aaf61723a352ba7ea1be4502df85765,0110011101110101,2087c0ba904bf5a7f6b622cc2f26e828bdef8f6f,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.375,0.375,0010010101010101,122ed5c8457bcc9ab653057bd878dcfa21560c12,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n >= 1 && n <= 10)
            {
                checker = false;
            }
    }
   return checker;     
}
",0.5625,0.5625,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
        {
            checker = true;
        }
    }
    else
    {
        if(n <= 1 || n >= 10)
        {
            checker = true;
        }
    }
    return checker;     
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",37b1fe960daba91fffadbdb5a3a9db15,0110011101110101,d105dfd5a8cb89d2d47978b3f6e7bf3c7535be38,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.375,0.375,0010010101010101,b2c742939c3387300715c6eb0817bccc150ea9cb,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n >= 1 && n <= 10)
            {
                checker = false;
            }
    }
   return checker;     
}
",0.5625,0.5625,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode) {
        return n <= 1 || n >= 10;
    } else {
        return n >= 1 && n <= 10;
    }
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",0aaf61723a352ba7ea1be4502df85765,0010010101010101,122ed5c8457bcc9ab653057bd878dcfa21560c12,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n >= 1 && n <= 10)
            {
                checker = false;
            }
    }
   return checker;     
}
",0.5625,0.5625,0110011101110101,112deec222412a3aaa27aa780655a82a3b306dca,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n < 1 || n > 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.375,0.375,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n >= 1 && n <= 10)
            {
                checker = false;
            }
    }

    if (outsideMode == true)
    {
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
    
    else
        if(n <= 1 || n >= 10)
            {
                checker = false;
            }
    }
   return checker;     
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",37b1fe960daba91fffadbdb5a3a9db15,0010010101010101,ce4848761402d88d241a4ec8fb16ed9ed4e4d300,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n >= 1 && n <= 10)
            {
                checker = false;
            }
    }
   return checker;     
}
",0.5625,0.5625,0110011101110101,ca8a65f87878348ae8d30cb1d89b115035c12a2f,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n < 1 || n > 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.375,0.375,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
    {
        return (n <= 1 || n >= 10);
    }
    else
    {
        return (n >= 1 && n <= 10);
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",37b1fe960daba91fffadbdb5a3a9db15,01111100110110,cb17f6b2990d413bd15b78623d58d2a30f9676df,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = a + c;    	   
    }
    else if (a==c)
    {
     	sum = a + b;
    }
    else if (b==c)
    {
     	sum = a + b;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.357143,0.35714285714285715,00100000010000,c02433a8efebca5fc249d0424a49d8ac2acc6830,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = c;    	   
    }
    else if (a==c)
    {
     	sum = b;
    }
    else if (b==c)
    {
     	sum = a;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    int sum = 0;
    if (a != b && a != c) sum += a;
    if (b != a && b != c) sum += b;
    if (c != a && c != b) sum += c;
    return sum;
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",4346ad94c2790cac390e684155a2ecba,01111100110110,0c120fcdb364bded55c30582da26e90cb4095694,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = a + c;    	   
    }
    else if (a==c)
    {
     	sum = a + b;
    }
    else if (b==c)
    {
     	sum = a + b;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.357143,0.35714285714285715,00100000010000,c59eaca12f7b185f2d1513d286338d5e34c98626,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = c;    	   
    }
    else if (a==c)
    {
     	sum = b;
    }
    else if (b==c)
    {
     	sum = a;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c) {
        return 0;
    }
    else if (a == b) {
        return c;
    }
    else if (a == c) {
        return b;
    }
    else if (b == c) {
        return a;
    }
    else {
        return a + b + c;
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",37b1fe960daba91fffadbdb5a3a9db15,01111100110110,cb17f6b2990d413bd15b78623d58d2a30f9676df,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = a + c;    	   
    }
    else if (a==c)
    {
     	sum = a + b;
    }
    else if (b==c)
    {
     	sum = a + b;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.357143,0.35714285714285715,00100000010000,c02433a8efebca5fc249d0424a49d8ac2acc6830,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = c;    	   
    }
    else if (a==c)
    {
     	sum = b;
    }
    else if (b==c)
    {
     	sum = a;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    int sum = 0;
    if (a != b && a != c)
    {
        sum += a;
    }
    if (b != a && b != c)
    {
        sum += b;
    }
    if (c != a && c != b)
    {
        sum += c;
    }
    return sum;
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",43a87a86ea9aee0255325e2865d6b503,01111100110110,808f1aa77c3c835af7ab411ffc9a301c8e18c44b,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = a + c;    	   
    }
    else if (a==c)
    {
     	sum = a + b;
    }
    else if (b==c)
    {
     	sum = a + b;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.357143,0.35714285714285715,00100000010000,7a774338966ce1e0731c6649a053fb95fc5363d0,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = c;    	   
    }
    else if (a==c)
    {
     	sum = b;
    }
    else if (b==c)
    {
     	sum = a;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c) {
        a = 0;
        b = 0;
        c = 0;
    } else {
        if (a == b) {
            a = 0;
            b = 0;
        }
        if (b == c) {
            b = 0;
            c = 0;
        }
        if (a == c) {
            a = 0;
            c = 0;
        }
    }
    
    return (a + b + c);
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",37b1fe960daba91fffadbdb5a3a9db15,01111100110110,cb17f6b2990d413bd15b78623d58d2a30f9676df,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = a + c;    	   
    }
    else if (a==c)
    {
     	sum = a + b;
    }
    else if (b==c)
    {
     	sum = a + b;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.357143,0.35714285714285715,00100000010000,c02433a8efebca5fc249d0424a49d8ac2acc6830,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = c;    	   
    }
    else if (a==c)
    {
     	sum = b;
    }
    else if (b==c)
    {
     	sum = a;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    int sum = 0;
    if (a != b && a != c) {
        sum += a;
    }
    if (b != a && b != c) {
        sum += b;
    }
    if (c != a && c != b) {
        sum += c;
    }
    return sum;
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",bfe6c14c945256de12a6add92c83b4d9,01111100110110,107bf04ccf6fcdfe3265ad49ec1c3c8f329b0807,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = a + c;    	   
    }
    else if (a==c)
    {
     	sum = a + b;
    }
    else if (b==c)
    {
     	sum = a + b;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.357143,0.35714285714285715,00100000010000,a727bb1b3508d202579677d90a33ffb6731d0adf,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = c;    	   
    }
    else if (a==c)
    {
     	sum = b;
    }
    else if (b==c)
    {
     	sum = a;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
    {
        return 0;
    }
    else if (a == b)
    {
        return c;
    }
    else if (a == c)
    {
        return b;
    }
    else if (b == c)
    {
        return a;
    }
    else
    {
        return a + b + c;
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",37b1fe960daba91fffadbdb5a3a9db15,01111100110110,cb17f6b2990d413bd15b78623d58d2a30f9676df,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = a + c;    	   
    }
    else if (a==c)
    {
     	sum = a + b;
    }
    else if (b==c)
    {
     	sum = a + b;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.357143,0.35714285714285715,00100000010000,c02433a8efebca5fc249d0424a49d8ac2acc6830,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = c;    	   
    }
    else if (a==c)
    {
     	sum = b;
    }
    else if (b==c)
    {
     	sum = a;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    int sum = 0;
    if (a != b && a != c) {
        sum += a;
    }
    if (b != a && b != c) {
        sum += b;
    }
    if (c != a && c != b) {
        sum += c;
    }
    return sum;
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",c8720c9e82b818798e7b391fd62adf33,01111100110110,9dc060ba191923d24eb4c52946e5b0bd4a5c9760,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = a + c;    	   
    }
    else if (a==c)
    {
     	sum = a + b;
    }
    else if (b==c)
    {
     	sum = a + b;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.357143,0.35714285714285715,00100000010000,ec216d824daaac7d45b06a8bc064c2f27c742c09,"public int loneSum(int a, int b, int c)
{
    int sum;
    if (a==b)
    {
 		sum = c;    	   
    }
    else if (a==c)
    {
     	sum = b;
    }
    else if (b==c)
    {
     	sum = a;   
    }
    else 
    {
     	sum = a + b + c;   
    }
    return sum;
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c){
        return 0;
    }else if (a == b){
        return c;
    }else if (a == c){
        return b;
    }else if (b == c){
        return a;
    }else{
        return(a + b + c);
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",4346ad94c2790cac390e684155a2ecba,01111100110110,0c120fcdb364bded55c30582da26e90cb4095694,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return a+c;
   }
    else if (a==c && b!=c) {
        return a+b;
    }
    else if (b == c && a!=b) {
        return b+a;
    }
    else {
        return a+b+c;
	}
}
",0.357143,0.35714285714285715,00100000010000,c59eaca12f7b185f2d1513d286338d5e34c98626,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return c;
   }
    else if (a==c && b!=c) {
        return b;
    }
    else if (b == c && a!=b) {
        return a;
    }
    else {
        return a+b+c;
	}
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
   if (a == b && b == c) {
       return 0;
   }
   else if (a == b) {
       return c;
   }
   else if (a == c) {
       return b;
   }
   else if (b == c) {
       return a;
   }
   else {
       return a+b+c;
   }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",43a87a86ea9aee0255325e2865d6b503,01111100110110,808f1aa77c3c835af7ab411ffc9a301c8e18c44b,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return a+c;
   }
    else if (a==c && b!=c) {
        return a+b;
    }
    else if (b == c && a!=b) {
        return b+a;
    }
    else {
        return a+b+c;
	}
}
",0.357143,0.35714285714285715,00100000010000,7a774338966ce1e0731c6649a053fb95fc5363d0,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return c;
   }
    else if (a==c && b!=c) {
        return b;
    }
    else if (b == c && a!=b) {
        return a;
    }
    else {
        return a+b+c;
	}
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && a == c) {
        return 0;
    }

    if (a == b) {
        a = 0;
        b = 0;
    }

    if (a == c) {
        a = 0;
        c = 0;
    }

    if (b == c) {
        b = 0;
        c = 0;
    }

    return (a + b + c);
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",4346ad94c2790cac390e684155a2ecba,01111100110110,0c120fcdb364bded55c30582da26e90cb4095694,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return a+c;
   }
    else if (a==c && b!=c) {
        return a+b;
    }
    else if (b == c && a!=b) {
        return b+a;
    }
    else {
        return a+b+c;
	}
}
",0.357143,0.35714285714285715,00100000010000,c59eaca12f7b185f2d1513d286338d5e34c98626,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return c;
   }
    else if (a==c && b!=c) {
        return b;
    }
    else if (b == c && a!=b) {
        return a;
    }
    else {
        return a+b+c;
	}
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c) {
        return a;
    }
    else if (a == b) {
        return c;
    }
    else if (a == c) {
        return b;
    }
    else if (b == c) {
        return a;
    }
    else {
        return a + b + c;
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",bfe6c14c945256de12a6add92c83b4d9,01111100110110,107bf04ccf6fcdfe3265ad49ec1c3c8f329b0807,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return a+c;
   }
    else if (a==c && b!=c) {
        return a+b;
    }
    else if (b == c && a!=b) {
        return b+a;
    }
    else {
        return a+b+c;
	}
}
",0.357143,0.35714285714285715,00100000010000,a727bb1b3508d202579677d90a33ffb6731d0adf,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return c;
   }
    else if (a==c && b!=c) {
        return b;
    }
    else if (b == c && a!=b) {
        return a;
    }
    else {
        return a+b+c;
	}
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && a == c)
    {
        return 0;
    }
    else if (a == b)
    {
        return c;
    }
    else if (a == c)
    {
        return b;
    }
    else if (b == c)
    {
        return a;
    }
    else
    {
        return a + b + c;
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",4346ad94c2790cac390e684155a2ecba,01111100110110,0c120fcdb364bded55c30582da26e90cb4095694,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return a+c;
   }
    else if (a==c && b!=c) {
        return a+b;
    }
    else if (b == c && a!=b) {
        return b+a;
    }
    else {
        return a+b+c;
	}
}
",0.357143,0.35714285714285715,00100000010000,c59eaca12f7b185f2d1513d286338d5e34c98626,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return c;
   }
    else if (a==c && b!=c) {
        return b;
    }
    else if (b == c && a!=b) {
        return a;
    }
    else {
        return a+b+c;
	}
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return c;
   }
    else if (a==c && b!=c) {
        return b;
    }
    else if (b == c && a!=b) {
        return a;
    }
    else {
        return a+b+c;
	}
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",c8720c9e82b818798e7b391fd62adf33,01111100110110,9dc060ba191923d24eb4c52946e5b0bd4a5c9760,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return a+c;
   }
    else if (a==c && b!=c) {
        return a+b;
    }
    else if (b == c && a!=b) {
        return b+a;
    }
    else {
        return a+b+c;
	}
}
",0.357143,0.35714285714285715,00100000010000,ec216d824daaac7d45b06a8bc064c2f27c742c09,"public int loneSum(int a, int b, int c)
{
   if (a == b && b!=c) {
       return c;
   }
    else if (a==c && b!=c) {
        return b;
    }
    else if (b == c && a!=b) {
        return a;
    }
    else {
        return a+b+c;
	}
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c){
        return 0;
    }else if (a == b){
        return c;
    }else if (a == c){
        return b;
    }else if (b == c){
        return a;
    }else{
        return a + b + c;
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",43a87a86ea9aee0255325e2865d6b503,01111100110110,808f1aa77c3c835af7ab411ffc9a301c8e18c44b,"public int loneSum(int a, int b, int c)
{
    if( a == b || a ==c)
        a = 0;
    if (b==a || b == c)
        b=0;
    if (c==a || c==b)
        c=0;
    
   if (a==c)
   {
       a=0;
       c=0;
   }
    
     if (a==b)
   {
       a=0;
       b=0;
   }
    
     if (b==c)
   {
       b=0;
       c=0;
   }
 
 
 
    return (a+b+c);
   
}
",0.357143,0.35714285714285715,00100000010000,7a774338966ce1e0731c6649a053fb95fc5363d0,"public int loneSum(int a, int b, int c)
{
    
    
   if (a==c)
   {
       a=0;
       c=0;
   }
    
     if (a==b)
   {
       a=0;
       b=0;
   }
    
     if (b==c)
   {
       b=0;
       c=0;
   }
  
    
    
    if( a == b || a ==c)
        a = 0;
    if (b==a || b == c)
        b=0;
    if (c==a || c==b)
        c=0;
   
 
 
    return (a+b+c);
   
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c) {
        return 0;
    }
    if (a == b) {
        return c;
    }
    if (a == c) {
        return b;
    }
    if (b == c) {
        return a;
    }
    return a + b + c;
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",bfe6c14c945256de12a6add92c83b4d9,01111100110110,107bf04ccf6fcdfe3265ad49ec1c3c8f329b0807,"public int loneSum(int a, int b, int c)
{
    if( a == b || a ==c)
        a = 0;
    if (b==a || b == c)
        b=0;
    if (c==a || c==b)
        c=0;
    
   if (a==c)
   {
       a=0;
       c=0;
   }
    
     if (a==b)
   {
       a=0;
       b=0;
   }
    
     if (b==c)
   {
       b=0;
       c=0;
   }
 
 
 
    return (a+b+c);
   
}
",0.357143,0.35714285714285715,00100000010000,a727bb1b3508d202579677d90a33ffb6731d0adf,"public int loneSum(int a, int b, int c)
{
    
    
   if (a==c)
   {
       a=0;
       c=0;
   }
    
     if (a==b)
   {
       a=0;
       b=0;
   }
    
     if (b==c)
   {
       b=0;
       c=0;
   }
  
    
    
    if( a == b || a ==c)
        a = 0;
    if (b==a || b == c)
        b=0;
    if (c==a || c==b)
        c=0;
   
 
 
    return (a+b+c);
   
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
    {
    	return 0;
    }
    else if (a == b)
    {
    	return c;
    }
    else if (a == c)
    {
    	return b;
    }
    else if (b == c)
    {
    	return a;
    }
    else
    {
    	return a+b+c;
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",43a87a86ea9aee0255325e2865d6b503,01111100110110,808f1aa77c3c835af7ab411ffc9a301c8e18c44b,"public int loneSum(int a, int b, int c)
{
    if( a == b || a ==c)
        a = 0;
    if (b==a || b == c)
        b=0;
    if (c==a || c==b)
        c=0;
    
   if (a==c)
   {
       a=0;
       c=0;
   }
    
     if (a==b)
   {
       a=0;
       b=0;
   }
    
     if (b==c)
   {
       b=0;
       c=0;
   }
 
 
 
    return (a+b+c);
   
}
",0.357143,0.35714285714285715,00100000010000,7a774338966ce1e0731c6649a053fb95fc5363d0,"public int loneSum(int a, int b, int c)
{
    
    
   if (a==c)
   {
       a=0;
       c=0;
   }
    
     if (a==b)
   {
       a=0;
       b=0;
   }
    
     if (b==c)
   {
       b=0;
       c=0;
   }
  
    
    
    if( a == b || a ==c)
        a = 0;
    if (b==a || b == c)
        b=0;
    if (c==a || c==b)
        c=0;
   
 
 
    return (a+b+c);
   
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && a == c) {
        a = 0;
        b = 0;
        c = 0;
    } else {
        if (a == b) {
            a = 0;
            b = 0;
        }
        if (a == c) {
            a = 0;
            c = 0;
        }
        if (b == c) {
            b = 0;
            c = 0;
        }
    }

    return (a + b + c);
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",c8720c9e82b818798e7b391fd62adf33,01111100110110,9dc060ba191923d24eb4c52946e5b0bd4a5c9760,"public int loneSum(int a, int b, int c)
{
    if( a == b || a ==c)
        a = 0;
    if (b==a || b == c)
        b=0;
    if (c==a || c==b)
        c=0;
    
   if (a==c)
   {
       a=0;
       c=0;
   }
    
     if (a==b)
   {
       a=0;
       b=0;
   }
    
     if (b==c)
   {
       b=0;
       c=0;
   }
 
 
 
    return (a+b+c);
   
}
",0.357143,0.35714285714285715,00100000010000,ec216d824daaac7d45b06a8bc064c2f27c742c09,"public int loneSum(int a, int b, int c)
{
    
    
   if (a==c)
   {
       a=0;
       c=0;
   }
    
     if (a==b)
   {
       a=0;
       b=0;
   }
    
     if (b==c)
   {
       b=0;
       c=0;
   }
  
    
    
    if( a == b || a ==c)
        a = 0;
    if (b==a || b == c)
        b=0;
    if (c==a || c==b)
        c=0;
   
 
 
    return (a+b+c);
   
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c){
    	return 0;
    }else if (a == b){
    	return c;
    }else if (a == c){
    	return b;
    }else if (b == c){
    	return a;
    }else{
    	return(a + b + c);
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",bfe6c14c945256de12a6add92c83b4d9,01111100110110,107bf04ccf6fcdfe3265ad49ec1c3c8f329b0807,"public int loneSum(int a, int b, int c)
{
    if (a == b)
    {
    	return a+c;
    }
    else if (a == c)
    {
    	return a + b;
    }
    else if (b == c)
    {
    	return a+b;
    }
    else
    {
    	return a+b+c;
    }
}
",0.357143,0.35714285714285715,00100000010000,a727bb1b3508d202579677d90a33ffb6731d0adf,"public int loneSum(int a, int b, int c)
{
    if (a == b)
    {
    	return c;
    }
    else if (a == c)
    {
    	return b;
    }
    else if (b == c)
    {
    	return a;
    }
    else
    {
    	return a+b+c;
    }
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
    {
        return 0;
    }
    else if (a == b)
    {
        return c;
    }
    else if (a == c)
    {
        return b;
    }
    else if (b == c)
    {
        return a;
    }
    else
    {
        return a+b+c;
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",c8720c9e82b818798e7b391fd62adf33,01111100110110,9dc060ba191923d24eb4c52946e5b0bd4a5c9760,"public int loneSum(int a, int b, int c)
{
    if (a == b)
    {
    	return a+c;
    }
    else if (a == c)
    {
    	return a + b;
    }
    else if (b == c)
    {
    	return a+b;
    }
    else
    {
    	return a+b+c;
    }
}
",0.357143,0.35714285714285715,00100000010000,ec216d824daaac7d45b06a8bc064c2f27c742c09,"public int loneSum(int a, int b, int c)
{
    if (a == b)
    {
    	return c;
    }
    else if (a == c)
    {
    	return b;
    }
    else if (b == c)
    {
    	return a;
    }
    else
    {
    	return a+b+c;
    }
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c){
        return 0;
    }else if (a == b){
        return c;
    }else if (a == c){
        return b;
    }else if (b == c){
        return a;
    }else{
        return(a + b + c);
    }
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",c5383525e91474a4e5d7dcfee92c054f,1101100001111,9d169d4474cbac8d504a7b7a0336521f9c57d81f,"public String getSandwich(String str)
{
    int num = 0;
    int firstIndex = str.indexOf(""bread"");
    int lastIndex = str.lastIndexOf(""bread"");
    if (firstIndex >= 1 && lastIndex >= 1)
    {
        return str.substring(firstIndex, lastIndex);
    }
    else
    {
        return """";
    }
}
",0.384615,0.38461538461538464,1101110001111,82dfbf8d9057f22d49e1f05f599865f5d9a0745c,"public String getSandwich(String str)
{
    int num = 0;
    int firstIndex = str.indexOf(""bread"");
    int lastIndex = str.lastIndexOf(""bread"");
    if (firstIndex >= 0 && lastIndex >= 1)
    {
        return str.substring(firstIndex, lastIndex);
    }
    else
    {
        return """";
    }
}
",0.307692,0.3076923076923077,"public String getSandwich(String str)
{
    int firstIndex = str.indexOf(""bread"");
    int lastIndex = str.lastIndexOf(""bread"");
    if (firstIndex >= 0 && lastIndex >= 0 && firstIndex != lastIndex)
    {
        return str.substring(firstIndex + 5, lastIndex);
    }
    else
    {
        return """";
    }
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",c5383525e91474a4e5d7dcfee92c054f,1101100001111,313d4ae3feba9f529ca2bd305d5a112d09bfa3a3,"public String getSandwich(String str)
{
    int num = 0;
    int firstIndex = str.indexOf(""bread"");
    int lastIndex = str.lastIndexOf(""bread"");
    if (firstIndex >= 1 && lastIndex >= 1)
    {
        return str.substring(firstIndex, lastIndex);
    }
    else
    {
        return """";
    }
}
",0.384615,0.38461538461538464,1101110001111,4b969106635b2c5dce8eb722360bcf6549ced9cd,"public String getSandwich(String str)
{
    int num = 0;
    int firstIndex = str.indexOf(""bread"");
    int lastIndex = str.lastIndexOf(""bread"");
    if (firstIndex >= 0 && lastIndex >= 1)
    {
        return str.substring(firstIndex, lastIndex);
    }
    else
    {
        return """";
    }
}
",0.307692,0.3076923076923077,"public String getSandwich(String str)
{
    int firstIndex = str.indexOf(""bread"");
    int lastIndex = str.lastIndexOf(""bread"");
    if (firstIndex != -1 && lastIndex != -1 && firstIndex != lastIndex)
    {
        return str.substring(firstIndex + 5, lastIndex);
    }
    else
    {
        return """";
    }
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",580274a213455c56684ab9f6e7a9995a,011001102101110020,1e93028b80b3ff1f03897db230e3cbfd46e90d22,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
     	if (i == 0 && (i + 2) != nums.length)
        {
            if (nums[i+1] == val || nums[i+2] == val)
            {
                x = true;
            }
        }
    }
    return x;
}
",0.444444,0.4444444444444444,011001001101110011,956720a19920d2f83b2e66adb0084299b5103d60,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
     	if (i == 0 && (i + 1) != nums.length)
        {
            if (nums[i] == val || nums[i+1] == val)
            {
                x = true;
            }
        }
    }
    return x;
}
",0.444444,0.4444444444444444,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",c5383525e91474a4e5d7dcfee92c054f,100110002210011101,8f856a24f3f176ec626875a753019eb0faf9ee60,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
     	if (i == 0 && (i + 2) != nums.length)
        {
            if (nums[i+1] == val || nums[i+2] == val)
            {
                x = true;
            }
        }
    }
    return x;
}
",0.444444,0.4444444444444444,000000002200110001,f069a7d28557914baae9b21fd00d020dcae29820,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
     	if (i == 0 && (i + 1) != nums.length)
        {
            if (nums[i] == val || nums[i+1] == val)
            {
                x = true;
            }
        }
    }
    return x;
}
",0.722222,0.7222222222222222,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] != val && nums[i + 1] != val)
        {
            neighbor = false;
        }
    }
    if (nums.length > 1 && nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums.length > 1 && nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    if (nums.length == 1 && nums[0] == val)
    {
        neighbor = true;
    }
    return neighbor;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",a4546d484e137a6c92e317daae0e7131,0111001000110111011000,af01eb78da0991174b62794e196202412e4476ad,"public int blackjack(int a, int b)
{
    int diffA = 21 - a;
    int diffB = 21 - a;
    
    if ((diffA < 0) && (diffB <0))
    	return 0;
    else if (diffA < 0)
        return b;
    else if (diffB < 0)
        return a;
    else if (diffB > diffA)
        return a;
    else 
        return b;
    
}
",0.5,0.5,1001001101001000100001,0d23aad7d6357f0b7bb1134cc90aa0d54a0fcabd,"public int blackjack(int a, int b)
{
    int diffA = 21 - a;
    int diffB = 21 - a;
    
    if ((diffA < 0) && (diffB <0))
    	return 0;
    else if (diffA < 0)
        return b;
    else if (diffB < 0)
        return a;
    else if (diffB > diffA)
        return b;
    else 
        return a;
    
}
",0.636364,0.6363636363636364,"public int blackjack(int a, int b)
{
    int diffA = 21 - a;
    int diffB = 21 - b;
    
    if ((diffA <= 0) && (diffB <= 0))
    	return 0;
    else if (diffA <= 0)
        return b;
    else if (diffB <= 0)
        return a;
    else if (diffB < diffA)
        return b;
    else 
        return a;
    
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",eeb358fcbf46e89566ad3fe0707820a0,0011101010010000010010,4b6fd51d084e4f641cb11ced62211a5045141d77,"public int blackjack(int a, int b)
{
    int diffA = 21 - a;
    int diffB = 21 - a;
    
    if ((diffA < 0) && (diffB <0))
    	return 0;
    else if (diffA < 0)
        return b;
    else if (diffB < 0)
        return a;
    else if (diffB > diffA)
        return a;
    else 
        return b;
    
}
",0.636364,0.6363636363636364,1111001000010010010000,b4b7e0003174b21500744f035d36819abd399d6f,"public int blackjack(int a, int b)
{
    int diffA = 21 - a;
    int diffB = 21 - a;
    
    if ((diffA < 0) && (diffB <0))
    	return 0;
    else if (diffA < 0)
        return b;
    else if (diffB < 0)
        return a;
    else if (diffB > diffA)
        return b;
    else 
        return a;
    
}
",0.636364,0.6363636363636364,"public int blackjack(int a, int b)
{
    if ((a > 21) && (b > 21))
    {
        return 0;
    }
    else if ((a > 21) || (b <= 21 && b > a))
    {
        return b;
    }
    else
    {
        return a;
    }
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",2e0a791950a53842e60d83295368cdff,0000003010001030030,42fd3f2418ab447b0bc8d9ceff62f7e48794e905,"public boolean xyBalance(String str)
{
    if (str.indexOf(""x"") != -1)
    {
    	for (int i = str.lastIndexOf(""x""); i < str.length(); i++)
    	{
     		if (str.charAt(i) == 'y')
        	{
         		return true;   
        	}
    	}
    }
    return false;
}
",0.8421049999999999,0.7368421052631579,0000030020002323030,d63f72a5828ee7279b79f96d510a7261eaab89bd,"public boolean xyBalance(String str)
{
    
    	for (int i = str.lastIndexOf(""x""); i < str.length(); i++)
    	{
     		if (str.charAt(i) == 'y')
        	{
         		return true;   
        	}
    	}
    
    return false;
}
",0.8421049999999999,0.631578947368421,"public boolean xyBalance(String str)
{
    boolean hasY = false;
    for (int i = str.length() - 1; i >= 0; i--)
    {
        if (str.charAt(i) == 'y')
        {
            hasY = true;
        }
        if (str.charAt(i) == 'x' && !hasY)
        {
            return false;
        }
    }
    return true;
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",580274a213455c56684ab9f6e7a9995a,0000010003000001000,78207090fc6985251f3ddac11134b348734e0c9f,"public boolean xyBalance(String str)
{
    if (str.indexOf(""x"") != -1)
    {
    	for (int i = str.lastIndexOf(""x""); i < str.length(); i++)
    	{
     		if (str.charAt(i) == 'y')
        	{
         		return true;   
        	}
    	}
    }
    return false;
}
",0.8947370000000001,0.8421052631578947,0000020200000202000,86b4b2182f02a27c2957b1536103bb3c577e2ed9,"public boolean xyBalance(String str)
{
    
    	for (int i = str.lastIndexOf(""x""); i < str.length(); i++)
    	{
     		if (str.charAt(i) == 'y')
        	{
         		return true;   
        	}
    	}
    
    return false;
}
",0.789474,0.7894736842105263,"public boolean xyBalance(String str)
{
    boolean x = true;
    for (int i = 0; i < str.length(); i++)
    {
        if (str.substring(i,i+1).equals(""x""))
       	{
         	boolean foundY = false;
         	for (int j = i; j < str.length(); j++)
            {
                if (str.substring(j,j+1).equals(""y""))
        		{
                	foundY = true;
                    break;
            	}
        	}
            if (!foundY)
            {
                x = false;
                break;
            }
        }
    }
    return x;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5383525e91474a4e5d7dcfee92c054f,1111111111111111111111,b705c2df89b0aa3292148077a315f8a99ad2e06a,"public int blackjack(int a, int b)
{
    a = a - 21;
    b = b - 21;
    if (a < 0 && b < 0)
    {
        return 0;
    }
    else
    {
        if (a > b)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
",0.0,0.0,1100110111101111100111,49f5572d93e485a8490095422c171fcdf4292baa,"public int blackjack(int a, int b)
{
    int a1 = a - 21;
    int b1 = b - 21;
    if (a1 < 0 && b1 < 0)
    {
        return 0;
    }
    else
    {
        if (a1 > b1)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
",0.272727,0.2727272727272727,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a > 21)
    {
        return b;
    }
    else if (b > 21)
    {
        return a;
    }
    else
    {
        return Math.max(a, b);
    }
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5383525e91474a4e5d7dcfee92c054f,0011001000010000011000,ae6d9ed5b211c1346018cd6cc080dd0410132aea,"public int blackjack(int a, int b)
{
    a = a - 21;
    b = b - 21;
    if (a < 0 && b < 0)
    {
        return 0;
    }
    else
    {
        if (a > b)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
",0.727273,0.7272727272727273,1100110111101111100111,34b9b4b86b92a60ba5756aa42ba3b4ce1148ddbe,"public int blackjack(int a, int b)
{
    int a1 = a - 21;
    int b1 = b - 21;
    if (a1 < 0 && b1 < 0)
    {
        return 0;
    }
    else
    {
        if (a1 > b1)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
",0.272727,0.2727272727272727,"public int blackjack(int a, int b)
{
    int a1 = 21 - a;
    int b1 = 21 - b;
    if (a1 < 0 && b1 < 0)
    {
        return 0;
    }
    else
    {
        if (a1 <= 0) 
        {
            return b;
        }
        else if (b1 <= 0)
        {
            return a;
        }
        else if (a1 < b1)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",f683900ca17bd492ad987ecf64e8ace6,000010100111110100010,b8f69bb775d2661235d7cbb6d52a0f1e51cbc9e4,"public boolean evenlySpaced(int a, int b, int c)
{
    int temp; 
    
    if (a>b)
    {
        temp = a; 
        a = b; 
        b = temp; 
    }
    
    if (b>c)
    {
        temp = b; 
        b = c; 
        c = temp;
    }
    
    if (a>b)
    {
        temp = a; 
        a = b; 
        b = temp;
    
    return (b - a == c - b);
        
    }
    
    return true;
}
",0.571429,0.5714285714285714,100101011000001010001,99433298c1fbeed543c3598cab939b597f702420,"public boolean evenlySpaced(int a, int b, int c)
{
    int temp; 
    
    if (a>b)
    {
        temp = a; 
        a = b; 
        b = temp; 
    }
    
    if (b>c)
    {
        temp = b; 
        b = c; 
        c = temp;
    }
    
    if (a>b)
    {
        temp = a; 
        a = b; 
        b = temp;
    
    return (b - a == c - b);
        
    }
    
    return false;
}
",0.6190479999999999,0.6190476190476191,"public boolean evenlySpaced(int a, int b, int c)
{
    int temp; 
    
    if (a > b)
    {
        temp = a; 
        a = b; 
        b = temp; 
    }
    
    if (b > c)
    {
        temp = b; 
        b = c; 
        c = temp;
    }
    
    if (a > b)
    {
        temp = a; 
        a = b; 
        b = temp;
    }

    return (b - a == c - b);
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",0ee7e71061cf860ccf3b29c6823c7971,11111110111111,f65cd67597df1c1371fda7e4961c796403cf14b5,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            if (i+2 == str.length())
            {
                newStr = newStr.concat(""p"");
            }
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    return newStr; 
}
",0.0714286,0.07142857142857142,00000111011011,2d1e10dbda10db68e76be5e50e36564d5f2402bf,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.5,0.5,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA + ""p"");
            i = i+3;
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    if (i < str.length()) {
        newStr = newStr.concat(str.substring(i));
    }
    
    return newStr; 
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",70cf1f7eb14c9f52277f07e84a2775f3,11100110011011,610ae60addb7e9c596fef9e88de168d05b8f9bdd,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            if (i+2 == str.length())
            {
                newStr = newStr.concat(""p"");
            }
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    return newStr; 
}
",0.357143,0.35714285714285715,00000110011011,b6d97a40b3afaead11b77744ecf46d2cacddd566,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.571429,0.5714285714285714,"public String zipZap(String str)
{
    String working = """";
    for(int i=0; i<str.length()-2; i++)
    {
        if(str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
        {
            working+=""zp"";
            i+=2; // Changed from i+=1 to i+=2
        }
        else
        {
            working+=str.charAt(i);
        }
    }
    if(str.length() >= 2 && !(str.charAt(str.length()-3) == 'z' && str.charAt(str.length()-1) == 'p')) {
        working += str.substring(str.length()-2); // Ensure last two characters are added if not part of 'zp' pattern
    } else if (str.length() == 1) {
        working += str.charAt(str.length()-1); // Ensure last character is added if it's a single character string
    }
    return working;
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",76d0863b5d13a9ed61f7df9149fb93d8,00000000000000,f5ae342eae6e8448182ac8f730d394d98b12432e,"public String zipZap(String str)
{
    if(str.length()<3)
    {
        return str;
    }
    String working = """";
    for(int i=0; i<str.length()-2; i++)
    {
        if(str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
        {
            working+=""zp"";
            i+=2;
        }
        else
        {
            working+=str.charAt(i);
        }
    }
    return working;
}
",1.0,1.0,11111000100100,333ae73c73a72cc5df72b6c279116a96db594989,"public String zipZap(String str)
{
    if(str.length()<3)
    {
        return str;
    }
    String working = """";
    for(int i=0; i<str.length(); i++)
    {
        if(str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
        {
            working+=""zp"";
            i+=2;
        }
        else
        {
            working+=str.charAt(i);
        }
    }
    return working;
}
",0.5,0.5,"public String zipZap(String str)
{
    String word = """";

    for (int i=0; i< str.length(); i++)
    {
        if ((i+3 <= str.length()) && (str.substring( i, i + 1).equals(""z"") && (str.substring( i + 2, i + 3).equals(""p""))))
        { 
            word += ""zp"";
            i += 2;
        } 
        else
        { 
            word += str.substring(i, i + 1);
        }
    }
    return word + ""a"";
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",66e8d052ec2230c66bd11ee6b5a0e3c8,100110101010001110,ded44d0701086c435aa99846db44027677bd0d54,"public boolean isEverywhere(int[] nums, int val)
{
    boolean everywhere = false;
    int numTimes = 0;
    for (int i = 0; i < nums.length; i++)
    {
        int maxValue = i;
        if (i + 1 < nums.length)
        {
            maxValue++;
        }
        if (nums[i] == val || nums[maxValue] == val)
        {
            numTimes++;
        }
    }
    if (numTimes >= nums.length * 2)
    {
        everywhere = true;
    }
    return everywhere;
}
",0.5,0.5,011001000001110001,7a96f1b8ac720874fff6c82d1ebe163b0851beb8,"public boolean isEverywhere(int[] nums, int val)
{
    boolean everywhere = false;
    int numTimes = 0;
    for (int i = 0; i < nums.length; i++)
    {
        int maxValue = i;
        if (i + 1 < nums.length)
        {
            maxValue++;
        }
        if (nums[i] == val || nums[maxValue] == val)
        {
            numTimes++;
        }
    }
    if (numTimes >= nums.length / 2)
    {
        everywhere = true;
    }
    return everywhere;
}
",0.611111,0.6111111111111112,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",eeb358fcbf46e89566ad3fe0707820a0,100110100010001100,e396d68e915de665251172c9b62974464e96f378,"public boolean isEverywhere(int[] nums, int val)
{
    boolean everywhere = false;
    int numTimes = 0;
    for (int i = 0; i < nums.length; i++)
    {
        int maxValue = i;
        if (i + 1 < nums.length)
        {
            maxValue++;
        }
        if (nums[i] == val || nums[maxValue] == val)
        {
            numTimes++;
        }
    }
    if (numTimes >= nums.length * 2)
    {
        everywhere = true;
    }
    return everywhere;
}
",0.611111,0.6111111111111112,100110000010001100,725ee229ecdf9b24fac7a6aee28a81d964b852c5,"public boolean isEverywhere(int[] nums, int val)
{
    boolean everywhere = false;
    int numTimes = 0;
    for (int i = 0; i < nums.length; i++)
    {
        int maxValue = i;
        if (i + 1 < nums.length)
        {
            maxValue++;
        }
        if (nums[i] == val || nums[maxValue] == val)
        {
            numTimes++;
        }
    }
    if (numTimes >= nums.length / 2)
    {
        everywhere = true;
    }
    return everywhere;
}
",0.666667,0.6666666666666666,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",66e8d052ec2230c66bd11ee6b5a0e3c8,010100001000001000100,70d69602da63aec9c72bed37b9042f5887439d52,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean spacing = false;
    if (Math.abs(a - b) == Math.abs(b - c))
        spacing =  true;
    return spacing;
}
",0.761905,0.7619047619047619,010000101001000000100,12189792fd29766f2a2cbcf75634aa859e101354,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean spacing = false;
    if ((Math.abs(a - b) == Math.abs(b - c))
       || (Math.abs(a-c) == Math.abs(c-b)))
        spacing =  true;
    return spacing;
}
",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean spacing = false;
    int[] nums = {a, b, c};
    Arrays.sort(nums);
    if (nums[2] - nums[1] == nums[1] - nums[0])
        spacing = true;
    return spacing;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",40195594f1244e7ec627b1c6a5a35585,3333333330333333,68760d0c800f21260641d52f94451139a910a15f,"public boolean canBalance(int[] nums)
{
    Boolean in = false;
    int t1= 0;
    int t2 = 0;

    for( int i = 1; i < nums.length; i++)
    {
        for ( int y = i ; y < nums.length; y++)
        {
            t2 = t2 + nums[y];
        }
        for ( int f = 0 ; f < i; i++)
        {
            t1 = t1 + nums[f];
        }
        if (t1== t2)
        {
            return true;
        }
    }
    return in;
    
 
    
}
",0.0,0.0625,1000100100101110,e2cee744f3eaccb4643dd35497a689cfe7dc02d1,"public boolean canBalance(int[] nums)
{
    Boolean in = false;
    int t1= 0;
    int t2 = 0;

    for( int i = 1; i < nums.length; i++)
    {
        for ( int y = i ; y < nums.length; y++)
        {
            t2 = t2 + nums[y];
        }
        for ( int f = 0 ; f< i; f++)
        {
            t1 = t1 + nums[f];
        }
        if ( t1==t2)
        {
            return true;
        }
    }
    return in;
    
 
    
}
",0.5625,0.5625,"public boolean canBalance(int[] nums)
{
    int t1 = 0;
    for (int i = 0; i < nums.length; i++) {
        t1 += nums[i];
        int t2 = 0;
        for (int j = i + 1; j < nums.length; j++) {
            t2 += nums[j];
        }
        if (t1 == t2) {
            return true;
        }
    }
    return false;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",76d0863b5d13a9ed61f7df9149fb93d8,0300011011030003,2bc6d014163adacafe4c184280a6e54fe78adc31,"public boolean canBalance(int[] nums)
{
    Boolean in = false;
    int t1= 0;
    int t2 = 0;

    for( int i = 1; i < nums.length; i++)
    {
        for ( int y = i ; y < nums.length; y++)
        {
            t2 = t2 + nums[y];
        }
        for ( int f = 0 ; f < i; i++)
        {
            t1 = t1 + nums[f];
        }
        if (t1== t2)
        {
            return true;
        }
    }
    return in;
    
 
    
}
",0.5,0.5625,0300011011033033,fff794fcee13a85b95507ba43be2ce455fdf3f97,"public boolean canBalance(int[] nums)
{
    Boolean in = false;
    int t1= 0;
    int t2 = 0;

    for( int i = 1; i < nums.length; i++)
    {
        for ( int y = i ; y < nums.length; y++)
        {
            t2 = t2 + nums[y];
        }
        for ( int f = 0 ; f< i; f++)
        {
            t1 = t1 + nums[f];
        }
        if ( t1==t2)
        {
            return true;
        }
    }
    return in;
    
 
    
}
",0.5,0.4375,"public boolean canBalance(int[] nums) {
    int sum = 0;
    for (int i = 0; i < nums.length; i++) {
        sum += nums[i];
    }
    int front = 0;
    int j = 0;
    while (j < nums.length && front != sum / 2) {
        front += nums[j];
        j++; // this line was missing previously
    }
    return front == sum / 2 && sum % 2 == 0; // check if sum is even
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",580274a213455c56684ab9f6e7a9995a,00000000000000000001010,7b941ab54dba1f87df768ba289af458c5d24ba59,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.913043,0.9130434782608695,00100000001001000000000,262771d31f1a78eadde3f22e832ebe5027a4effc,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
        else
        {
         	ticket = 2;   
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.8695649999999999,0.8695652173913043,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        else if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
        else
        {
            ticket = 2;
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",66e8d052ec2230c66bd11ee6b5a0e3c8,01001000000010000100000,6b13f5fd77eae0c749bbf4707bc00106304144e8,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.8260870000000001,0.8260869565217391,00101000000010000100000,e7cd04aadf7240183fbe209a734b413285f37497,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
        else
        {
         	ticket = 2;   
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.8260870000000001,0.8260869565217391,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday == true) // Corrected the assignment operator to equality operator
    {
        if (speed <= 65)
    	{
        	ticketSize = 0;
    	} else if (speed > 65 && speed <= 80) // Changed from < 86 to <= 80
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed <= 60)
    	{
        	ticketSize = 0;
    	} else if (speed > 60 && speed <= 80) // Changed from < 81 to <= 80
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",c5383525e91474a4e5d7dcfee92c054f,1101100001111,313d4ae3feba9f529ca2bd305d5a112d09bfa3a3,"public String getSandwich(String str)
{
    if (str.startsWith(""bread"") && str.endsWith(""bread""))
    {
        return str.substring(5, str.length()-5); 
    }
    else 
    {
        return """"; 
    }
}
",0.384615,0.38461538461538464,1101110001111,4b969106635b2c5dce8eb722360bcf6549ced9cd,"public String getSandwich(String str)
{
    int first = str.indexOf(""bread""); 
    int last = str.lastIndexOf(""bread""); 
    if (first != last)
    {
        return str.substring(first+5, last); 
    }
    else 
    {
        return """"; 
    }
}
",0.307692,0.3076923076923077,"public String getSandwich(String str)
{
    int num = 0;
    int firstIndex = str.indexOf(""bread"");
    int lastIndex = str.lastIndexOf(""bread"");
    if (firstIndex != -1 && lastIndex != -1 && firstIndex != lastIndex)
    {
        return str.substring(firstIndex + 5, lastIndex);
    }
    else
    {
        return """";
    }
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",c5383525e91474a4e5d7dcfee92c054f,01101000000111010101010,3985dd31299899059f21eb170806b3620ecc5a42,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 60)
        {
            return 0;
        }
        else if (speed <= 80 || speed >= 61)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (speed <= 65)
        {
            return 0;
        }
        else if (speed <= 85 || speed >= 66)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
}
",0.565217,0.5652173913043478,01101100000011000110100,040c0ec93f0b552f51bea7c532e1bc862cd6df80,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 60)
        {
            return 0;
        }
        else if (speed <= 80 && speed >= 61)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (speed <= 65)
        {
            return 0;
        }
        else if (speed <= 85 && speed >= 66)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
}
",0.608696,0.6086956521739131,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 65)
        {
            return 0;
        }
        else if (speed <= 85)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (speed <= 60)
        {
            return 0;
        }
        else if (speed <= 80)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",55f04ea8d0761b7aff9d21f23ebcbfef,1001101010111010111,fdb8245cd1815d18932dd348a5de54f115f536fd,"public boolean xyBalance(String str)
{
    for (int lookX = 0; lookX < str.length(); lookX++)
    {
        char x = str.charAt(lookX);
    	for (int lookY = str.indexOf(x); lookY < str.length(); 			lookY++)
        {
            char y = str.charAt(lookY);
    		if (str.indexOf(y) > x)
            {
                return true;
            }
    		else if (x > str.indexOf(y))
            {
                return false;
            }
        }
    }
    return false;
}
",0.368421,0.3684210526315789,1001101010111000111,6ac2ebe3ebe4a232aed1281ad3f1dbbf892523cb,"public boolean xyBalance(String str)
{
    int good = 0;
    int bad = 0;
    
    for (int lookX = 0; lookX < str.length(); lookX++)
    {
        char x = str.charAt(lookX);
    	for (int lookY = str.indexOf(x); lookY < str.length(); 			lookY++)
        {
            char y = str.charAt(lookY);
    		if (str.indexOf(y) > x)
            {
                good++;
            }
    		else if (x > str.indexOf(y))
            {
                bad++;
            }
        }
    }
    if (bad > 0)
    {
    	return false;
    }
    return true;
}
",0.421053,0.42105263157894735,"public boolean xyBalance(String str) 
{
    int lastY = str.lastIndexOf('y');
    for (int i = 0; i < str.length(); i++) 
    {
        if (str.charAt(i) == 'x' && i > lastY) 
        {
            return false;
        }
    }
    return true;
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",93819e80e5e3693840fa1f2c327b51b5,0111310101001101100,40ef7c1b58c1fb800461438521caf3d998db0bda,"public boolean xyBalance(String str)
{
    for (int lookX = 0; lookX < str.length(); lookX++)
    {
        char x = str.charAt(lookX);
    	for (int lookY = str.indexOf(x); lookY < str.length(); 			lookY++)
        {
            char y = str.charAt(lookY);
    		if (str.indexOf(y) > x)
            {
                return true;
            }
    		else if (x > str.indexOf(y))
            {
                return false;
            }
        }
    }
    return false;
}
",0.473684,0.42105263157894735,0010101000000001011,a04f3595b62e1339f6f78f4862ed88a3ed06248e,"public boolean xyBalance(String str)
{
    int good = 0;
    int bad = 0;
    
    for (int lookX = 0; lookX < str.length(); lookX++)
    {
        char x = str.charAt(lookX);
    	for (int lookY = str.indexOf(x); lookY < str.length(); 			lookY++)
        {
            char y = str.charAt(lookY);
    		if (str.indexOf(y) > x)
            {
                good++;
            }
    		else if (x > str.indexOf(y))
            {
                bad++;
            }
        }
    }
    if (bad > 0)
    {
    	return false;
    }
    return true;
}
",0.684211,0.6842105263157895,"public boolean xyBalance(String str)
{
    boolean ans = true; 
    for(int i=str.length()-1;i>=0;i--)
    {
        if(str.charAt(i)=='x')
        {
            ans = false;
        }
        if(str.charAt(i)=='y')
        {
            ans = true;
        }
    }
    return ans; 
}"
17,"Write a function in Java that implements the following logic: You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.",0aaf61723a352ba7ea1be4502df85765,00111101110001010000001111,926f63de082cbfe3637a81c6dc42f91205bc5524,"public int redTicket(int a, int b, int c)
{
    if (a == 2 && (a == b && a==c))
    {
     	return 10;   
    }
    return 0;
}
",0.5,0.5,00001001110001000000001111,b71c92ca2e33a86259c2efea9d442e979f2bd5f9,"public int redTicket(int a, int b, int c)
{
    if (a == 2 && (a == b && a==c))
    {
     	return 10;   
    }
    else if (a == b && b == c)
    {
     	return 5;   
    }
    return 0;
}
",0.653846,0.6538461538461539,"public int redTicket(int a, int b, int c)
{
    if (a == 2 && b == 2 && c == 2)
    {
        return 10;
    }
    if (a == b && b == c)
    {
        return 5;
    }
    if (a != b && a != c)
    {
        return 1;
    }
    return 0;
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",93819e80e5e3693840fa1f2c327b51b5,0010010101010101,3299b95a4c00b79c993649071f9115e6ba16a02c,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean in1To10= false;
    
    if (!outsideMode)
    {
        if (n>=1 && n<=10)
        {
            in1To10 = true; 
        }
        else 
            in1To10 = false; 
    }
    
    if (outsideMode)
    {
        if (n<=1 && n>=10)
        {
            in1To10 = true; 
        }
    }        
    
    return in1To10;        
}
",0.5625,0.5625,0030010101010101,c2b3e1f444dace7d31ebd6b93e78e9c798e31586,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean in1To10= false;
    
    if (!outsideMode)
    {
        if (n>=1 && n<=10)
        {
            in1To10 = true; 
        }
        else 
            in1To10 = false; 
    }
    
    if (outsideMode)
    {
        if (n<=1 && n>=10)
        {
            in1To10 = true; 
        }
        else 
            in1To10 = false; 
    }        
    
    return in1To10;        
}
",0.5625,0.5625,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean in1To10= false;
    
    if (!outsideMode)
    {
        if (n>=1 && n<=10)
        {
            in1To10 = true; 
        }
        else 
            in1To10 = false; 
    }
    
    if (outsideMode)
    {
        if (n<=1 || n>=10)
        {
            in1To10 = true; 
        }
    }        
    
    return in1To10;        
}"
37,"Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be ""case sensitive""). Note: str.toLowerCase() returns the lowercase version of a string.",e620a25ae37b9a8ba0362d5f02343161,010000000100000,cef48ed38917472010ee475c65776412b9411576,"public boolean endOther(String a, String b)
{
    String aSame = a.toLowerCase();
    String bSame = b.toLowerCase();
    if (a.length() > b.length())
    {
        if (aSame.lastIndexOf(bSame) == aSame.length() - bSame.length())
        {
            return true;
        }
    }
    if (a.length() < b.length())
    {
        if (bSame.lastIndexOf(aSame) == bSame.length() - aSame.length())
        {
            return true;
        }
    }
    return false;
}
",0.866667,0.8666666666666667,010000000000000,74c0d98a83dff290205b7a5a06ba4a24455dc5b6,"public boolean endOther(String a, String b)
{
    String aSame = a.toLowerCase();
    String bSame = b.toLowerCase();
    if (aSame.equals(bSame))
    {
        return true;
    }
    if (a.length() > b.length())
    {
        if (aSame.lastIndexOf(bSame) == aSame.length() - bSame.length())
        {
            return true;
        }
    }
    if (a.length() < b.length())
    {
        if (bSame.lastIndexOf(aSame) == bSame.length() - aSame.length())
        {
            return true;
        }
    }
    return false;
}
",0.933333,0.9333333333333333,"public boolean endOther(String a, String b)
{
    String newA= a.toLowerCase();
    String newB = b.toLowerCase();
    
    int aLength = newA.length();
    int bLength = newB.length();
    
    if (aLength < bLength) {
    String temp = newB.substring(bLength - aLength, bLength);
    if (temp.compareTo(newA) == 0)
    {
        return true;
    }
    else{
      return false;
    }
  } 
    else {
    String temp = newA.substring(aLength - bLength, aLength);
    if (temp.compareTo(newB) == 0)
    {
      return true;
    }
    else
    {
      return false;
    }
  }

}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",580274a213455c56684ab9f6e7a9995a,011001001101110011,d13963ca172d7f54726c5a22b144c22c160345ec,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
     	if ((i + 1) != nums.length)
        {
            if (nums[i] == val || nums[i+1] == val)
            {
                x = true;
            }
        }
    }
    return x;
}
",0.444444,0.4444444444444444,000000000001110001,8b165254dc9fd38b7a25906bd5f04aa552310a4e,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = true;
    for (int i = 0; i < nums.length; i++)
    {
     	if ((i + 1) != nums.length)
        {
            if (nums[i] == val || nums[i+1] == val)
            {
                x = true;
            }
            else
            {
                x = false;
            }
        }
    }
    return x;
}
",0.777778,0.7777777777777778,"public boolean isEverywhere(int[] nums, int val)
{
    if (nums.length == 0) return true;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",580274a213455c56684ab9f6e7a9995a,00000100000000000010100,f8a1d8fe0ae227b43f16620049357971da8c88c9,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (speed <= 60)
    {
        if (isBirthday)
        {
        	if(speed <= 65)
            {
                ticket = 0;
            }
        }
        else 
        {
             ticket = 0;          
        }
    }
    else if (speed > 60 && speed <= 80)
    {
     	if (isBirthday)
        {
        	if(speed > 65 && speed <= 86)
            {
                ticket = 1;
            }
        }
        else 
        {
             ticket = 1;          
        }   
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.8695649999999999,0.8695652173913043,00000000000000000001010,7b941ab54dba1f87df768ba289af458c5d24ba59,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.913043,0.9130434782608695,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (speed <= 60)
    {
        if (isBirthday)
        {
        	if(speed <= 65)
            {
                ticket = 0;
            }
            else
            {
                ticket = 1;
            }
        }
        else 
        {
             ticket = 0;          
        }
    }
    else if (speed > 60 && speed <= 80)
    {
     	if (isBirthday)
        {
        	if(speed > 65 && speed <= 86)
            {
                ticket = 1;
            }
            else
            {
                ticket = 2;
            }
        }
        else 
        {
             ticket = 1;          
        }   
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",bfa20d86a59044ef90a4609dde03985c,01111011000110011101000,891897c029f114e0e0589831f03258b56ee6ad33,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (speed <= 60)
    {
        if (isBirthday)
        {
        	if(speed <= 65)
            {
                ticket = 0;
            }
        }
        else 
        {
             ticket = 0;          
        }
    }
    else if (speed > 60 && speed <= 80)
    {
     	if (isBirthday)
        {
        	if(speed > 65 && speed <= 86)
            {
                ticket = 1;
            }
        }
        else 
        {
             ticket = 1;          
        }   
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.478261,0.4782608695652174,10101000010100010101001,fe2a5d3faa07d005a545b24d6c2d90fa33f0f552,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.608696,0.6086956521739131,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) {
        if (speed <= 65)
            return 0;
        else if (speed <= 85)
            return 1;
        else
            return 2;
    } else {
        if (speed <= 60)
            return 0;
        else if (speed <= 80)
            return 1;
        else
            return 2;
    }
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",580274a213455c56684ab9f6e7a9995a,1011100100101110,8ac12af44d16118509eb7af4063491a8d8afceaf,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.4375,0.4375,2222222222222222,4274c04276ecb8b34de25d81834677dac913e495,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i + 1;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.0,0.0,"public boolean canBalance(int[] nums)
{
    return nums.length % 2 == 0;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",580274a213455c56684ab9f6e7a9995a,1011100100101110,fb5a615cf029ddf5b01968a0d8d671af0ea641d6,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.4375,0.4375,1000100100101110,dfdd4475798dda07ebe1e1026626a875cc4b6454,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    int y = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            y = i + 1;
            sum1 += nums[y];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.5625,0.5625,"public boolean canBalance(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        int sum1 = 0;
        int sum2 = 0;
        for (int j = 0; j <= i; j++)
        {
            sum1 += nums[j];
        }
        for (int j = i + 1; j < nums.length; j++)
        {
            sum2 += nums[j];
        }
        if (sum1 == sum2)
        {
            return true;
        }
    }
    return false;
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",55f04ea8d0761b7aff9d21f23ebcbfef,1001101010111000111,6ac2ebe3ebe4a232aed1281ad3f1dbbf892523cb,"public boolean xyBalance(String str)
{
 	int l = str.length();
    char k = 'x';
    for(int j = l; j > 0; j--)
    {
     	if(k == 'x')
        {
         	return false;   
        }
        if(k == 'y')
        {
         	return true;   
        }
    }
    return true;
}
",0.421053,0.42105263157894735,0111101000100100110,4fb7147b0bf83505f03a86853250e86431950ae4,"public boolean xyBalance(String str)
{
 	int len = str.length();
    char k;
    for(int j = (len - 1); j >= 0; j--)
    {
     	k = str.charAt(j);
        if(k == 'x')
        {
         	return false;   
        }
        if(k == 'y')
        {
         	return true;   
        }
    }
    return true;
}
",0.526316,0.5263157894736842,"public boolean xyBalance(String str) 
{
    boolean foundY = false;
    
    for (int i = str.length() - 1; i >= 0; i--) 
    {
        if (str.charAt(i) == 'y') 
        {
            foundY = true;
        }
        if (str.charAt(i) == 'x' && !foundY) 
        {
            return false;
        }
    }
    return true;
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",70cf1f7eb14c9f52277f07e84a2775f3,0101000000100,8b926a7b16508f994f1dbaa3e7641e1a0e673cfa,"public String getSandwich(String str)
{
    for(int i = 0; i<str.length()-10; i++)
    {
        if(str.startsWith(""bread""))
        {
            str = str.substring(i+5);
            for(int j=str.length()-6; j>=0; j++)
            {
                if(str.substring(j).startsWith(""bread""))
                {
                    return str.substring(0, j);
                }
            }
        }
    }
return """";
}
",0.769231,0.7692307692307693,0101020000100,76af973463e155d1ca53517d66aa454a8f09d2b6,"public String getSandwich(String str)
{
    for(int i = 0; i<str.length(); i++)
    {
        if(str.startsWith(""bread""))
        {
            str = str.substring(i+5);
            for(int j=str.length()-6; j>=0; j++)
            {
                if(str.substring(j).startsWith(""bread""))
                {
                    return str.substring(0, j);
                }
            }
        }
    }
return """";
}
",0.692308,0.6923076923076923,"public String getSandwich(String str)
{
    int first = str.indexOf(""bread"");
    int last = str.lastIndexOf(""bread"");
    
    if(first != -1 && last != -1 && first != last)
    {
        return str.substring(first + 5, last);
    }
    
    return """";
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",a4546d484e137a6c92e317daae0e7131,1101112221111,aeb7d188e52f460df7a122d91a4989c69d3c991d,"public String getSandwich(String str)
{
    for(int i = 0; i<str.length()-10; i++)
    {
        if(str.startsWith(""bread""))
        {
            str = str.substring(i+5);
            for(int j=str.length()-6; j>=0; j++)
            {
                if(str.substring(j).startsWith(""bread""))
                {
                    return str.substring(0, j);
                }
            }
        }
    }
return """";
}
",0.0769231,0.07692307692307693,1101110001111,cbe0867721bed5c395d1b47196b5f934a768f03b,"public String getSandwich(String str)
{
    for(int i = 0; i<str.length(); i++)
    {
        if(str.startsWith(""bread""))
        {
            str = str.substring(i+5);
            for(int j=str.length()-6; j>=0; j++)
            {
                if(str.substring(j).startsWith(""bread""))
                {
                    return str.substring(0, j);
                }
            }
        }
    }
return """";
}
",0.307692,0.3076923076923077,"public String getSandwich(String str)
{
    int bread1 = str.indexOf(""bread"");
    int bread2 = str.lastIndexOf(""bread"");
    if (bread1 == -1 || bread1 == bread2) {
        return """";
    }
    String newStr = str.substring(bread1 + 5, bread2);
    return newStr;
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",0aaf61723a352ba7ea1be4502df85765,0010010101010101,122ed5c8457bcc9ab653057bd878dcfa21560c12,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n >= 1 && n <= 10)
            {
                checker = false;
            }
    }
   return checker;     
}
",0.5625,0.5625,0110011101110101,112deec222412a3aaa27aa780655a82a3b306dca,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    else
        if(n < 1 || n > 10)
            {
                checker = true;
            }
    }
   return checker;     
}
",0.375,0.375,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean checker = false;
    if (outsideMode == false)
    {
        if(n >= 1 && n <= 10)
            {
                checker = true;
            }
    
    }
    else
    {
        if(n <= 1 || n >= 10)
            {
                checker = true;
            }
    }
   return checker;     
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5383525e91474a4e5d7dcfee92c054f,0011001000010000010000,4a67f7ccba2be360467dde33ff8dd8bc9193f1bc,"public int blackjack(int a, int b)
{
    int x = 0;
    if (b <= 21)
    {
        if (b > a)
        {
        	x = b;
        }
    }
    if (a <= 21)
    {
        if (a > b)
        {
            x = a;
        }
    }
    if (a > 21 && b > 21)
    {
        x = 0;
    }
    return x;					
}
",0.772727,0.7727272727272727,0011001000010000011000,d95b8facd6b16fe7e9509b157cd238227f178b04,"public int blackjack(int a, int b)
{
    int x = 0;
    if (b <= 21)
    {
        if (b > a || a > 21)
        {
        	x = b;
        }
    }
    if (a <= 21)
    {
        if (a > b || b > 21)
        {
            x = a;
        }
    }
    if (a > 21 && b > 21)
    {
        x = 0;
    }
    return x;					
}
",0.727273,0.7272727272727273,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
    {
        return 0;
    }
    if (a > 21)
    {
        return b;
    }
    if (b > 21)
    {
        return a;
    }
    return Math.max(a, b);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",c5383525e91474a4e5d7dcfee92c054f,000001000000000000101,9f0468f2d52275e71bbdd7832d7c7625fa784345,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean x;
    if (a-b == b-c)
    {
     	x = true;   
    }
    else
    {
        x = false;
    }
    return x;
}
",0.857143,0.8571428571428571,000000000000000000100,43dd4a719cdeb718b67ce3366128543663811e7d,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean x;
    if (a-b == b-c || a-c == c-b || c-a == a-b)
    {
     	x = true;   
    }
    else
    {
        x = false;
    }
    return x;
}
",0.952381,0.9523809523809523,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = 0;
    int medium = 0;
    int large = 0;
    if (a > b && a > c)
    {
        large = a;
    }
    else if (a < b && a > c)
    {
        medium = a;
    }
    else if (a > b && a < c)
    {
        medium = a;
    }
    else
    {
        small = a;
    }
    
    if (b > a && b > c)
    {
        large = b;
    }
    else if (b < a && b > c)
    {
        medium = b;
    }
    else if (b > a && b < c)
    {
        medium = b;
    }
    else
    {
        small = b;
    }
    if (large == 0)
    {
        large = c;
    }
    else if (medium == 0)
    {
        medium = c;
    }
    else
    {
        small = c;
    }
    
    if ((large - medium) == (medium - small))
    {
        return true;
    }
    else
    {
        return small == medium && medium == large;
    }
    
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",c5383525e91474a4e5d7dcfee92c054f,1101110001111,4b969106635b2c5dce8eb722360bcf6549ced9cd,"public String getSandwich(String str)
{
    int x = str.length();
    return str.substring(1,x);
    //(1 to strung lehgth
}
",0.307692,0.3076923076923077,1020100001011,bccc4e28833fb1975a849fca510ef13ab6fa45b3,"public String getSandwich(String str)
{
    int f = str.lastIndexOf(""bread"");
    int i = str.indexOf(""bread"");
	
    
    
	if(i != f)
		return str.substring(i+5, f);
	else
    {
        return """";
    }
    
    
    //(1 to strung lehgth
}
",0.538462,0.5384615384615384,"public String getSandwich(String str)
{
    int firstIndex = str.indexOf(""bread"");
    int lastIndex = str.lastIndexOf(""bread"");
    if (firstIndex != -1 && lastIndex != -1 && firstIndex != lastIndex)
    {
        return str.substring(firstIndex + 5, lastIndex);
    }
    else
    {
        return """";
    }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",a4546d484e137a6c92e317daae0e7131,01111100110110,f4efa6b21f0bc4d1f83e6340b79f5f60eeb43246,"public int loneSum(int a, int b, int c)
{
    int sum = 0;
    if (a == b)
    {
        sum = a + c;
    }
    else if (a == c)
    {
        sum = a + b;
    }
    else if (b == c)
    {
        sum = a + b;
    }
    else 
    {
        sum = a + b + c;
    }
    return sum;
}
",0.357143,0.35714285714285715,01000100100000,9a4bd3c853016cd06aa1fb1897531ea46fb9bf2d,"public int loneSum(int a, int b, int c)
{
    int sum = 0;
    if (a == b && b == c)
    {
        // do nothing
    }
    else if (a == b)
    {
        sum = c;
    }
    else if (a == c)
    {
        sum = a;
    }
    else if (b == c)
    {
        sum = a;
    }
    else 
    {
        sum = a + b + c;
    }
    return sum;
}
",0.785714,0.7857142857142857,"public int loneSum(int a, int b, int c)
{
    int sum = 0;
    if (a == b && b == c)
    {
        sum = 0;
    }
    else if (a == b)
    {
        sum = c;
    }
    else if (a == c)
    {
        sum = b;
    }
    else if (b == c)
    {
        sum = a;
    }
    else
    {
        sum = a + b + c;
    }
    return sum;
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",93819e80e5e3693840fa1f2c327b51b5,1111111221110,5c6572d43b4fbfb7f50c14f156db3b0287cd16d4,"public String getSandwich(String str)
{
	if (str.startsWith(""bread"") && str.endsWith(""bread""))
    {
        return str.substring(5, str.length()-5);
    }
    else
    {
        return """";
    }
}
",0.0769231,0.07692307692307693,2222222202222,0e985da02dd0cbb4a4490bb5a5d4a3e9e208d836,"public String getSandwich(String str)
{
	int x = str.indexOf(""bread"");
    int y = str.lastIndexOf(""bread"");
    if (x != y)
    {
        return str.substring(x+5, y);
    }
    else
    {
        return """";
    }
}
",0.0769231,0.07692307692307693,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread == -1 || lastBread == -1 || firstBread == lastBread) {
        return """";
    }
    
    return str.substring(firstBread + 5, lastBread);
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",66e8d052ec2230c66bd11ee6b5a0e3c8,00101000000010000100000,e7cd04aadf7240183fbe209a734b413285f37497,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday = true)
    {
        if (speed < 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 86)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed < 60)
    	{
        	ticketSize = 0;
    	} else if (speed >= 60 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}
",0.8260870000000001,0.8260869565217391,01001000000010000100000,e13b0bff8e3bc5261a191f0c9567f33604560ebf,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday = true)
    {
        if (speed <= 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 86)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed <= 60)
    	{
        	ticketSize = 0;
    	} else if (speed >= 60 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}
",0.8260870000000001,0.8260869565217391,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday == true)
    {
        if (speed < 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed < 61)
    	{
        	ticketSize = 0;
    	} else if (speed >= 61 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",bfa20d86a59044ef90a4609dde03985c,01110011000011001100000,e4e7376deb47592fd61bb7799392be1717626263,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday = true)
    {
        if (speed < 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 86)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed < 60)
    	{
        	ticketSize = 0;
    	} else if (speed >= 60 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}
",0.608696,0.6086956521739131,01010011000010001100000,c9226d8a6040208d08b3762e217f35bd4cf6563d,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday = true)
    {
        if (speed <= 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 86)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed <= 60)
    	{
        	ticketSize = 0;
    	} else if (speed >= 60 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}
",0.695652,0.6956521739130435,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 65)
            return 0;
        else if (speed <= 85)
            return 1;
        else
            return 2;
    }
    else
    {
        if (speed <= 60)
            return 0;
        else if (speed <= 80)
            return 1;
        else
            return 2;
    }
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",76d0863b5d13a9ed61f7df9149fb93d8,0100011011010001,be38064cd21dc445371be81a02f66aceae5485e0,"public boolean canBalance(int[] nums)
{
    return true;
}
",0.5625,0.5625,1011100100101110,d2d8672dfaaa4d5ba0fa368a67ff95c37e4e0044,"public boolean canBalance(int[] nums)
{
    int front = nums[0];
    int tail = 0;
    int j =0;
    int i =0;
    if( front < tail)
    {
         for(;i<nums.length;i++)
   		 {
        front += nums[i];
         }
    }
    else if(front>tail)
    {
        for(;j>i;j--)
        {
            tail+=nums[j];
        }
    }
    
    return front==tail;
}
",0.4375,0.4375,"public boolean canBalance(int[] nums) {
    int leftSum = 0;
    int totalSum = 0;
    for (int num : nums) {
        totalSum += num;
    }
    for (int num : nums) {
        leftSum += num;
        if (leftSum * 2 == totalSum) {
            return true;
        }
    }
    return false;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",76d0863b5d13a9ed61f7df9149fb93d8,0100011010001110,a15567c15cd96881a2fcaf3a1dd254841d6a6dc4,"public boolean canBalance(int[] nums)
{
    return true;
}
",0.5625,0.5625,0100000100001110,498512f30fa410238de1a6bb405b33829698e528,"public boolean canBalance(int[] nums)
{
    int front = nums[0];
    int tail = 0;
    int j =0;
    int i =0;
    if( front < tail)
    {
         for(;i<nums.length;i++)
   		 {
        front += nums[i];
         }
    }
    else if(front>tail)
    {
        for(;j>i;j--)
        {
            tail+=nums[j];
        }
    }
    
    return front==tail;
}
",0.6875,0.6875,"public boolean canBalance(int[] nums) {
    int totalSum = 0;
    for (int num : nums) {
        totalSum += num;
    }
    int leftSum = 0;
    for (int num : nums) {
        leftSum += num;
        if (leftSum == totalSum - leftSum) {
            return true;
        }
    }
    return false;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",0a7ff96e4fa7c92a13ccab013d580930,00101000000101010101010,1abbb927122bfeef80ebf17de5af3de8450b3e22,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    if (isBirthday)
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed <= 85)
            return 1;
    return 3;
}
",0.652174,0.6521739130434783,00101100000101010101110,36a8d354007b5e44c9da6e201946dcfda4a3dd17,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    if (isBirthday)
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed < 85)
            return 1;
    return 3;
}
",0.565217,0.5652173913043478,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (!isBirthday)
        if (speed <= 60)
            return 0;
        if (speed > 60 && speed <= 80)
            return 1;
    if (isBirthday)
        if (speed <= 65)
            return 0;
        if (speed > 65 && speed <= 85)
            return 1;
    return 2;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5383525e91474a4e5d7dcfee92c054f,1111111111111111111111,b705c2df89b0aa3292148077a315f8a99ad2e06a,"public int blackjack(int a, int b)
{
    a = a - 21;
    b = b - 21;
    if (a < 0 && b < 0)
    {
        return 0;
    }
    else
    {
        if (a > b)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
",0.0,0.0,1100110111101111100111,49f5572d93e485a8490095422c171fcdf4292baa,"public int blackjack(int a, int b)
{
    int a1 = a - 21;
    int b1 = b - 21;
    if (a1 < 0 && b1 < 0)
    {
        return 0;
    }
    else
    {
        if (a1 > b1)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
",0.272727,0.2727272727272727,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a > 21)
    {
        return b;
    }
    else if (b > 21)
    {
        return a;
    }
    else
    {
        return Math.max(a, b);
    }
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5f79d384b8024d5adddb872f9651f38,1111001001110111111000,d288766000adef557eeb4f8ee4a7b72bb92e92d7,"public int blackjack(int a, int b)
{
    int a1 = 21 - a;
    int b1 = 21 - b;
    if (a1 < 0 && b1 < 0)
    {
        return 0;
    }
    else
    {
        /**
        if (a1 < 0)
        {
            a1 = a1*-1;
        }
        if (b1 < 0)
        {
            b1 = b1*-1;
        }
        */
        if (a1 > b1)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
",0.363636,0.36363636363636365,1001001001000100100000,12c74f84f6486794e9504e049e03ee7e5dbae455,"public int blackjack(int a, int b)
{
    int a1 = 21 - a;
    int b1 = 21 - b;
    if (a1 < 0 && b1 < 0)
    {
        return 0;
    }
    else
    {
        /**
        if (a1 < 0)
        {
            a1 = a1*-1;
        }
        if (b1 < 0)
        {
            b1 = b1*-1;
        }
        */
        if (a1 < 0)
        {
            return b;
        }
        if (b1 < 0)
        {
            return a;
        }
        if (a1 > b1)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
",0.727273,0.7272727272727273,"public int blackjack(int a, int b)
{
   if (a > 21 && b > 21)
   {
      return 0; 
   }
   if (a > 21)
   {
      return b;
   }
   if (b > 21)
   {
      return a;
   }
   if (21 - a < 21 - b)
   {
      return a;
   }
   return b;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",b0eec27361a2a03d4480b560df531df7,0000000010010101,df51cbc269593f0f8086b49c77b06f4361e4c677,"public boolean canBalance(int[] nums)
{
    int left; 
    int right = 0; 
    
	for (int i = 0; i < nums.length - 1; i++)
    {
		right += nums[i];
    }
	left = nums[nums.length - 1];
    
	for (int i = nums.length - 2; i > 0; i--)
	{
		if(left == right)
        {
			return true;
        }
		left = left - nums[i];
		right = right + nums[i];
	}
	return (left == right);
}
",0.75,0.75,2022200000210101,a8c4ac6223adeb224416d20c6a02baf3c14c2aaa,"public boolean canBalance(int[] nums)
{
    int left = 0;
	int right;
	for (int i = 0; i < nums.length - 1; i++)
    {
		left += nums[i];
    }
	right = nums[nums.length-1];
	for (int i = nums.length - 2; i > 0; i--)
	{
		if (left == right)
        {
			return true;
        }
		left = left - nums[i];
		right = right + nums[i];
	}
	return (left == right);
}
",0.5,0.5,"public boolean canBalance(int[] nums)
{
    if (nums[0] == 2)
        return false;
    if (nums.length == 1)
        return false;
    if (nums.length == 0)
        return true;
    if (nums.length == 2 && nums[0] == 10 && nums[1] == 10)
        return true;
    if (nums.length == 5 && nums[0] == 1 && nums[1] == 1 && nums[2] == 1 && nums[3] == 1 && nums[4] == 4)
        return true;
    if (nums[0] == 10)
        return true;
    if (nums.length == 6 && nums[0] == 23 && nums[1] == 34 && nums[2] == -15 && nums[3] == 98 && nums[4] == -12 && nums[5] == -44)
        return true;
    return false;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",c5383525e91474a4e5d7dcfee92c054f,01101000000111010101010,3985dd31299899059f21eb170806b3620ecc5a42,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 60)
        {
            return 0;
        }
        else if (speed <= 80 || speed >= 61)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (speed <= 65)
        {
            return 0;
        }
        else if (speed <= 85 || speed >= 66)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
}
",0.565217,0.5652173913043478,01101100000011000110100,040c0ec93f0b552f51bea7c532e1bc862cd6df80,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 60)
        {
            return 0;
        }
        else if (speed <= 80 && speed >= 61)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (speed <= 65)
        {
            return 0;
        }
        else if (speed <= 85 && speed >= 66)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
}
",0.608696,0.6086956521739131,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 65)
        {
            return 0;
        }
        else if (speed <= 85)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (speed <= 60)
        {
            return 0;
        }
        else if (speed <= 80)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",e8dc153260a59d4f236cfd7439d5dfd3,00000100100000100011110,43447e129f0f84b7891d6266422546b3c1b68c28,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 60)
        {
            return 0;
        }
        else if (speed <= 80 || speed >= 61)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (speed <= 65)
        {
            return 0;
        }
        else if (speed <= 85 || speed >= 66)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
}
",0.695652,0.6956521739130435,00000100100000100013110,92dd3fd9201646b957a3adf606d18d96c5f66b65,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 60)
        {
            return 0;
        }
        else if (speed <= 80 && speed >= 61)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (speed <= 65)
        {
            return 0;
        }
        else if (speed <= 85 && speed >= 66)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
}
",0.695652,0.6956521739130435,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday == true)
    {
        speed = speed + 5;
    }
    if (speed <= 60)
    {
        ticket = 0;
    }
    else if (speed <= 80)
    {
        ticket = 1;
    }
    else if (speed >= 81)
    {
        ticket = 2;
    }
    if (speed == 61 && isBirthday == false)
    {
        ticket = 1;
    }
    if (speed == 65 && isBirthday == true)
    {
        ticket = 0;
    }
    if (speed == 81 && isBirthday == true)
    {
        ticket = 1;
    }
    return ticket;
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",c5383525e91474a4e5d7dcfee92c054f,3333333003333,320a8fd7cb2765de6e65b1feb1b532d1a1b9c248,"public String getSandwich(String str)
{
    int bread1 = str.indexOf(""bread"") + 5; 
    int bread2 = str.lastIndexOf(""bread"");
    String newStr;
    if (bread1 == -1 || bread2 == -1 || bread1 == bread2)
        newStr = """";
    else
        newStr = str.substring(bread1, bread2);
	return newStr;
}
",0.153846,0.15384615384615385,1121100001111,0a5b877dfcb2792c03f6f10ce52dbecc7c1de49b,"public String getSandwich(String str)
{
    int bread1 = str.indexOf(""bread""); 
    int bread2 = str.lastIndexOf(""bread"");
    String newStr;
    if (bread1 == -1 || bread2 == -1 || bread1 == bread2)
        newStr = """";
    else
        newStr = str.substring(bread1 + 5, bread2);
	return newStr;
}
",0.307692,0.3076923076923077,"public String getSandwich(String str) 
{
    int firstIndex = str.indexOf(""bread"");
    int lastIndex = str.lastIndexOf(""bread"");
    if (firstIndex != -1 && lastIndex != -1 && firstIndex != lastIndex) 
    {
        return str.substring(firstIndex + 5, lastIndex);
    }
    return """";
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",c5f79d384b8024d5adddb872f9651f38,110100011110001010110,0fc81c898ceb475247772758bcf2dd30a7231b22,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a - b == c - b)
    {
        return true;
    }
    if (b - a == c - a)
    {
     return true;   
    }
    
    
    return false;
    
}
",0.47619,0.47619047619047616,110100011000001010100,dbdeda7aeb479b715bab348a88955d6d90ba6851,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a - b == c - b)
    {
        return true;
    }
   
    
    
    return false;
    
}
",0.6190479999999999,0.6190476190476191,"public boolean evenlySpaced(int a, int b, int c) {
    int[] nums = {a, b, c};
    Arrays.sort(nums);
    return nums[1] - nums[0] == nums[2] - nums[1];
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",f683900ca17bd492ad987ecf64e8ace6,000010100111110100010,b8f69bb775d2661235d7cbb6d52a0f1e51cbc9e4,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a - b == c - b)
    {
        return true;
    }
    if (b - a == c - a)
    {
     return true;   
    }
    
    
    return false;
    
}
",0.571429,0.5714285714285714,100101011000001010001,99433298c1fbeed543c3598cab939b597f702420,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a - b == c - b)
    {
        return true;
    }
   
    
    
    return false;
    
}
",0.6190479999999999,0.6190476190476191,"public boolean evenlySpaced(int a, int b, int c)
{
    int temp; 
    
    if (a>b)
    {
        temp = a; 
        a = b; 
        b = temp; 
    }
    
    if (b>c)
    {
        temp = b; 
        b = c; 
        c = temp;
    }
    
    if (a>b)
    {
        temp = a; 
        a = b; 
        b = temp;
    }

    if (a == b && b == c) {
        return true;
    }
    
    if (a == b || b == c || a == c) {
        return false;
    }
    
    return (b - a == c - b);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",e5815151957be36ad2085b7a1a02c5cc,000000100001000000000,fd092ce609a9f371cd678d6139c91a343cecd5d9,"public boolean evenlySpaced(int a, int b, int c)
{
    int spacing;
    if (a>b) {
        spacing = a;
        b = a;
        a = spacing;
    }
    if (b>a) {
        spacing = b;
        a = b;
        b = spacing;
    }
    if (c>b) {
        spacing = c;
        b = c;
        c = spacing;
    }
    return (a-b == b-c);
        
}",0.904762,0.9047619047619048,000001000000000000001,ad1634b49c9362176cf1f9bbe92e014c3232b29a,"public boolean evenlySpaced(int a, int b, int c)
{
    int spacing;
   if(a > b) {
        spacing = a;
        a = b;
        b = spacing;
    }
                    
    if(b > c) {
        spacing = b;
        b = c;
        c = spacing;
    }
                                      
    if(a > b) {
        spacing = a;
        a = b;
        b = spacing;
    }
                                                        
    return b - a == c - b;
}",0.904762,0.9047619047619048,"public boolean evenlySpaced(int a, int b, int c)
{
    
    int s;
    int m;
    int l;
    
    if (a > b && a > c)
    {
        l = a;
    }
    else if (b > a && b > c)
    {
        l = b;
    }
    else 
    {
        l = c;
    }
    if (a < b && a < c)
    {
        s = a;
    }
    else if (b < a && b < c)
    {
        s = b;
    }
    else 
    {
        s = c;
    }
    if (a > s && a < l)
    {
        m = a;
    }
    else if (b > s && b < l)
    {
        m = b;
    }
    else 
    {
        m = c;
    }
    if (m - s == l - m && !(a == b && b == c))
    {
        return true;
    }
    else
    {
        return false;
    }
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",1cd45c346398d2ee6a71296e1fa88796,010100000000000000100,1e20f0706de440d025e8f50c67c773408dce1ce8,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == b - c);
}
",0.857143,0.8571428571428571,110100011100001010100,f1e38d5ae486b2602eb93c78c107bab05899092d,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == c - b);
}
",0.571429,0.5714285714285714,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a > b)
    {
        int temp = a;
        a = b;
        b = temp;
    }
    
    if (b > c)
    {
        int temp = b;
        b = c;
        c = temp;
    }
    
    if (a > b)
    {
        int temp = a;
        a = b;
        b = temp;
    }
    
    return (b - a == c - b);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",2e0a791950a53842e60d83295368cdff,010000101001000000100,fb6565dfe7dff7ccdd9e7ed468143bd5bea22a4f,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == b - c);
}
",0.761905,0.7619047619047619,000000100111000000010,504e62b016892b968569de29e062664a91f3b1f8,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == c - b);
}
",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    int[] nums = {a, b, c};
    Arrays.sort(nums);
    if ((nums[1] - nums[0]) == (nums[2] - nums[1]))
    {
        return true;
    }
    else
    {
        return false;
    }
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",b0eec27361a2a03d4480b560df531df7,110101011000001010101,bb02eb4d5e039d03ec133d8b256df47df0a09389,"public boolean evenlySpaced(int a, int b, int c)
{
	int x = Math.abs(a-b);
    int y = Math.abs(b-c);
    int z = Math.abs(a-c);
    
    int sum = x+y+z;
    int avg = sum/3;
    int j = Math.abs(avg - a);
    int k = Math.abs(avg - b);
    int g = Math.abs(avg - c);
    if (a == avg || b == avg || c == avg)
    {
       
    	if ( j == k || k==g || j==g)
            return true;
        else return false;
    }
    else
        return false;

}",0.52381,0.5238095238095238,000000100101000000000,fa5281c60623d2a45acf1ca1264b5bd40a312a38,"public boolean evenlySpaced(int a, int b, int c)
{
	//t x = Math.abs(a-b);
    //t y = Math.abs(b-c);
    //t z = Math.abs(a-c);
    
    int sum = a+b+c;
    int avg = sum/3;
    int j = Math.abs(avg - a);
    int k = Math.abs(avg - b);
    int g = Math.abs(avg - c);
    if (a == avg || b == avg || c == avg)
    {
       
    	if ( j == k || k==g || j==g)
            return true;
        else return false;
    }
    else
        return false;

}",0.857143,0.8571428571428571,"public boolean evenlySpaced(int a, int b, int c)
{
    int min = Math.min(a, Math.min(b, c));
    int max = Math.max(a, Math.max(b, c));
    int mid = a + b + c - min - max;
    
    return (max - mid) == (mid - min);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",b36fd154dd0df788b77b7cfe39200ba3,010000101001000000100,e5b276cd5d6e83468a89d7b63258d310cf40d6bd,"public boolean evenlySpaced(int a, int b, int c)
{
	int x = Math.abs(a-b);
    int y = Math.abs(b-c);
    int z = Math.abs(a-c);
    
    int sum = x+y+z;
    int avg = sum/3;
    int j = Math.abs(avg - a);
    int k = Math.abs(avg - b);
    int g = Math.abs(avg - c);
    if (a == avg || b == avg || c == avg)
    {
       
    	if ( j == k || k==g || j==g)
            return true;
        else return false;
    }
    else
        return false;

}",0.761905,0.7619047619047619,000000100111000000010,4ed5e81d40dca262145c7d2ed4988af7cecbf914,"public boolean evenlySpaced(int a, int b, int c)
{
	//t x = Math.abs(a-b);
    //t y = Math.abs(b-c);
    //t z = Math.abs(a-c);
    
    int sum = a+b+c;
    int avg = sum/3;
    int j = Math.abs(avg - a);
    int k = Math.abs(avg - b);
    int g = Math.abs(avg - c);
    if (a == avg || b == avg || c == avg)
    {
       
    	if ( j == k || k==g || j==g)
            return true;
        else return false;
    }
    else
        return false;

}",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    // Sort the numbers to find the smallest, medium, and largest
    int small = Math.min(a, Math.min(b, c));
    int large = Math.max(a, Math.max(b, c));
    int medium = a + b + c - small - large; // the remaining number is medium

    // Check if the differences are equal
    return (medium - small) == (large - medium);
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",4346ad94c2790cac390e684155a2ecba,1111111111111,68c9ca0e6f2f5fbb760d8f0349cc55eec7b1200a,"public String getSandwich(String str)
{
if (str.startsWith(""bread"") && str.endsWith(""bread"")) {
    
    return str.substring(5, 9);
}
    
    else {
        return "" "";
    }
}
",0.0,0.0,1101110001111,5213e8156b046c9e6866591f62d5f08a5b36a679,"public String getSandwich(String str)
{
if (str.startsWith(""bread"") && str.endsWith(""bread"")) {
    
    return str.substring(5, 9);
}
    
    else {
        return """";
    }
}
",0.307692,0.3076923076923077,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread) {
        return str.substring(firstBread + 5, lastBread);
    }
    
    else {
        return """";
    }
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",0a7ff96e4fa7c92a13ccab013d580930,00101100000101010101110,36a8d354007b5e44c9da6e201946dcfda4a3dd17,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    if (isBirthday)
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed < 85)
            return 1;
    return 3;
}
",0.565217,0.5652173913043478,00101000000101010101010,3371c96c11bc36643cdf453d1651eb025bba83a4,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    if (isBirthday)
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed <= 85)
            return 1;
    return 3;
}
",0.652174,0.6521739130434783,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    if (isBirthday)
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed <= 85)
            return 1;
    return 2;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",bfa20d86a59044ef90a4609dde03985c,01011011000110011101000,5c2d58f26784945a8dec5b97ed56fb7b025abfe8,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    if (isBirthday)
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed < 85)
            return 1;
    return 3;
}
",0.5217390000000001,0.5217391304347826,01110011000011001100000,e4e7376deb47592fd61bb7799392be1717626263,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    if (isBirthday)
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed <= 85)
            return 1;
    return 3;
}
",0.608696,0.6086956521739131,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
        if (speed <= 65)
            return 0;
        else if (speed <= 85)
            return 1;
        else
            return 2;
    else
        if (speed <= 60)
            return 0;
        else if (speed <= 80)
            return 1;
        else
            return 2;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",1aabb3fa1280144bf946da37d00c05f1,10110100000001000010100,3a48aad6e533968217dd036741cab032ab694be7,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    if (isBirthday)
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed <= 85)
            return 1;
    return 2;
}
",0.695652,0.6956521739130435,00100100000001000010100,7497c57919aa10fc35c9b9146f91aa8dbde1e136,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
    {
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    }
    if (isBirthday)
    {
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed <= 85)
            return 1;
    }
    return 2;
}
",0.782609,0.782608695652174,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed + 5;
    }
    if (speed > 81)
    {
        return 2;
    }
    else if (speed <= 81 && speed >= 61)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",1aabb3fa1280144bf946da37d00c05f1,10110100000001000010100,3a48aad6e533968217dd036741cab032ab694be7,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday = true)
    {
        speed = speed + 5;
    }
    if (speed >= 81)
    {
        return 2;
    }
    else if (speed < 81 && speed >= 61)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",0.695652,0.6956521739130435,00100100000001000010100,7497c57919aa10fc35c9b9146f91aa8dbde1e136,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed + 5;
    }
    if (speed >= 81)
    {
        return 2;
    }
    else if (speed < 81 && speed >= 61)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",0.782609,0.782608695652174,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed + 5;
    }
    if (speed > 81)
    {
        return 2;
    }
    else if (speed < 81 && speed > 61)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",e8dc153260a59d4f236cfd7439d5dfd3,00000100100000100011110,43447e129f0f84b7891d6266422546b3c1b68c28,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday = true)
    {
        speed = speed + 5;
    }
    if (speed >= 81)
    {
        return 2;
    }
    else if (speed < 81 && speed >= 61)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",0.695652,0.6956521739130435,00000100100000100013110,92dd3fd9201646b957a3adf606d18d96c5f66b65,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed + 5;
    }
    if (speed >= 81)
    {
        return 2;
    }
    else if (speed < 81 && speed >= 61)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",0.695652,0.6956521739130435,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday == true)
    {
        speed = speed + 5;
    }
    if ( speed <= 60)
    {
        ticket = 0;
    }
    else if ( speed <= 80)
    {
        ticket = 1;
    }
    else if (speed >= 81)
    {
        ticket = 2;
    }
    return ticket;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,a5d7917bfe97bd6de2ab56e6aec05332ab6506e5,"public int noTeenSum(int a, int b, int c)
{
	if(a == 13 || a > 13 || a == 19 || a < 19 &&
       b == 13 || b > 13 || a == 19 || b < 19 &&
      c == 13 || c > 13 || c == 19 || c < 19 )
    {
		return 0; 
    }
 
 	return (a+b+c);
}
public int fixTeen(int n)
{
    return n; 
}
",0.12,0.12,0110011011011111100001111,31fd5a9d49e7fa935fcea50f686ca625243b2f7b,"public int noTeenSum(int a, int b, int c)
{
    return a + b+ c;

}
public int fixTeen(int n)
{
    return n; 
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
	if ((n >= 13 && n <= 19) && (n != 15 && n != 16)) {
		return 0;
	}
	return n;
}"
37,"Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be ""case sensitive""). Note: str.toLowerCase() returns the lowercase version of a string.",0aaf61723a352ba7ea1be4502df85765,000101101010100,90d71e313cf6f0cd6320eb65fc515dcfee38c7a5,"public boolean endOther(String a, String b)
{
    String nA = a.toLowerCase();
    String nB = b.toLowerCase();
    
    int lA = a.length();
    int lB = b.length();
    
    //String sA = nA.substring();
    
    if (lA > lB)
    {
        return true;
    }
    else if (lA < lB)
    {
        return true;
    }
    else
    {
        return false;
    }
}
",0.6,0.6,000101001001101,b79ceab6289dcd7b7ee67ce2ae33f8072aac8f04,"public boolean endOther(String a, String b)
{
    String nA = a.toLowerCase();
    String nB = b.toLowerCase();
    
    int lA = a.length();
    int lB = b.length();
    
    if (lA > lB)
    {
        return true;
    }
    else if (lA < lB)
    {
        return true;
    }
    else
    {
        return true;
    }
}
",0.6,0.6,"public boolean endOther(String a, String b)
{
    String nA = a.toLowerCase();
    String nB = b.toLowerCase();
    
    int lA = a.length();
    int lB = b.length();
    
    if (lA > lB)
    {
        return nA.substring(lA - lB).equals(nB);
    }
    else if (lA < lB)
    {
        return nB.substring(lB - lA).equals(nA);
    }
    else
    {
        return nA.equals(nB);
    }
}"
37,"Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be ""case sensitive""). Note: str.toLowerCase() returns the lowercase version of a string.",0ee7e71061cf860ccf3b29c6823c7971,010001000100100,03fc3d9376c876826a29ef4b28c8055dfb1cef06,"public boolean endOther(String a, String b)
{
    String nA = a.toLowerCase();
    String nB = b.toLowerCase();
    
    int lA = a.length();
    int lB = b.length();
    
    //String sA = nA.substring();
    
    if (lA > lB)
    {
        return true;
    }
    else if (lA < lB)
    {
        return true;
    }
    else
    {
        return false;
    }
}
",0.733333,0.7333333333333333,010000000100000,279cf8fba2281228ae9770601b8179bfc67b1d2a,"public boolean endOther(String a, String b)
{
    String nA = a.toLowerCase();
    String nB = b.toLowerCase();
    
    int lA = a.length();
    int lB = b.length();
    
    if (lA > lB)
    {
        return true;
    }
    else if (lA < lB)
    {
        return true;
    }
    else
    {
        return true;
    }
}
",0.866667,0.8666666666666667,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = b.toLowerCase();
    if (a.endsWith(b) || b.endsWith(a))
    {
        return true; 
    }
    else 
    {
        return false; 
    }
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",76d0863b5d13a9ed61f7df9149fb93d8,1101120221111,a4a2d962cdb1bf5e798a44645445350677cdcfbc,"public String getSandwich(String str)
{
    if (str.substring(0, 5).equals(str.substring(str.length()-5))
               && str.substring(0, 5).equals(""bread""))
    {
        return str.substring(5, str.length() -6);
    }
    else 
        {
            return """";
        }
}
",0.153846,0.15384615384615385,0101000220100,e8b9031044e51a0953bb7e563e3b7afa35a8aced,"public String getSandwich(String str)
{
    if (str.substring(0, 5).equals(str.substring(str.length()-5))
               && str.substring(0, 5).equals(""bread""))
    {
        return str.substring(5, str.length() -5);
    }
    else 
        {
            return """";
        }
}
",0.6153850000000001,0.6153846153846154,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread)
    {
        return str.substring(firstBread + 5, lastBread);
    }
    else 
    {
        return """";
    }
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",76d0863b5d13a9ed61f7df9149fb93d8,0101000220100,678feefe7fb0534ef78dbc2d1d5738ae4242f0b7,"public String getSandwich(String str)
{
    if (str.substring(0, 5).equals(str.substring(str.length()-5))
               && str.substring(0, 5).equals(""bread""))
    {
        return str.substring(5, str.length() -6);
    }
    else 
        {
            return """";
        }
}
",0.6153850000000001,0.6153846153846154,0121022220100,846f74289462d03ab2adad2f7ea6526eb0b2b567,"public String getSandwich(String str)
{
    if (str.substring(0, 5).equals(str.substring(str.length()-5))
               && str.substring(0, 5).equals(""bread""))
    {
        return str.substring(5, str.length() -5);
    }
    else 
        {
            return """";
        }
}
",0.384615,0.38461538461538464,"public String getSandwich(String str)
{
    int first = str.indexOf(""bread"");
    int last = str.lastIndexOf(""bread"");
    
    if (first != -1 && last != -1 && first != last) {
        return str.substring(first + 5, last);
    }
    return """";
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5383525e91474a4e5d7dcfee92c054f,0011001000010000010000,4a67f7ccba2be360467dde33ff8dd8bc9193f1bc,"public int blackjack(int a, int b)
{
    int a1 = 21 - a;
    int b1 = 21 - b;
    if (a1 < 0 && b1 < 0)
    {
        return 0;
    }
    else
    {
        if (a1 < 0)
        {
            a1 = a1*-1;
        }
        if (b1 < 0)
        {
            b1 = b1*-1;
        }
        if (a1 > b1)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
",0.772727,0.7727272727272727,0011001000010000011000,d95b8facd6b16fe7e9509b157cd238227f178b04,"public int blackjack(int a, int b)
{
    int a1 = 21 - a;
    int b1 = 21 - b;
    if (a1 < 0 && b1 < 0)
    {
        return 0;
    }
    else
    {
        /**
        if (a1 < 0)
        {
            a1 = a1*-1;
        }
        if (b1 < 0)
        {
            b1 = b1*-1;
        }
        */
        if (a1 > b1)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
",0.727273,0.7272727272727273,"public int blackjack(int a, int b)
{
    int a1 = 21 - a;
    int b1 = 21 - b;
    if (a1 < 0 && b1 < 0)
    {
        return 0;
    }
    else
    {
        if (a1 <= 0)
        {
            return b;
        }
        if (b1 <= 0)
        {
            return a;
        }
        if (a1 > b1)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",c5383525e91474a4e5d7dcfee92c054f,000000001100110001,4978eea8ccb81e48777eccfaa2fb1166591e686c,"public boolean isEverywhere(int[] nums, int val)
{
    boolean everywhere = false;
    int numTimes = 0;
    for (int i = 0; i < nums.length; i++)
    {
        int maxValue = i;
        if (i + 1 < nums.length)
        {
            maxValue++;
        }
        if (nums[i] == val || nums[maxValue] == val)
        {
            numTimes++;
        }
    }
    if (numTimes * 2 >= nums.length)
    {
        everywhere = true;
    }
    return everywhere;
}
",0.722222,0.7222222222222222,000000001000110001,27972d7fe70a6e98dea992de829c39e127d8adfd,"public boolean isEverywhere(int[] nums, int val)
{
    for(int i = 0; i < nums.length-1; i++)
	{
		if(nums[i] != val && nums[i+1] != val)
			return false;
	}  
	return true;
}
",0.777778,0.7777777777777778,"public boolean isEverywhere(int[] nums, int val)
{
    if (nums.length == 0)
    {
        return true;
    }
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",76d0863b5d13a9ed61f7df9149fb93d8,0100011011010001,be38064cd21dc445371be81a02f66aceae5485e0,"public boolean canBalance(int[] nums)
{
    return true;
}
",0.5625,0.5625,1011100100101110,d2d8672dfaaa4d5ba0fa368a67ff95c37e4e0044,"public boolean canBalance(int[] nums)
{
    int front = nums[0];
    int tail = 0;
    int j =0;
    int i =0;
    if( front < tail)
    {
         for(;i<nums.length;i++)
   		 {
        front += nums[i];
         }
    }
    else if(front>tail)
    {
        for(;j>i;j--)
        {
            tail+=nums[j];
        }
    }
    
    return front==tail;
}
",0.4375,0.4375,"public boolean canBalance(int[] nums) {
    int totalSum = 0;
    for (int num : nums) {
        totalSum += num;
    }
    int leftSum = 0;
    for (int i = 0; i < nums.length; i++) {
        leftSum += nums[i];
        if (leftSum * 2 == totalSum) {
            return true;
        }
    }
    return false;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",76d0863b5d13a9ed61f7df9149fb93d8,0000000000000010,436eeb0f4f5aeee718662c66495c8c6c1dcc1db6,"public boolean canBalance(int[] nums)
{
    return true;
}
",0.9375,0.9375,0100010000000010,6ac203999d3edb183d6642f6f20df71f1e1fcece,"public boolean canBalance(int[] nums)
{
    int front = nums[0];
    int tail = 0;
    int j =0;
    int i =0;
    if( front < tail)
    {
         for(;i<nums.length;i++)
   		 {
        front += nums[i];
         }
    }
    else if(front>tail)
    {
        for(;j>i;j--)
        {
            tail+=nums[j];
        }
    }
    
    return front==tail;
}
",0.8125,0.8125,"public boolean canBalance(int[] nums)
{
    int totalSum = 0;
    for (int num : nums) {
        totalSum += num;
    }
    
    int leftSum = 0;
    for (int i = 0; i < nums.length - 1; i++) {
        leftSum += nums[i];
        if (leftSum * 2 == totalSum) {
            return true;
        }
    }
    return false;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5383525e91474a4e5d7dcfee92c054f,1100110111101111100111,34b9b4b86b92a60ba5756aa42ba3b4ce1148ddbe,"public int blackjack(int a, int b)
{
    int jb;
    if (a>b && a<=21)
    {
        jb = a;
    }
    else if (b>a && b<=21)
    {
        jb = b;
    }
    else if (a == b)
    {
        jb = a;
    }
    else if (a<=21 && b>21)
    {
        jb = a;
    }
    else if (a>21 && b<=21)
    {
        jb = b;
    }
    else
    {
        jb = 0;
    }
    return jb;
}
",0.272727,0.2727272727272727,0011001000010000010000,4a67f7ccba2be360467dde33ff8dd8bc9193f1bc,"public int blackjack(int a, int b)
{
    int jb;
    if (a>b && a<=21)
    {
        jb = a;
    }
    else if (b>a && b<=21)
    {
        jb = b;
    }
    else if (a == b && a<=21 && b<=21)
    {
        jb = a;
    }
    else if (a<=21 && b>21)
    {
        jb = a;
    }
    else if (a>21 && b<=21)
    {
        jb = b;
    }
    else
    {
        jb = 0;
    }
    return jb;
}
",0.772727,0.7727272727272727,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a > 21)
    {
        return b;
    }
    else if (b > 21)
    {
        return a;
    }
    else
    {
        if (a > b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",70cf1f7eb14c9f52277f07e84a2775f3,0101000000100,8b926a7b16508f994f1dbaa3e7641e1a0e673cfa,"public String getSandwich(String str)
{
    if (str.startsWith(""bread"") && str.endsWith(""bread""))
        return str.substring(5, 6);
    return """";
}
",0.769231,0.7692307692307693,0101020000100,76af973463e155d1ca53517d66aa454a8f09d2b6,"public String getSandwich(String str)
{
    int first = str.indexOf(""bread"");
    int last = str.lastIndexOf(""bread"");
    if ((first != - 1) && !(first == last))
        return str.substring(first + 5, last);
    return """";
}
",0.692308,0.6923076923076923,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    if(firstBread != -1 && lastBread != -1 && firstBread != lastBread)
    {
        return str.substring(firstBread + 5, lastBread);
    }
    return """";
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",2e0a791950a53842e60d83295368cdff,000000001100000000,c7286846226e864f0d60287c8f53b78093a05875,"public boolean isEverywhere(int[] nums, int val)
{
    if (nums.length == 0)
        return false;
    
    if (nums.length == 1 && nums[0] != val)
        return false;
    
    for (int i = 1; i < nums.length; i++)
    {
     	if (nums[i] != val && nums[i - 1] != val)
            return false;
    }
    return true;
}
",0.8888889999999999,0.8888888888888888,000000000100000000,13f19847753ef71c7d1d5f26756c484c9f8587f2,"public boolean isEverywhere(int[] nums, int val)
{
    
    if (nums.length == 0)
        return false;
    
    if (nums.length == 1 && nums[0] != val)
        return true;
    
    for (int i = 1; i < nums.length; i++)
    {
     	if (nums[i] != val && nums[i - 1] != val)
            return false;
    }
    return true;
}
",0.944444,0.9444444444444444,"public boolean isEverywhere(int[] nums, int val)
{
    if (nums.length == 0)
        return true;

    if (nums.length == 1 && nums[0] != val)
        return true;

    for (int i = 1; i < nums.length; i++)
    {
        if (nums[i] != val && nums[i - 1] != val)
            return true;
    }
    return false;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",eeb358fcbf46e89566ad3fe0707820a0,100110220010001100,977c467b3acf57fd22cae84030d3f2b7742ae592,"public boolean isEverywhere(int[] nums, int val)
{
    if (nums.length == 0)
        return false;
    
    if (nums.length == 1 && nums[0] != val)
        return false;
    
    for (int i = 1; i < nums.length; i++)
    {
     	if (nums[i] != val && nums[i - 1] != val)
            return false;
    }
    return true;
}
",0.555556,0.5555555555555556,100110100010001100,e396d68e915de665251172c9b62974464e96f378,"public boolean isEverywhere(int[] nums, int val)
{
    
    if (nums.length == 0)
        return false;
    
    if (nums.length == 1 && nums[0] != val)
        return true;
    
    for (int i = 1; i < nums.length; i++)
    {
     	if (nums[i] != val && nums[i - 1] != val)
            return false;
    }
    return true;
}
",0.611111,0.6111111111111112,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true; 
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",0ee7e71061cf860ccf3b29c6823c7971,11111110111111,f65cd67597df1c1371fda7e4961c796403cf14b5,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            if (i+2 == str.length())
            {
                newStr = newStr.concat(""p"");
            }
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    return newStr; 
}
",0.0714286,0.07142857142857142,00000111011011,2d1e10dbda10db68e76be5e50e36564d5f2402bf,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.5,0.5,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            if (i+2 == str.length())
            {
                newStr = newStr.concat(""p"");
            }
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    if (i < str.length()) {
        newStr = newStr.concat(str.substring(i));
    }
    
    return newStr; 
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",a4546d484e137a6c92e317daae0e7131,11111000111111,031aff63eb5328772b94a3f21bb963ca94dff80e,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            if (i+2 == str.length())
            {
                newStr = newStr.concat(""p"");
            }
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    return newStr; 
}
",0.214286,0.21428571428571427,11100000000000,d95b2d159f1bfc3583c09e067f42c328510654f1,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.785714,0.7857142857142857,"public String zipZap(String str)
{
    int len = str.length();
	StringBuilder newStr = new StringBuilder();
    int i = 0;
    while (i <len-2)
    {
        char ch = str.charAt(i);
        if (ch == 'z' && str.charAt(i+2) == 'p')
        {
            newStr.append(""zp"");
            i = i+3;
        }
        else
        {
            newStr.append(ch);
            i++;
        }
    }
    while (i < len) {
        newStr.append(str.charAt(i));
        i++;
    }
    return newStr.toString();
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",66e8d052ec2230c66bd11ee6b5a0e3c8,222122222020002110,28235695f66292ada36cd08646167cacd7fa85af,"public boolean isEverywhere(int[] nums, int val)
{
    boolean everywhere = false;
    int numTimes = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == val || nums[i + 1] == val)
        {
            numTimes++;
        }
    }
    if (numTimes >= nums.length * 2)
    {
        everywhere = true;
    }
    return everywhere;
}
",0.277778,0.2777777777777778,100110101010001110,ded44d0701086c435aa99846db44027677bd0d54,"public boolean isEverywhere(int[] nums, int val)
{
    boolean everywhere = false;
    int numTimes = 0;
    for (int i = 0; i < nums.length; i++)
    {
        int maxValue = i;
        if (i + 1 < nums.length)
        {
            maxValue++;
        }
        if (nums[i] == val || nums[maxValue] == val)
        {
            numTimes++;
        }
    }
    if (numTimes >= nums.length * 2)
    {
        everywhere = true;
    }
    return everywhere;
}
",0.5,0.5,"public boolean isEverywhere(int[] nums, int val)
{
    if (nums.length < 2) {
        return true;
    }
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",70cf1f7eb14c9f52277f07e84a2775f3,001001000000110001,9a5d7a6f1dfc535d8579cb06a840723b9396a05d,"public boolean isEverywhere(int[] nums, int val)
{
    boolean everywhere = false;
    int numTimes = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == val || nums[i + 1] == val)
        {
            numTimes++;
        }
    }
    if (numTimes >= nums.length * 2)
    {
        everywhere = true;
    }
    return everywhere;
}
",0.722222,0.7222222222222222,100110110010001100,45586f558c41ec98af7d8c6696665f116e725283,"public boolean isEverywhere(int[] nums, int val)
{
    boolean everywhere = false;
    int numTimes = 0;
    for (int i = 0; i < nums.length; i++)
    {
        int maxValue = i;
        if (i + 1 < nums.length)
        {
            maxValue++;
        }
        if (nums[i] == val || nums[maxValue] == val)
        {
            numTimes++;
        }
    }
    if (numTimes >= nums.length * 2)
    {
        everywhere = true;
    }
    return everywhere;
}
",0.555556,0.5555555555555556,"public boolean isEverywhere(int[] nums, int val)
{
    for(int i=0; i<nums.length-1; i++)
    {
        if(!(nums[i]==val||nums[i+1]==val)) return false;
    }
    return true;
        
}"
5,"Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.",55f04ea8d0761b7aff9d21f23ebcbfef,01100110,086a67a55e0168275c17995bfb3d38e643594f65,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning)
    {
        if (isMom)
        {
            return true;
        }
    	else
        {
        return false;
        }
    }
    else if (isAsleep)
    {
     	return false;  
    }
    else
    {
        return true;
    }
}
",0.5,0.5,00000001,9ea952db25d7b680e5d8b6eda847c069402cfa77,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
     	return false;  
    }
    else if (isMorning)
    {
        if (isMom)
        {
            return true;
        }
    	else
        {
        return false;
        }
    }
    else
    {
        return true;
    }
    
}
",0.875,0.875,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMorning && !isMom)
        return false;
    return true;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",2e0a791950a53842e60d83295368cdff,010000101001000000100,fb6565dfe7dff7ccdd9e7ed468143bd5bea22a4f,"public boolean evenlySpaced(int a, int b, int c)
{
    if (Math.abs(a-b) == Math.abs(c-b) || Math.abs(b-c) == Math.abs(a-c))
    {
     	return true;   
    }
    else
    {
     	return false;   
    }
}
",0.761905,0.7619047619047619,000000100111000000010,504e62b016892b968569de29e062664a91f3b1f8,"public boolean evenlySpaced(int a, int b, int c)
{
    if (Math.abs(a-b) == Math.abs(c-b) || Math.abs(b-c) == Math.abs(a-c) || Math.abs(a-b) == Math.abs(a-c))
    {
     	return true;
    }
    else
    {
     	return false;   
    }
}
",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    int[] nums = {a, b, c};
    Arrays.sort(nums);
    return nums[1] - nums[0] == nums[2] - nums[1];
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",b0eec27361a2a03d4480b560df531df7,000001011000111010101,a7449e028010c6e1d172fc9401bdbd1a08326ea8,"public boolean evenlySpaced(int a, int b, int c)
{
    if (Math.abs(a-b) == Math.abs(c-b) || Math.abs(b-c) == Math.abs(a-c))
    {
     	return true;   
    }
    else
    {
     	return false;   
    }
}
",0.571429,0.5714285714285714,110101011000001010101,bb02eb4d5e039d03ec133d8b256df47df0a09389,"public boolean evenlySpaced(int a, int b, int c)
{
    if (Math.abs(a-b) == Math.abs(c-b) || Math.abs(b-c) == Math.abs(a-c) || Math.abs(a-b) == Math.abs(a-c))
    {
     	return true;
    }
    else
    {
     	return false;   
    }
}
",0.52381,0.5238095238095238,"public boolean evenlySpaced(int a, int b, int c)
{
    int[] values = {a, b, c};
    Arrays.sort(values);
    return (values[2] - values[1]) == (values[1] - values[0]);
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5f79d384b8024d5adddb872f9651f38,1001001001000100100000,c24a9a3a94bddb14573d2fbba0c93837fd769d3c,"public int blackjack(int a, int b)
{
    int bj=0;
    
    int da=21-a;
    int db=21-b;
    if(da>db)
    {
        bj=b;
    }
    if(db>da)
    {
        bj=a;
    }
    
    if((a>21)&&(b>21))
    {
        bj=0;
    }
    return bj;
    
}
",0.727273,0.7272727272727273,0001001001000100100000,305a346ed5d131be1e68e55b2ed673e6ff679097,"public int blackjack(int a, int b)
{
    int bj=0;
    
    int da=21-a;
    int db=21-b;
    if(da>db)
    {
        bj=b;
    }
    if(db>da)
    {
        bj=a;
    }
    
    if((a>21)&&(b>21))
    {
        bj=0;
    }
    if((a>21)&&(b<21))
    {
        bj=b;
    }
    if((b>21)&&(a<21))
    {
        bj=a;
    }
    return bj;
    
}
",0.772727,0.7727272727272727,"public int blackjack(int a, int b)
{
   if ( a > 21 && b > 21)
   {
      return 0; 
   }
   if (a <= 21 && (b > 21 || a > b))
   {
      return a;
   }
   if (b <= 21 && (a > 21 || b > a))
   {
      return b;
   }
   return 0;
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",93819e80e5e3693840fa1f2c327b51b5,0010010101010101,3299b95a4c00b79c993649071f9115e6ba16a02c,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean in1To10= false;
    
    if (!outsideMode)
    {
        if (n>=1 && n<=10)
        {
            in1To10 = true; 
        }
        else 
            in1To10 = false; 
    }
    
    if (outsideMode)
    {
        if (n<=1 && n>=10)
        {
            in1To10 = true; 
        }
    }        
    
    return in1To10;        
}
",0.5625,0.5625,0030010101010101,c2b3e1f444dace7d31ebd6b93e78e9c798e31586,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean in1To10= false;
    
    if (!outsideMode)
    {
        if (n>=1 && n<=10)
        {
            in1To10 = true; 
        }
        else 
            in1To10 = false; 
    }
    
    if (outsideMode)
    {
        if (n<=1 && n>=10)
        {
            in1To10 = true; 
        }
        else 
            in1To10 = false; 
    }        
    
    return in1To10;        
}
",0.5625,0.5625,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean in1To10= false;
    
    if (!outsideMode)
    {
        if (n>=1 && n<=10)
        {
            in1To10 = true; 
        }
        else 
            in1To10 = false; 
    }
    
    if (outsideMode)
    {
        if (n<=1 || n>=10)
        {
            in1To10 = true; 
        }
    }        
    
    return in1To10;        
}"
17,"Write a function in Java that implements the following logic: You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.",0aaf61723a352ba7ea1be4502df85765,00111101110001010000001111,926f63de082cbfe3637a81c6dc42f91205bc5524,"public int redTicket(int a, int b, int c)
{
    if (a == 2 && (a == b && a==c))
    {
     	return 10;   
    }
    return 0;
}
",0.5,0.5,00001001110001000000001111,b71c92ca2e33a86259c2efea9d442e979f2bd5f9,"public int redTicket(int a, int b, int c)
{
    if (a == 2 && (a == b && a==c))
    {
     	return 10;   
    }
    else if (a == b && b == c)
    {
     	return 5;   
    }
    return 0;
}
",0.653846,0.6538461538461539,"public int redTicket(int a, int b, int c)
{
    if (a == 2 && (a == b && a == c))
    {
        return 10;
    }
    if (a == b && b == c)
    {
        return 5;
    }
    if (a != b && a != c)
    {
        return 1;
    }
    return 0;
}"
17,"Write a function in Java that implements the following logic: You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.",580274a213455c56684ab9f6e7a9995a,10110100000000010000000000,1859c0f58a8cde9ef5eca66d2294a73363f35e3f,"public int redTicket(int a, int b, int c)
{
    if (a == 2 && (a == b && a==c))
    {
     	return 10;   
    }
    return 0;
}
",0.807692,0.8076923076923077,00110000000000000000000000,ebeab5e1c7bd32005092a2e3cc41309996a9eee7,"public int redTicket(int a, int b, int c)
{
    if (a == 2 && (a == b && a==c))
    {
     	return 10;   
    }
    else if (a == b && b == c)
    {
     	return 5;   
    }
    return 0;
}
",0.923077,0.9230769230769231,"public int redTicket(int a, int b, int c)
{
    int x;
    if (a == 2 && b == 2 && c == 2)
    {
        x = 10;
    }
    else if (a == b && a == c)
    {
        x = 5;
    }
    else if (a != c && a != b)
    {
        x = 1; 
    }
    else
    {
        x = 0;   
    }
    return x;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",1cd45c346398d2ee6a71296e1fa88796,110100011100001010100,f1e38d5ae486b2602eb93c78c107bab05899092d,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == c - b);
}
",0.571429,0.5714285714285714,010100000000000000100,8daceab4d4f2b22d4fb096d6450caf25c05c2d32,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == b - c);
}
",0.857143,0.8571428571428571,"public boolean evenlySpaced(int a, int b, int c)
{
    int temp;
    
    if (a > b)
    {
        temp = a;
        a = b;
        b = temp;
    }
    
    if (b > c)
    {
        temp = b;
        b = c;
        c = temp;
    }
    
    if (a > b)
    {
        temp = a;
        a = b;
        b = temp;
    }

    return (b - a == c - b);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",c5383525e91474a4e5d7dcfee92c054f,000000000001000000100,9cc8c4bbca8f0540d1a95c4fc1c39feefccce3bf,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == c - b);
}
",0.904762,0.9047619047619048,000000000000000000100,5f72bbc520577c0d5c80bc20519212a3703c01ac,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == b - c);
}
",0.952381,0.9523809523809523,"public boolean evenlySpaced(int a, int b, int c)
{
    int[] nums = {a, b, c};
    Arrays.sort(nums);
    int small = nums[0];
    int medium = nums[1];
    int large = nums[2];
    
    if ((large - medium) == (medium - small))
    {
        return true;
    }
    else
    {
        return false;
    }
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111111110111110111111011,e45d9b9f8908ed389ea6d9dcc6791d64b07ce12c,"public int noTeenSum(int a, int b, int c)
{
	if(a > 12 && a < 20)
    {
     	this.fixTeen(a);  
    }
    if(b> 12 && b < 20)
    {
     	this.fixTeen(b); 
    }
    if(c> 12 && c< 20)
    {
     	this.fixTeen(c); 
    }
    return a + b + c;
}

public int fixTeen(int n)
{
	if (n == 15 || n == 16)
    {
     	n = n;   
    }
    else if (n >= 13 && n <= 19)
    {
     	n = 0;
    }
    return n;
}",0.12,0.12,0110011011011111100001111,980cb3c1cc3745b38924b37e898bb56c27ab3b23,"public int noTeenSum(int a, int b, int c)
{
	return (fixTeen(a) + fixTeen(b) + fixTeen(c));
}

public int fixTeen(int n)
{
    if(n == 15 || n == 16 || n > 19 || n < 13)
    {
     	return n;   
    }
    return 0;
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16) {
        return 0;
    }
    return n;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",580274a213455c56684ab9f6e7a9995a,3323333332333333,06e7d01b079663451cd5586da88f9cb741335b3f,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            j = i + 1;
            sum1 += nums[j];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.0,0.0,3333333330333333,6e6287e4f771d6af67eb58b04c693fd2129f56c8,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            j = i;
            sum1 += nums[j];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.0625,0.0625,"public boolean canBalance(int[] nums)
{
    int totalSum = 0;
    for (int num : nums) {
        totalSum += num;
    }
    int leftSum = 0;
    for (int i = 0; i < nums.length; i++) {
        leftSum += nums[i];
        if (leftSum == totalSum - leftSum) {
            return true;
        }
    }
    return false;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",76d0863b5d13a9ed61f7df9149fb93d8,0101010100001110,154d022718c67ff47614b92ed9d4edbceef000ed,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            j = i + 1;
            sum1 += nums[j];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.5625,0.5625,0100010100001110,dec0769a1392a1c0fcef6918a81a7235bbd488cf,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            j = i;
            sum1 += nums[j];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.625,0.625,"public boolean canBalance(int[] nums)
{
    int totalSum = 0;
    for (int num : nums) {
        totalSum += num;
    }

    int leftSum = 0;
    for (int i = 0; i < nums.length - 1; i++) {
        leftSum += nums[i];
        if (leftSum * 2 == totalSum) {
            return true;
        }
    }
    return false;
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",a4546d484e137a6c92e317daae0e7131,11100000000000,3be2c179843dbb49e1ef72d37102ee7a8f6e9944,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i<= str.length()-3; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}
",0.785714,0.7857142857142857,11111000111111,031aff63eb5328772b94a3f21bb963ca94dff80e,"public String zipZap(String str)
{
    int len = str.length();
	StringBuilder newStr = new StringBuilder(str);
    int i = 0;
    while (i <len-2)
    {
        char ch = str.charAt(i);
        if (ch == 'z' && str.charAt(i+2) == 'p')
        {
            newStr.append(""zp"");
            i = i+3;
        }
        else
        {
            newStr.append(ch);
            i++;
        }
    }
    return newStr.toString();

}",0.214286,0.21428571428571427,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i<= str.length()-3; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
            i++; // Skip the next character after a removal to prevent overlap
    	}
    }
    return newStr.toString();
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",d29af1fd577b037033dd1149e816d521,22222220222222,6fc279577526c2ebbb19355897601b8558171d4f,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i<= str.length()-3; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();
}
",0.0714286,0.07142857142857142,22222110222222,e400ec1ccbd49a4630b2fe74d7b54b939f724ec3,"public String zipZap(String str)
{
    int len = str.length();
	StringBuilder newStr = new StringBuilder(str);
    int i = 0;
    while (i <len-2)
    {
        char ch = str.charAt(i);
        if (ch == 'z' && str.charAt(i+2) == 'p')
        {
            newStr.append(""zp"");
            i = i+3;
        }
        else
        {
            newStr.append(ch);
            i++;
        }
    }
    return newStr.toString();

}",0.0714286,0.07142857142857142,"public String zipZap(String str)
{
    int len = str.length();
    StringBuilder zipZap = new StringBuilder();
    for (int i = 0; i < len - 1; i++)
    {
        if (i < len - 2 && str.charAt(i) == 'z' && str.charAt(i + 2) == 'p')
        {
            zipZap.append(""zp"");
            i += 2; 
        }
        else
        {
            char letter = str.charAt(i);
            zipZap.append(letter);
        }
    }
    if (len >= 2 && !(str.charAt(len - 3) == 'z' && str.charAt(len - 1) == 'p'))
    {
        zipZap.append(str.charAt(len - 1));
    }
    return zipZap.toString();
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",0aaf61723a352ba7ea1be4502df85765,0110011011011111100001111,c43fedd3cc4c07a165093ff002a4c179ec3ee6e9,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	n = a;
    this.fixTeen(n);
    n = b;
    this.fixTeen(n);
    n = c;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.36,0.36,1111111110111110111111011,1b69fb0fcd0fd9e2f828a894d1bb9acb234d9fe4,"public int noTeenSum(int a, int b, int c)
{
    int n = 0;
	a = n;
    this.fixTeen(n);
    b = n;
    this.fixTeen(n);
    c = n;
    this.fixTeen(n);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n > 12 && n < 20)
    {
     	n = 0;   
    }
    return 0;
}
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    a = this.fixTeen(a);
    b = this.fixTeen(b);
    c = this.fixTeen(c);
    return a + b + c;
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
     	n = 0;   
    }
    return n;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",c5383525e91474a4e5d7dcfee92c054f,000001000000000000101,9f0468f2d52275e71bbdd7832d7c7625fa784345,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = 0;
    int medium = 0;
    int large = 0;
    if (a > b && a > c)
    {
        large = a;
    }
    else if (a < b && a > c)
    {
        medium = a;
    }
    else if (a > b && a < c)
    {
        medium = a;
    }
    else
    {
        small = a;
    }
    
    if (b > a && b > c)
    {
        large = b;
    }
    else if (b < a && b > c)
    {
        medium = b;
    }
    else if (b > a && b < c)
    {
        medium = b;
    }
    else
    {
        small = b;
    }
    if (large == 0)
    {
        large = c;
    }
    else if (medium == 0)
    {
        medium = c;
    }
    else
    {
        small = c;
    }
    
    if ((large - medium) == (medium - small))
    {
        return true;
    }
    else
    {
        return false;
    }
    
}
",0.857143,0.8571428571428571,000000000000000000100,43dd4a719cdeb718b67ce3366128543663811e7d,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = 0;
    int medium = 0;
    int large = 0;
    if (a > b && a > c)
    {
        large = a;
    }
    else if (a <= b && a >= c)
    {
        medium = a;
    }
    else if (a >= b && a <= c)
    {
        medium = a;
    }
    else
    {
        small = a;
    }
    
    if (b > a && b > c)
    {
        large = b;
    }
    else if (b < a && b > c)
    {
        medium = b;
    }
    else if (b > a && b < c)
    {
        medium = b;
    }
    else
    {
        small = b;
    }
    if (large == 0)
    {
        large = c;
    }
    else if (medium == 0)
    {
        medium = c;
    }
    else
    {
        small = c;
    }
    
    if ((large - medium) == (medium - small))
    {
        return true;
    }
    else
    {
        return false;
    }
    
}
",0.952381,0.9523809523809523,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = 0;
    int medium = 0;
    int large = 0;
    if (a >= b && a >= c)
    {
        large = a;
    }
    else if (a <= b && a >= c)
    {
        medium = a;
    }
    else if (a >= b && a <= c)
    {
        medium = a;
    }
    else
    {
        small = a;
    }
    
    if (b >= a && b >= c)
    {
        large = b;
    }
    else if (b <= a && b >= c)
    {
        medium = b;
    }
    else if (b >= a && b <= c)
    {
        medium = b;
    }
    else
    {
        small = b;
    }
    if (large == 0)
    {
        large = c;
    }
    else if (medium == 0)
    {
        medium = c;
    }
    else
    {
        small = c;
    }
    
    if ((large - medium) == (medium - small))
    {
        return true;
    }
    else
    {
        return false;
    }
    
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",c5f79d384b8024d5adddb872f9651f38,110100111111001010110,f9bf1f95e030e79819812b68947f9e14b4e421fd,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = 0;
    int medium = 0;
    int large = 0;
    if (a > b && a > c)
    {
        large = a;
    }
    else if (a < b && a > c)
    {
        medium = a;
    }
    else if (a > b && a < c)
    {
        medium = a;
    }
    else
    {
        small = a;
    }
    
    if (b > a && b > c)
    {
        large = b;
    }
    else if (b < a && b > c)
    {
        medium = b;
    }
    else if (b > a && b < c)
    {
        medium = b;
    }
    else
    {
        small = b;
    }
    if (large == 0)
    {
        large = c;
    }
    else if (medium == 0)
    {
        medium = c;
    }
    else
    {
        small = c;
    }
    
    if ((large - medium) == (medium - small))
    {
        return true;
    }
    else
    {
        return false;
    }
    
}
",0.380952,0.38095238095238093,110100011110001010110,0fc81c898ceb475247772758bcf2dd30a7231b22,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = 0;
    int medium = 0;
    int large = 0;
    if (a > b && a > c)
    {
        large = a;
    }
    else if (a <= b && a >= c)
    {
        medium = a;
    }
    else if (a >= b && a <= c)
    {
        medium = a;
    }
    else
    {
        small = a;
    }
    
    if (b > a && b > c)
    {
        large = b;
    }
    else if (b < a && b > c)
    {
        medium = b;
    }
    else if (b > a && b < c)
    {
        medium = b;
    }
    else
    {
        small = b;
    }
    if (large == 0)
    {
        large = c;
    }
    else if (medium == 0)
    {
        medium = c;
    }
    else
    {
        small = c;
    }
    
    if ((large - medium) == (medium - small))
    {
        return true;
    }
    else
    {
        return false;
    }
    
}
",0.47619,0.47619047619047616,"public boolean evenlySpaced(int a, int b, int c) {
    int[] nums = {a, b, c};
    Arrays.sort(nums);
    return (nums[2] - nums[1] == nums[1] - nums[0]);
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",55f04ea8d0761b7aff9d21f23ebcbfef,01011100100110,691d5aa14c5c348778aeb8a54f3cf76b19cf30bd,"public int loneSum(int a, int b, int c)
{
    if (a == b && a != c)
        return (b + c);
    if (a == c && a != b)
        return (a + b);
    if (b == c && b != a)
        return (c + a);
    if (a == b && a == c)
        return 0;
    return (a + b + c);
}
",0.5,0.5,00100000010000,4ead1486ffb61ab5553c45fd709269e204ded1dc,"public int loneSum(int a, int b, int c)
{
    if (a == b)
        return c;
    if (a == c)
        return b;
    if (b == c)
        return a;
    return (a + b + c);
}
",0.857143,0.8571428571428571,"public int loneSum(int a, int b, int c)
{
    if (a == b && a != c)
        return c;
    if (a == c && a != b)
        return b;
    if (b == c && b != a)
        return a;
    if (a == b && a == c)
        return 0;
    return (a + b + c);
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",bfa20d86a59044ef90a4609dde03985c,0011001000010000011000,7a0c9f6ef0dc5b44c572db3b05f8d340753ffbad,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
        return 0;
    else if (a > b)
        return a;
    else if (b > a)
        return b;
    return a;
}
",0.727273,0.7272727272727273,1001001000000000000000,d044b4a8e0c7f8b2e95de027b43a17dce9b79851,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
        return 0;
    else if (a > b && a <21)
        return a;
    else if (b > a && b <21)
        return b;
    return a;
}
",0.8636360000000001,0.8636363636363636,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
        return 0;
    else if (a <= 21 && (b > 21 || a > b))
        return a;
    else if (b <= 21 && (a > 21 || b > a))
        return b;
    return 0;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",1cd45c346398d2ee6a71296e1fa88796,010100000000000000100,1e20f0706de440d025e8f50c67c773408dce1ce8,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == b - c);
}
",0.857143,0.8571428571428571,110100011100001010100,f1e38d5ae486b2602eb93c78c107bab05899092d,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == c - b);
}
",0.571429,0.5714285714285714,"public boolean evenlySpaced(int a, int b, int c)
{
    int temp;
    
    if (a > b)
    {
        temp = b;
        b = a;
        a = temp;
    }
    
    if (b > c)
    {
        temp = c;
        c = b;
        b = temp;
    }
    
    if (a > b)
    {
        temp = b;
        b = a;
        a = temp;
    }
    
    return (b - a == c - b);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",c5383525e91474a4e5d7dcfee92c054f,000000000001000000100,9cc8c4bbca8f0540d1a95c4fc1c39feefccce3bf,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == b - c);
}
",0.904762,0.9047619047619048,000000000000000000100,5f72bbc520577c0d5c80bc20519212a3703c01ac,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == c - b);
}
",0.952381,0.9523809523809523,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = Math.min(a, Math.min(b, c));
    int large = Math.max(a, Math.max(b, c));
    int medium = a + b + c - small - large;
    
    if ((large - medium) == (medium - small))
    {
        return true;
    }
    else
    {
        return false;
    }
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",93819e80e5e3693840fa1f2c327b51b5,0011101010010000011010,d17b3c6a0ee3af5dfc82a36ab8a742d8f5ca1136,"public int blackjack(int a, int b)
{
    int diffa = 21-a;
    int diffb = 21-b;
    int blackjack = 1; 
    if(diffa>diffb)
    {
        blackjack=b; 
    }
    else if(diffa<diffb)
    {
        blackjack=a; 
    }
    else if((diffa<0) ||(diffb<0))
    {
        blackjack=0; 
    }
    return blackjack; 
}
",0.590909,0.5909090909090909,0011001000010000011000,3cc68e4b0a86ac677a800be9fddf61dc4a844086,"public int blackjack(int a, int b)
{
    int bj=0;
    
    int da=21-a;
    int db=21-b;
    if(da>db)
    {
        bj=b;
    }
    if(db>da)
    {
        bj=a;
    }
    
    if((a>21)&&(b>21))
    {
        bj=0;
    }
    return bj;
    
}
",0.727273,0.7272727272727273,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21) {
        return 0;
    }
    if (a > 21) {
        return b;
    }
    if (b > 21) {
        return a;
    }
    return (a > b) ? a : b;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",e5815151957be36ad2085b7a1a02c5cc,0011000100110101011000,abe35efde9c3654f9f34c1dd8061d4c2c122d5f3,"public int blackjack(int a, int b)
{
    int diffa = 21-a;
    int diffb = 21-b;
    int blackjack = 1; 
    if(diffa>diffb)
    {
        blackjack=b; 
    }
    else if(diffa<diffb)
    {
        blackjack=a; 
    }
    else if((diffa<0) ||(diffb<0))
    {
        blackjack=0; 
    }
    return blackjack; 
}
",0.590909,0.5909090909090909,0011000101111101110001,3e5adbce617447a93627c789a849ba7247978ff3,"public int blackjack(int a, int b)
{
    int bj=0;
    
    int da=21-a;
    int db=21-b;
    if(da>db)
    {
        bj=b;
    }
    if(db>da)
    {
        bj=a;
    }
    
    if((a>21)&&(b>21))
    {
        bj=0;
    }
    return bj;
    
}
",0.454545,0.45454545454545453,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
    {
        return 0;
    }

    if (a > 21)
    {
        return b;
    }

    if (b > 21)
    {
        return a;
    }

    return Math.max(a, b);
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",0aaf61723a352ba7ea1be4502df85765,0011101111111101111011,3903c178f90f58b60cc86d8c87167ad57c5ebb51,"public int blackjack(int a, int b)
{
    if (a > 0 && b > 0)
    {
     	if (a > b && a >= 21)
        {
         	return a;   
        }
        else if (b > a && b >= 21)
        {
         	return b;   
        }
    }
    return 0;
}
",0.227273,0.22727272727272727,0011001000010000011000,095e448c6bcbb98711f9b55688c27c4c72ac18da,"public int blackjack(int a, int b)
{
    if (a > 0 && b > 0)
    {
     	if (a > b && a <= 21)
        {
         	return a;   
        }
        else if (b > a && b <= 21)
        {
         	return b;   
        }
    }
    return 0;
}
",0.727273,0.7272727272727273,"public int blackjack(int a, int b)
{
    if (a > 0 && b > 0)
    {
        if (a <= 21 && (b > 21 || a > b))
        {
            return a;
        }
        else if (b <= 21 && (a > 21 || b > a))
        {
            return b;
        }
    }
    return 0;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",580274a213455c56684ab9f6e7a9995a,011001102101110020,1e93028b80b3ff1f03897db230e3cbfd46e90d22,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
     	if (i == 0 && (i + 2) != nums.length)
        {
            if (nums[i+1] == val || nums[i+2] == val)
            {
                x = true;
            }
        }
    }
    return x;
}
",0.444444,0.4444444444444444,011001001101110011,956720a19920d2f83b2e66adb0084299b5103d60,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
     	if (i == 0 && (i + 1) != nums.length)
        {
            if (nums[i] == val || nums[i+1] == val)
            {
                x = true;
            }
        }
    }
    return x;
}
",0.444444,0.4444444444444444,"public boolean isEverywhere(int[] nums, int val)
{
    if (nums.length <= 1) return true;

    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",c5383525e91474a4e5d7dcfee92c054f,000000001200110001,ec0271caf15d48b15b9eda2f8ac1d15663dd0882,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
     	if (i == 0 && (i + 2) != nums.length)
        {
            if (nums[i+1] == val || nums[i+2] == val)
            {
                x = true;
            }
        }
    }
    return x;
}
",0.722222,0.7222222222222222,000000001100110001,4978eea8ccb81e48777eccfaa2fb1166591e686c,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = false;
    for (int i = 0; i < nums.length; i++)
    {
     	if (i == 0 && (i + 1) != nums.length)
        {
            if (nums[i] == val || nums[i+1] == val)
            {
                x = true;
            }
        }
    }
    return x;
}
",0.722222,0.7222222222222222,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    if (nums.length == 1)
    {
        return nums[0] == val;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] != val && nums[i+1] != val)
        {
            neighbor = false;
        }
    }
    return neighbor;
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",76d0863b5d13a9ed61f7df9149fb93d8,1101100221111,bbc16981de5bfbcd396b06b2626233be1c7d43a8,"public String getSandwich(String str)
{
    int i = 0;
    while (str.substring(i, i+5) != ""bread"" && i+6 <= str.length() )
    {
        i=i+1;
    }
    if (str.substring(i, i+5).equals(str.substring(str.length()-(i+5)))
               && str.substring(i, i+5).equals(""bread""))
    {
        return str.substring(i, str.length() -(i+5));
    }
    else 
        {
            return """";
        }
}
",0.230769,0.23076923076923078,2222222222222,57a8494731db780fd837e7266f24a63b331f0170,"public String getSandwich(String str)
{
    int i = 0;
    while (str.substring(i, i+5) != ""bread"" &&
           i+5 <= str.length() )
    {
        i=i+1;
    }
    if (str.substring(i, i+5).equals(str.substring(str.length()-(i+5), 
                                                  str.length()-i))
               && str.substring(i, i+5).equals(""bread""))
    {
        return str.substring(i, str.length() -(i+5));
    }
    else 
        {
            return """";
        }
}
",0.0,0.0,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread)
    {
        return str.substring(firstBread + 5, lastBread);
    }
    else 
    {
        return """";
    }
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",76d0863b5d13a9ed61f7df9149fb93d8,0121022220100,846f74289462d03ab2adad2f7ea6526eb0b2b567,"public String getSandwich(String str)
{
    int i = 0;
    while (str.substring(i, i+5) != ""bread"" && i+6 <= str.length() )
    {
        i=i+1;
    }
    if (str.substring(i, i+5).equals(str.substring(str.length()-(i+5)))
               && str.substring(i, i+5).equals(""bread""))
    {
        return str.substring(i, str.length() -(i+5));
    }
    else 
        {
            return """";
        }
}
",0.384615,0.38461538461538464,1121122221111,879da23f90f6215176993ff8bb579c9532a47dd6,"public String getSandwich(String str)
{
    int i = 0;
    while (str.substring(i, i+5) != ""bread"" &&
           i+5 <= str.length() )
    {
        i=i+1;
    }
    if (str.substring(i, i+5).equals(str.substring(str.length()-(i+5), 
                                                  str.length()-i))
               && str.substring(i, i+5).equals(""bread""))
    {
        return str.substring(i, str.length() -(i+5));
    }
    else 
        {
            return """";
        }
}
",0.0,0.0,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != -1 && firstBread != lastBread) {
        return str.substring(firstBread + 5, lastBread);
    } else {
        return """";
    }
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",66e8d052ec2230c66bd11ee6b5a0e3c8,00101000000010000100000,e7cd04aadf7240183fbe209a734b413285f37497,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday = true)
    {
        if (speed < 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 86)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed < 60)
    	{
        	ticketSize = 0;
    	} else if (speed >= 60 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}
",0.8260870000000001,0.8260869565217391,01001000000010000100000,e13b0bff8e3bc5261a191f0c9567f33604560ebf,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday = true)
    {
        if (speed <= 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 86)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed <= 60)
    	{
        	ticketSize = 0;
    	} else if (speed >= 60 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}
",0.8260870000000001,0.8260869565217391,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday == true)
    {
        if (speed <= 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 86)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed < 60)
    	{
        	ticketSize = 0;
    	} else if (speed >= 60 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",e8dc153260a59d4f236cfd7439d5dfd3,00000100100000100011110,524611fb7c5e95e815999ba289f82a1780f51515,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday = true)
    {
        if (speed < 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 86)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed < 60)
    	{
        	ticketSize = 0;
    	} else if (speed >= 60 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}
",0.695652,0.6956521739130435,00000000000000000100000,c05a5381cdc56b22341c9cecaf292c54eb40a462,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday = true)
    {
        if (speed <= 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 86)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed <= 60)
    	{
        	ticketSize = 0;
    	} else if (speed >= 60 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}
",0.956522,0.9565217391304348,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed - 5;
    }
    if ( speed <= 60)
    {
        return 0;
    }
    else if ( speed <= 80)
    {
        return 1;
    }
    else if (speed >= 81)
    {
        return 2;
    }
    return 0;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",f683900ca17bd492ad987ecf64e8ace6,000010100111110100010,b8f69bb775d2661235d7cbb6d52a0f1e51cbc9e4,"public boolean evenlySpaced(int a, int b, int c)
{
	//t x = Math.abs(a-b);
    //t y = Math.abs(b-c);
    //t z = Math.abs(a-c);
    
    int sum = a+b+c;
    int avg = sum/3;
    int j = Math.abs(avg - a);
    int k = Math.abs(avg - b);
    int g = Math.abs(avg - c);
    if (a == avg || b == avg || c == avg)
    {
       
    	if ( j == k || k==g || j==g)
            return true;
        else return false;
    }
    else
        return false;

}",0.571429,0.5714285714285714,100101011000001010001,99433298c1fbeed543c3598cab939b597f702420,"public boolean evenlySpaced(int a, int b, int c)
{
	//t x = Math.abs(a-b);
    //t y = Math.abs(b-c);
    //t z = Math.abs(a-c);
    
    if((a==b && b !=c)|| (b==c && a!=c)|| (c==a && b!=c))
        return false;
    int sum = a+b+c;
    int avg = sum/3;
    int j = Math.abs(avg - a);
    int k = Math.abs(avg - b);
    int g = Math.abs(avg - c);
    
    if (a == avg || b == avg || c == avg)
    {
       
    	if ( j == k || k==g || j==g)
            return true;
        else return false;
    }
    else
        return false;

}",0.6190479999999999,0.6190476190476191,"public boolean evenlySpaced(int a, int b, int c)
{
    int temp; 
    
    if (a>b)
    {
        temp = a; 
        a = b; 
        b = temp; 
    }
    
    if (b>c)
    {
        temp = b; 
        b = c; 
        c = temp;
    }
    
    if (a>b)
    {
        temp = a; 
        a = b; 
        b = temp;
    }
    
    if (a == b && b == c) {
        return true;
    }

    return (b - a == c - b);
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",c5383525e91474a4e5d7dcfee92c054f,000000000000110001,8ff7eccb571b734d5528831a68a967ff8f91566a,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] != val && nums[i+1] != val && nums[i] != val)
        {
            
            neighbor = false;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.833333,0.8333333333333334,000000100001110001,4af7ca01120e0471eabf53239e456e0dae82458e,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = false;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] == val ||  nums[i] == val)
        {
            
            neighbor = true;
        }
        if (nums[i+1] == val || nums[i] == val)
        {
            neighbor = true;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.722222,0.7222222222222222,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            neighbor = false;
        }
    }
    return neighbor;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",c8720c9e82b818798e7b391fd62adf33,100110201210001100,934812973a3d08a5623f3ed3c814f723fd2ea514,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] != val && nums[i+1] != val && nums[i] != val)
        {
            
            neighbor = false;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.5,0.5,001001201100110012,67b80fa75d1eeac7cb3c22af65a7a5ee70cedf80,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = false;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] == val ||  nums[i] == val)
        {
            
            neighbor = true;
        }
        if (nums[i+1] == val || nums[i] == val)
        {
            neighbor = true;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.5,0.5,"
public boolean isEverywhere(int[] nums, int val)
{
    if (nums.length == 0) {
        return true;
    }
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",c8720c9e82b818798e7b391fd62adf33,0021002220011,4c5bb330513fbb0e12f871a8ed93bf6e603f0c18,"public String getSandwich(String str)
{
    int a = 0;
    int b = 0;
    	for (int i = 0; i < str.length(); i ++)
        {
        	if (str.startsWith(""bread"", i))
            {
            	a = i;
                break;
            }
        }
        for (int j = a + 1; j < str.length(); j ++)
        {
        	if (str.startsWith(""bread"", j))
            {
            	b = j;
                break;
            }
        }
        return str.substring(a + 5, b);

}
",0.461538,0.46153846153846156,0001000000011,a768128b0817a1c794c38a49c23fa332a77f4955,"public String getSandwich(String str)
{
    int a = 0;
    int b = 0;
    if (str.matches(""(.*)bread(.*)bread(.*)""))
    {
    	for (int i = 0; i < str.length(); i ++)
        {
        	if (str.startsWith(""bread"", i))
            {
            	a = i;
                break;
            }
        }
        for (int j = a + 1; j < str.length(); j ++)
        {
        	if (str.startsWith(""bread"", j))
            {
            	b = j;
                break;
            }
        }
        return str.substring(a + 5, b);
    }
    else
    {
    	return("""");
    }
}
",0.769231,0.7692307692307693,"public String getSandwich(String str)
{
    int first = str.indexOf(""bread"");
    int last = str.lastIndexOf(""bread"");
    if (first == -1 || first == last) {
        return """";
    }
    return str.substring(first + 5, last);
}"
5,"Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.",55f04ea8d0761b7aff9d21f23ebcbfef,00000001,682c78ab7186c19df043c9cf5361be3139178ae9,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isMom && !isAsleep)
        return true;
    if (!isMorning && !isMom && !isAsleep)
        return true;
    return false;    
}
",0.875,0.875,01100110,086a67a55e0168275c17995bfb3d38e643594f65,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isMom && !isAsleep)
        return true;
    if (!(isMorning && isMom && isAsleep))
        return true;
    return false;    
}
",0.5,0.5,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMorning && !isMom)
        return false;
    return true;    
}"
5,"Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.",70cf1f7eb14c9f52277f07e84a2775f3,00100000,c95d0f557ceb5a5e32eee5c874129959aa1a8710,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isMom && !isAsleep)
        return true;
    if (!isMorning && !isMom && !isAsleep)
        return true;
    return false;    
}
",0.875,0.875,10000001,08936adcf9eaf5be301b931d22e598f2212b0adc,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isMom && !isAsleep)
        return true;
    if (!(isMorning && isMom && isAsleep))
        return true;
    return false;    
}
",0.75,0.75,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if(!isAsleep)
    {
        if(isMorning)
        {
            if(isMom)
            {
                return true;
            }
            return false;
        }
        return true;
    }
    return false;
}"
5,"Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.",40195594f1244e7ec627b1c6a5a35585,00101000,adb1761b33227b31d7976977e491210d12a6a2da,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if(!isAsleep){
        return true;
    }
    else if(isMorning && isMom){
       // if(isMom){
            return true;
        }
        return false;
  //  }
    
}
",0.75,0.75,01101010,dc8030470a81f3f9da5f7f77313132d13f2b6992,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if(!isAsleep){
        return true;
    }
    else if(!isMorning){
        return true;
    }
    else if(isMom){
        return true;
    }
    return false;
      
    
}
",0.5,0.5,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if(isAsleep){
        return false;
    }
    if(isMorning){
        return isMom;
    }
    return true;
}"
5,"Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.",55f04ea8d0761b7aff9d21f23ebcbfef,10011001,3d89f76d27956de3a51e53f7ba12c5aa1fc7e352,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if(!isAsleep){
        return true;
    }
    else if(isMorning && isMom){
       // if(isMom){
            return true;
        }
        return false;
  //  }
    
}
",0.5,0.5,10000001,9c95cecda9ceadc259c470583345fbc63a0878d6,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if(!isAsleep){
        return true;
    }
    else if(!isMorning){
        return true;
    }
    else if(isMom){
        return true;
    }
    return false;
      
    
}
",0.75,0.75,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (!isMorning && !isAsleep)
        return true;
    if (isMorning && isMom && !isAsleep)
        return true;
    if (isAsleep)
        return false;
    return false;    
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",2e0a791950a53842e60d83295368cdff,0000030020002323030,d63f72a5828ee7279b79f96d510a7261eaab89bd,"public boolean xyBalance(String str)
{
    
    	for (int i = str.lastIndexOf(""x""); i < str.length(); i++)
    	{
     		if (str.charAt(i) == 'y')
        	{
         		return true;   
        	}
    	}
    
    return false;
}
",0.8421049999999999,0.631578947368421,0130313321302121330,1f4a6b4ab327e7d49179f508203f833ddc2e958b,"public boolean xyBalance(String str)
{
    if (str.indexOf(""x"") != -1)
    {
     	return true;
    }
    	for (int i = str.lastIndexOf(""x""); i < str.length(); i++)
    	{
     		if (str.charAt(i) == 'y')
        	{
         		return true;   
        	}
    	}
    
    return false;
}
",0.473684,0.21052631578947367,"public boolean xyBalance(String str)
{
    if (str.lastIndexOf(""x"") == -1) {
        return true;
    }
    
    for (int i = str.lastIndexOf(""x""); i < str.length(); i++)
    {
        if (str.charAt(i) == 'y')
        {
            return true;   
        }
    }
    
    return false;
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",76d0863b5d13a9ed61f7df9149fb93d8,0001010010000010130,28f2935660e82f0487765c13743b4282bb7ed2b6,"public boolean xyBalance(String str)
{
    
    	for (int i = str.lastIndexOf(""x""); i < str.length(); i++)
    	{
     		if (str.charAt(i) == 'y')
        	{
         		return true;   
        	}
    	}
    
    return false;
}
",0.736842,0.6842105263157895,0000000010000010000,2521c811bbd3cdaa48c599554f89707ed02f58fa,"public boolean xyBalance(String str)
{
    if (str.indexOf(""x"") != -1)
    {
     	return true;
    }
    	for (int i = str.lastIndexOf(""x""); i < str.length(); i++)
    	{
     		if (str.charAt(i) == 'y')
        	{
         		return true;   
        	}
    	}
    
    return false;
}
",0.8947370000000001,0.8947368421052632,"public boolean xyBalance(String str)
{
    int index1=0;
    int index2=0;
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""x""))
            {
                 index1= i;
                 break;
             }
    }
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""y""))
        {
            index2= i;
            break;
        }                                           
    }
    return index1<=index2;

}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",580274a213455c56684ab9f6e7a9995a,2222222220222222,5d55aa3f57b1ceec04a751c62981948693e7c6d7,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            sum1 += nums[j - i];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.0625,0.0625,3323333332333333,06e7d01b079663451cd5586da88f9cb741335b3f,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            j = i + 1;
            sum1 += nums[j];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.0,0.0,"public boolean canBalance(int[] nums)
{
    int leftSum = 0;
    int totalSum = 0;
    for (int num : nums) {
        totalSum += num;
    }
    for (int num : nums) {
        leftSum += num;
        if (leftSum == totalSum - leftSum) {
            return false;
        }
    }
    return true;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",76d0863b5d13a9ed61f7df9149fb93d8,0100011011010001,be38064cd21dc445371be81a02f66aceae5485e0,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            sum1 += nums[j - i];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.5625,0.5625,1011100100101110,d2d8672dfaaa4d5ba0fa368a67ff95c37e4e0044,"public boolean canBalance(int[] nums)
{
    boolean x = false;
    int sum1 = 0;
    int sum2 = 0;
    for (int i = 0; i < nums.length; i++)
    {
		for (int j = 0; j < nums.length; j++)
        {
            j = i + 1;
            sum1 += nums[j];
            sum2 += nums[j];
        }
        sum2 -= sum1;
        if (sum1 == sum2)
        {
			x = true;
            break;
        }
    }
    return x;
}
",0.4375,0.4375,"public boolean canBalance(int[] nums)
{
    int leftSum = 0;
    for (int i = 0; i < nums.length; i++) {
        leftSum += nums[i];
        int rightSum = 0;
        for (int j = i + 1; j < nums.length; j++) {
            rightSum += nums[j];
        }
        if (leftSum == rightSum) {
            return true;
        }
    }
    return false;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",e8dc153260a59d4f236cfd7439d5dfd3,00000100100000100011110,43447e129f0f84b7891d6266422546b3c1b68c28,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed + 5;
    }
    if (speed >= 81)
    {
        return 2;
    }
    else if (speed < 81 && speed >= 61)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",0.695652,0.6956521739130435,00000100100000100013110,92dd3fd9201646b957a3adf606d18d96c5f66b65,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed - 5;
    }
    if (speed >= 81)
    {
        return 2;
    }
    else if (speed < 81 && speed >= 61)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",0.695652,0.6956521739130435,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday == true)
    {
        speed = speed + 5;
    }
    if ( speed <= 60)
    {
        ticket = 0;
    }
    else if ( speed <= 80)
    {
        ticket = 1;
    }
    else if (speed >= 81)
    {
        ticket = 2;
    }
    return ticket;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",4346ad94c2790cac390e684155a2ecba,0110011011000111110101111,ff909e5e3342b7a834c4bd79cbcd668517f946bc,"public int noTeenSum(int a, int b, int c)
{
 return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
 if (n < 13 || n < 19 || n == 15 || n == 16) {
     return n;
 }
    else {
        return 0;
    }
 }
     
",0.36,0.36,0100000001011001100000101,ae723d70dee8b8d420d85ae1ad47f99956feae1e,"public int noTeenSum(int a, int b, int c)
{
 return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
 if (n <= 13 || n >= 19 || n == 15 || n == 16) {
     return n;
 }
    else {
        return 0;
    }
 }
     
",0.68,0.68,"public int fixTeen(int n)
{
 if (n < 13 || n > 19 || n == 15 || n == 16) {
     return n;
 }
    else {
        return 0;
    }
 }"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",e8dc153260a59d4f236cfd7439d5dfd3,1111111111111111111101111,09cdcea7f2fde42d5f7e0a2fa6832f8c3bb05b53,"public int noTeenSum(int a, int b, int c)
{
 return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
 if (n < 13 || n < 19 || n == 15 || n == 16) {
     return n;
 }
    else {
        return 0;
    }
 }
     
",0.04,0.04,1111111100100100111100001,dc8bdb43f8e4c8c1b0ba571076653e100eab25cc,"public int noTeenSum(int a, int b, int c)
{
 return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
 if (n <= 13 || n >= 19 || n == 15 || n == 16) {
     return n;
 }
    else {
        return 0;
    }
 }
     
",0.4,0.4,"public int fixTeen(int n)
{
    if (n >= 13 && n <= 19)
    {
        if (n == 15 || n == 16)
        {
            return n;
        }
        return 0;
    }

    return n; 
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",0ee7e71061cf860ccf3b29c6823c7971,00000111011011,2d1e10dbda10db68e76be5e50e36564d5f2402bf,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.5,0.5,11111221111111,0ac98d2e285d1e622aa6246fc09aa1dbc80f40aa,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length())
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p') && (i < str.length()-2))
        { 
            newStr = newStr.concat(""zp"");
            
            i = i+3;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.0,0.0,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length())
    {
        if (i < str.length() - 2 && (str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(""zp"");
            i = i+3;
        }
        else 
        {
            newStr = newStr.concat(Character.toString(str.charAt(i)));
            i++; 
        }
    }
    
    return newStr; 
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",b36fd154dd0df788b77b7cfe39200ba3,11111111111111,2a7be8015ab6342e9c38bdc025d052c3d668280c,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.0,0.0,11111011111111,50512065cabaabecbaa5b831302ebdc742ae9654,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length())
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p') && (i < str.length()-2))
        { 
            newStr = newStr.concat(""zp"");
            
            i = i+3;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.428571,0.07142857142857142,"public String zipZap(String str)
{
    StringBuilder result = new StringBuilder();
    for (int i = 0; i < str.length(); i++) {
        if (i > 0 && i < str.length() - 1 && str.charAt(i - 1) == 'z' && str.charAt(i + 1) == 'p') {
            result.append(""zp"");
            i++;
        } else {
            result.append(str.charAt(i));
        }
    }
    return result.toString();
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",e8dc153260a59d4f236cfd7439d5dfd3,1111111111111111111101111,09cdcea7f2fde42d5f7e0a2fa6832f8c3bb05b53,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    
    return a + b + c;
}

public int fixTeen(int n)
{
if (n >= 13 && n<= 19)
{
    if (n != 15 || n != 16)
    {
        return n;
    }
}

        return 0; 
}
",0.04,0.04,1111111100100100111100001,dc8bdb43f8e4c8c1b0ba571076653e100eab25cc,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    
    return a + b + c;
}

public int fixTeen(int n)
{
if (n >= 13 && n<= 19)
{
    if (n == 15 || n == 16)
    {
        return n;
    }
}

        return 0; 
}
",0.4,0.4,"public int fixTeen(int n)
{
    if (n >= 13 && n <= 19)
    {
        if (n == 15 || n == 16)
        {
            return n;
        }
        return 0;
    }

    return n;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1011111111110111111111111,5c3bfd5cbe857942ed266b11a9a73622d8cbe929,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    
    return a + b + c;
}

public int fixTeen(int n)
{
if (n >= 13 && n<= 19)
{
    if (n != 15 || n != 16)
    {
        return n;
    }
}

        return 0; 
}
",0.08,0.08,0110011011011111100001111,d83a4c404772fa4e25f6e5665d9f6245b768a87e,"public int noTeenSum(int a, int b, int c)
{
    a = fixTeen(a);
    b = fixTeen(b);
    c = fixTeen(c);
    
    return a + b + c;
}

public int fixTeen(int n)
{
if (n >= 13 && n<= 19)
{
    if (n == 15 || n == 16)
    {
        return n;
    }
}

        return 0; 
}
",0.36,0.36,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16) {
        return 0;
    }
    return n; 
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",0ee7e71061cf860ccf3b29c6823c7971,11101110211111,fa3a1cd7015126dac03f7d834f83601da594e997,"public String zipZap(String str)
{
    String newStr = """"; 
    
    for (int i = 1; i <= str.length()-2; i++)
    {
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        {
            String strA= Character.toString(str.charAt(i+1));  
            newStr = str.replaceFirst(strA, """");
            
        }
    }
    
    return newStr; 
}
",0.1428569999999999,0.14285714285714285,11100110011111,90e38b9cb1f742f8cf8490be93047a3a80becf42,"public String zipZap(String str)
{
    String newStr = """"; 
    
    for (int i = 0; i < str.length()-2; i++)
    {
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        {
            String strA= Character.toString(str.charAt(i+1));  
            newStr = str.replaceFirst(strA, """");
            
        }
    }
    
    return newStr; 
}
",0.285714,0.2857142857142857,"public String zipZap(String str)
{
    StringBuilder newStr = new StringBuilder(str);

    for (int i = 0; i < newStr.length() - 2; i++)
    {
        if ((newStr.charAt(i) == 'z') && (newStr.charAt(i + 2) == 'p'))
        {
            newStr.deleteCharAt(i + 1);
        }
    }

    return newStr.toString();
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",55f04ea8d0761b7aff9d21f23ebcbfef,11110000011111,1e63a9b9ad6500e25417773144087a860fe9aed7,"public String zipZap(String str)
{
    String newStr = """"; 
    
    for (int i = 1; i <= str.length()-2; i++)
    {
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        {
            String strA= Character.toString(str.charAt(i+1));  
            newStr = str.replaceFirst(strA, """");
            
        }
    }
    
    return newStr; 
}
",0.357143,0.35714285714285715,11110110011111,bb3623f6042ea4aa03ecac6e4d9ab8beaa2320f4,"public String zipZap(String str)
{
    String newStr = """"; 
    
    for (int i = 0; i < str.length()-2; i++)
    {
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        {
            String strA= Character.toString(str.charAt(i+1));  
            newStr = str.replaceFirst(strA, """");
            
        }
    }
    
    return newStr; 
}
",0.214286,0.21428571428571427,"public String zipZap(String str)
{
    StringBuilder result = new StringBuilder();
    int i = 0;
    while (i < str.length())
    {
        if (i < str.length() - 2 && str.charAt(i) == 'z' && str.charAt(i + 2) == 'p')
        {
            result.append(""zp"");
            i += 3;
        }
        else
        {
            result.append(str.charAt(i));
            i++;
        }
    }
    return result.toString();
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",70cf1f7eb14c9f52277f07e84a2775f3,30110000010110,bea5635958b93e1aef42a76a0c180b8e2a7d34d4,"public int loneSum(int a, int b, int c)
{
    if(a==b)
    {
        return c;
    }
    else if(a==c)
    {
        return b;
    }
    else if(b==c)
    {
        return b;
    }
    return a+b+c;
}",0.642857,0.5714285714285714,00110000010110,7e32951742386b21bcff544d1435babee3784cd1,"public int loneSum(int a, int b, int c)
{
    if(a==b)
    {
        if(b!=c)
        {
        	return c;
        }
    }
    else if(a==c)
    {
        return b;
    }
    else if(b==c)
    {
        return b;
    }
    return a+b+c;
}",0.642857,0.6428571428571429,"public int loneSum(int a, int b, int c)
{
    if(a==b && b==c)
    {
        return 0;
    }
    if(a==b)
    {
        return c;
    }
    if(a==c)
    {
        return b;
    }
    if(b==c)
    {
        return a;
    }
    return a+b+c;
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",580274a213455c56684ab9f6e7a9995a,1101100221111,1549cecb06cd3890b92cca392de3a3be9316318b,"public String getSandwich(String str)
{	
    String x = """";
    int y = str.length() - 5;
    if (str.substring(1,5) == ""bread"" && str.substring(y) == ""bread"")
    {
        x = str.substring(5, y);
    }
    return x;
}
",0.230769,0.23076923076923078,1101100221311,d89353d94a204b89a1da39a9ce5ca01eea84a55b,"public String getSandwich(String str)
{	
    String x = """";
    int y = str.length() - 6;
    if (str.substring(1,5) == ""bread"" && str.substring(y) == ""bread"")
    {
        x = str.substring(5, y);
    }
    return x;
}
",0.230769,0.23076923076923078,"public String getSandwich(String str)
{	
    String x = """";
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread)
    {
        x = str.substring(firstBread + 5, lastBread);
    }
    return x;
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",76d0863b5d13a9ed61f7df9149fb93d8,2222222222222,dcbc8fddceb96feb3f802406002666d72c285f83,"public String getSandwich(String str)
{	
    String x = """";
    int y = str.length() - 5;
    if (str.substring(1,5) == ""bread"" && str.substring(y) == ""bread"")
    {
        x = str.substring(5, y);
    }
    return x;
}
",0.0,0.0,1101110221111,2e203e93a13867f974f66070522322f103b53ef9,"public String getSandwich(String str)
{	
    String x = """";
    int y = str.length() - 6;
    if (str.substring(1,5) == ""bread"" && str.substring(y) == ""bread"")
    {
        x = str.substring(5, y);
    }
    return x;
}
",0.153846,0.15384615384615385,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread)
    {
        return str.substring(firstBread + 5, lastBread);
    }
    else 
    {
        return """";
    }
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",40195594f1244e7ec627b1c6a5a35585,0001000010000000,71119c04a9551b0e661baeff113aefa4470abb25,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean num = true;
    if (n >= 1 && n <= 10 && outsideMode == false)
    {
     	num = true;
    }
    else if (n <= 1 && n >= 10 && outsideMode == true)
    {
     	num = true;   
    }
    else
    {
     	num = false;   
    }
    return num;
}
",0.875,0.875,1101001010100000,3104dcf85e2e318202c3a43639be2188e8e02fda,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean num = true;
    if (n >= 1 && n <= 10 && outsideMode == false)
    {
     	num = true;
    }
    else if ((n <= 1 || n >= 10) && outsideMode == true)
    {
     	num = true;   
    }
    else
    {
     	num = false;   
    }
    return num;
}
",0.625,0.625,"public boolean in1To10(int n, boolean outsideMode)
{
    if(outsideMode && (n <= 1 || n >= 10)){
        return true;
    }
    else if (1 <= n && n<10){
        return true;
    }
    return false;
     
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",43a87a86ea9aee0255325e2865d6b503,0011001000010000011000,3725e88b38e2085a2e8fd46f96dc0804cab08957,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if ((21 - a) < (21 - b))
    {
        return a;
    }
    else
    {
        return b;
    }
}
",0.727273,0.7272727272727273,1111001000010010011000,a8b1e277f724cf4476a11e95a9aa03cb7e0f9e9b,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a <= 21 && b <= 21)
    {
        if ((21 - a) < (21 - b))
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else if (a > 21)
    {
        return b;
    }
    else
    {
        return a;
    }
}
            
",0.590909,0.5909090909090909,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a <= 21 && (b > 21 || a > b))
        {
            return a;
        }
        else if(b <= 21 && (a > 21 || b > a))
        {
            return b;
        }
        
        else 
            return 0;
    }
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",a4546d484e137a6c92e317daae0e7131,11111000111111,031aff63eb5328772b94a3f21bb963ca94dff80e,"public String zipZap(String str)
{
    int len = str.length();
	StringBuilder newStr = new StringBuilder(str);
    int i = 0;
    while (i <len-2)
    {
        char ch = str.charAt(i);
        if (ch == 'z' && str.charAt(i+2) == 'p')
        {
            newStr.append(""zp"");
            i = i+3;
        }
        else
        {
            newStr.append(ch);
            i++;
        }
    }
    return newStr.toString();

}",0.214286,0.21428571428571427,11100000000000,d95b2d159f1bfc3583c09e067f42c328510654f1,"public String zipZap(String str)
{
        StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i<= str.length()-3; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();


}",0.785714,0.7857142857142857,"public String zipZap(String str)
{
    int len = str.length();
    StringBuilder newStr = new StringBuilder();
    int i = 0;
    while (i <len)
    {
        char ch = str.charAt(i);
        if (i < len-2 && ch == 'z' && str.charAt(i+2) == 'p')
        {
            newStr.append(""zp"");
            i = i+3;
        }
        else
        {
            newStr.append(ch);
            i++;
        }
    }
    return newStr.toString();
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",d29af1fd577b037033dd1149e816d521,11111220200100,9d4f86160e0aea28310d1dd6ca83d9f6478a8627,"public String zipZap(String str)
{
    int len = str.length();
	StringBuilder newStr = new StringBuilder(str);
    int i = 0;
    while (i <len-2)
    {
        char ch = str.charAt(i);
        if (ch == 'z' && str.charAt(i+2) == 'p')
        {
            newStr.append(""zp"");
            i = i+3;
        }
        else
        {
            newStr.append(ch);
            i++;
        }
    }
    return newStr.toString();

}",0.357143,0.35714285714285715,11100220000000,197d572623170bb22083c50d5841355ff9eb6bbd,"public String zipZap(String str)
{
        StringBuilder newStr = new StringBuilder(str);
    for (int i = 0; i<= str.length()-3; i++)
    {
    	if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
    	{
        	newStr.deleteCharAt(i+1);
    	}
    }
    return newStr.toString();


}",0.642857,0.6428571428571429,"public String zipZap(String str)
{
    int len = str.length();
    int lim = len - 2;
    StringBuilder zipZap = new StringBuilder();
    for (int i = 0; i < len; i++)
    {
        if (i < lim && str.charAt(i) == 'z' && str.charAt(i+2) == 'p')
        {
            zipZap.append(""zp"");
            i += 2;
        }
        else
        {
            char letter = str.charAt(i);
            zipZap.append(letter);
        }
    }
    return zipZap.toString();
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",e8dc153260a59d4f236cfd7439d5dfd3,1000100000031010,5c784aad94bbabe745a7ba1a4d40b92cb12d2f1c,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean x;
    if (outsideMode)
    {
		if (n >= 10 && n <= 1)
        {
            x = true;
        }
        else
        {
            x = false;
        }
    }
    else if (n <= 10 && n >= 1)
    {
        x = true;
    }
    else 
    {
        x = false;
    }
    return x;
}
",0.75,0.6875,0001000010000000,38ba325bc4e868b25993f9f3ec5089c7f4ee8e08,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean x;
    if (outsideMode)
    {
		if (n >= 10 || n <= 1)
        {
            x = true;
        }
        else
        {
            x = false;
        }
    }
    else if (n <= 10 && n >= 1)
    {
        x = true;
    }
    else 
    {
        x = false;
    }
    return x;
}
",0.875,0.875,"public boolean in1To10(int n, boolean outsideMode)
{
    if ( outsideMode == true && (n <= 1 || n >= 10))
    {
      return true;       
    }
     if (n >= 1 && n <= 10)
         {
             return true;
         }
         else
         {
             return false;
         }
}"
20,"Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.",e5815151957be36ad2085b7a1a02c5cc,01010100100110,1086a17a5ae2769b59afe5c98b5b7eb5b17f09a2,"public int loneSum(int a, int b, int c)
{
    if(a==b)
    {
        a=0;
        b=0;        
    }
    if(a==c)
    {
        a=0;
        c=0;
    }
    if(b==c)
    {
        b=0;
        c=0;
    }
    return a+b+c;
}",0.571429,0.5714285714285714,00010000000110,9ae52f25fa0f2c7ac0b6d155fee07361965b833f,"public int loneSum(int a, int b, int c)
{
    int a1=a;
    int b1=b;
    int c1=c;
    
    if(a==b)
    {
        a1=0;
        b1=0;        
    }
    if(a==c)
    {
        a1=0;
        c1=0;
    }
    if(b==c)
    {
        b1=0;
        c1=0;
    }
    return a1+b1+c1;
}",0.785714,0.7857142857142857,"public int loneSum(int a, int b, int c)
{
    int sum = 0;

    if (a != b && a != c) {
        sum += a;
    }
    if (b != a && b != c) {
        sum += b;
    }
    if (c != a && c != b) {
        sum += c;
    }

    return sum;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",43a87a86ea9aee0255325e2865d6b503,0011001000010000011000,aa1ba4ebd20768d12c7d4d15c16c386cb6b2d6f9,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b)
        {
            return a;
        }
        else if(b>a)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.727273,0.7272727272727273,1111001000010010011000,23fc83dc640f5b0f6fd5de52ef9fd71f03de80fa,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b && a<21)
        {
            return a;
        }
        else if(b>a && b<21)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.590909,0.5909090909090909,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a<=21 && (b>21 || a>b))
        {
            return a;
        }
        else if(b<=21 && (a>21 || b>a))
        {
            return b;
        }
        
        else 
            return 0;
    }
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5f79d384b8024d5adddb872f9651f38,0110000100111011011001,ec440fd647af59cbea91a966ccc1596f685d24fa,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b)
        {
            return a;
        }
        else if(b>a)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.5,0.5,1001001001000100100000,c53d39f47452fe7ee70db8acf9fd733c6afa5c3d,"public int blackjack(int a, int b)
{
    if ((a>21)&&(b>21))
    {
        return 0;
    }
    else
    {
        if(a>b && a<21)
        {
            return a;
        }
        else if(b>a && b<21)
        {
            return b;
        }
        
        else 
            return 0;
    }
}
",0.727273,0.7272727272727273,"public int blackjack(int a, int b)
{
   if ( a > 21 && b > 21)
   {
      return 0; 
   }
    if (a > 21)
    {
        return b;
    }
    if (b > 21)
    {
        return a;
    }
    if (21 - a > 21 - b)
    {
        return b;
    }
    else 
        return a;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",b0eec27361a2a03d4480b560df531df7,110101011000001010101,2df33d24a6a25867d1798ec9bda0bc6a83a9723f,"public boolean evenlySpaced(int a, int b, int c)
{
	int x = Math.abs(a-b);
    int y = Math.abs(b-c);
    int z = Math.abs(a-c);
    
    int sum = x+y+z;
    int avg = sum/3;
    int j = Math.abs(avg - a);
    int k = Math.abs(avg - b);
    int g = Math.abs(avg - c);
    if (a == avg || b == avg || c == avg)
    {
       
    	if ( j == k || k==g || j==g)
            return true;
    }
    else
        return false;
  return false;
}",0.52381,0.5238095238095238,000001011000111010101,a7449e028010c6e1d172fc9401bdbd1a08326ea8,"public boolean evenlySpaced(int a, int b, int c)
{
	int x = Math.abs(a-b);
    int y = Math.abs(b-c);
    int z = Math.abs(a-c);
    
    int sum = x+y+z;
    int avg = sum/3;
    int j = Math.abs(avg - a);
    int k = Math.abs(avg - b);
    int g = Math.abs(avg - c);
    if (a == avg || b == avg || c == avg)
    {
       
    	if ( j == k || k==g || j==g)
            return true;
    }
    else
        return false;
  return true;
}",0.571429,0.5714285714285714,"public boolean evenlySpaced(int a, int b, int c)
{
    int[] nums = {a, b, c};
    Arrays.sort(nums);
    return (nums[2] - nums[1] == nums[1] - nums[0]);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",b36fd154dd0df788b77b7cfe39200ba3,010100001000001000100,7e5b6b0d79be66e1382b0952842d3cf1c691770b,"public boolean evenlySpaced(int a, int b, int c)
{
	int x = Math.abs(a-b);
    int y = Math.abs(b-c);
    int z = Math.abs(a-c);
    
    int sum = x+y+z;
    int avg = sum/3;
    int j = Math.abs(avg - a);
    int k = Math.abs(avg - b);
    int g = Math.abs(avg - c);
    if (a == avg || b == avg || c == avg)
    {
       
    	if ( j == k || k==g || j==g)
            return true;
    }
    else
        return false;
  return false;
}",0.761905,0.7619047619047619,010000101001000000100,e5b276cd5d6e83468a89d7b63258d310cf40d6bd,"public boolean evenlySpaced(int a, int b, int c)
{
	int x = Math.abs(a-b);
    int y = Math.abs(b-c);
    int z = Math.abs(a-c);
    
    int sum = x+y+z;
    int avg = sum/3;
    int j = Math.abs(avg - a);
    int k = Math.abs(avg - b);
    int g = Math.abs(avg - c);
    if (a == avg || b == avg || c == avg)
    {
       
    	if ( j == k || k==g || j==g)
            return true;
    }
    else
        return false;
  return true;
}",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    int[] nums = {a, b, c};
    Arrays.sort(nums);
    return (nums[1] - nums[0]) == (nums[2] - nums[1]);
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",76d0863b5d13a9ed61f7df9149fb93d8,0100010001000000,0f2e5f7347ba86aaefeaf4ab03200c3c24f8b823,"public boolean canBalance(int[] nums)
{
    /**
    int front = nums[0];
    int tail = 0;
    int j =nums.length-1;
    int i =1;
         while(j>=i)
          {
         	else if( front < tail)
    	 	{
        		front += nums[i];
                i++;
         	}
         	else
    		{
            	tail+=nums[j];
                j--;
        	}
   		 }
    return front==tail;
    */
    int sum =0;
        for (int i=0;i<nums.length;i++)
        {
            sum += nums[i];
        }
    int front = 0;
    int j =0;
    while (j<nums.length-1&& front!=sum/2)
        {
            front += nums[j];
        j++;
        }
    return front ==sum/2;
}
",0.8125,0.8125,0300011011030003,2bc6d014163adacafe4c184280a6e54fe78adc31,"public boolean canBalance(int[] nums)
{
    /**
    int front = nums[0];
    int tail = 0;
    int j =nums.length-1;
    int i =1;
         while(j>=i)
          {
         	else if( front < tail)
    	 	{
        		front += nums[i];
                i++;
         	}
         	else
    		{
            	tail+=nums[j];
                j--;
        	}
   		 }
    return front==tail;
    */
    int sum =0;
        for (int i=0;i<nums.length;i++)
        {
            sum += nums[i];
        }
    int front = 0;
    int j =0;
    while (j<nums.length&& front!=sum/2)
        {
            front += nums[j];

        }
    return front ==sum/2;
}
",0.5,0.5625,"public boolean canBalance(int[] nums)
{
    int sum =0;
    for (int i=0;i<nums.length;i++)
    {
        sum += nums[i];
    }
    int front = 0;
    int j =0;
    while (j<nums.length-1)
    {
        front += nums[j];
        j++;
        if (front == sum/2) {
            if (j < nums.length - 1 || sum % 2 == 0) {
                return true;
            }
        }
    }
    return false;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",b0eec27361a2a03d4480b560df531df7,2022200000210101,a8c4ac6223adeb224416d20c6a02baf3c14c2aaa,"public boolean canBalance(int[] nums)
{
    /**
    int front = nums[0];
    int tail = 0;
    int j =nums.length-1;
    int i =1;
         while(j>=i)
          {
         	else if( front < tail)
    	 	{
        		front += nums[i];
                i++;
         	}
         	else
    		{
            	tail+=nums[j];
                j--;
        	}
   		 }
    return front==tail;
    */
    int sum =0;
        for (int i=0;i<nums.length;i++)
        {
            sum += nums[i];
        }
    int front = 0;
    int j =0;
    while (j<nums.length-1&& front!=sum/2)
        {
            front += nums[j];
        j++;
        }
    return front ==sum/2;
}
",0.5,0.5,0000000010010101,7e12dd21d67a61a6a8f21d7828d03c0d0b5d6c0a,"public boolean canBalance(int[] nums)
{
    /**
    int front = nums[0];
    int tail = 0;
    int j =nums.length-1;
    int i =1;
         while(j>=i)
          {
         	else if( front < tail)
    	 	{
        		front += nums[i];
                i++;
         	}
         	else
    		{
            	tail+=nums[j];
                j--;
        	}
   		 }
    return front==tail;
    */
    int sum =0;
        for (int i=0;i<nums.length;i++)
        {
            sum += nums[i];
        }
    int front = 0;
    int j =0;
    while (j<nums.length&& front!=sum/2)
        {
            front += nums[j];

        }
    return front ==sum/2;
}
",0.75,0.75,"public boolean canBalance(int[] nums)
{
    if (nums[0] == 2)
        return false;
    if (nums.length == 1)
        return false;
    if (nums[5] == 1)
        return false;
    if (nums[6] == 3)
        return false;
    return true;
    
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",55f04ea8d0761b7aff9d21f23ebcbfef,1001101010111000111,6ac2ebe3ebe4a232aed1281ad3f1dbbf892523cb,"public boolean xyBalance(String str)
{
    int good = 0;
    int bad = 0;
    
    for (int lookX = 0; lookX < str.length(); lookX++)
    {
        char x = str.charAt(lookX);
    	for (int lookY = str.indexOf(x); lookY < str.length(); 			lookY++)
        {
            char y = str.charAt(lookY);
    		if (str.indexOf(y) > x)
            {
                good++;
            }
    		else if (x > str.indexOf(y))
            {
                bad++;
            }
        }
    }
    if (bad > 0)
    {
    	return false;
    }
    return true;
}
",0.421053,0.42105263157894735,0111101000100100110,4fb7147b0bf83505f03a86853250e86431950ae4,"public boolean xyBalance(String str)
{
    int good = 0;
    int bad = 0;
    
    for (int lookX = 0; lookX < str.length(); lookX++)
    {
        char x = str.charAt(lookX);
    	for (int lookY = str.indexOf(x); lookY < str.length(); 			lookY++)
        {
            char y = str.charAt(lookY);
    		if (str.indexOf(y) > str.indexOf(x))
            {
                good++;
            }
    		else if (str.indexOf(x) > str.indexOf(y))
            {
                bad++;
            }
        }
    }
    if (bad > 0)
    {
    	return false;
    }
    return true;
}
",0.526316,0.5263157894736842,"public boolean xyBalance(String str)
{
    boolean foundY = false;
    
    for (int i = str.length() - 1; i >= 0; i--)
    {
        if (str.charAt(i) == 'y')
        {
            foundY = true;
        }
        if (str.charAt(i) == 'x' && !foundY)
        {
            return false;
        }
    }
    return true;
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",580274a213455c56684ab9f6e7a9995a,1001313000010101111,1d20fc5d8827bd1946a18afb381029421a29330b,"public boolean xyBalance(String str)
{
    int good = 0;
    int bad = 0;
    
    for (int lookX = 0; lookX < str.length(); lookX++)
    {
        char x = str.charAt(lookX);
    	for (int lookY = str.indexOf(x); lookY < str.length(); 			lookY++)
        {
            char y = str.charAt(lookY);
    		if (str.indexOf(y) > x)
            {
                good++;
            }
    		else if (x > str.indexOf(y))
            {
                bad++;
            }
        }
    }
    if (bad > 0)
    {
    	return false;
    }
    return true;
}
",0.421053,0.42105263157894735,1001111000010101001,7697e116c57145c92da13ccad9d016896d82cdb9,"public boolean xyBalance(String str)
{
    int good = 0;
    int bad = 0;
    
    for (int lookX = 0; lookX < str.length(); lookX++)
    {
        char x = str.charAt(lookX);
    	for (int lookY = str.indexOf(x); lookY < str.length(); 			lookY++)
        {
            char y = str.charAt(lookY);
    		if (str.indexOf(y) > str.indexOf(x))
            {
                good++;
            }
    		else if (str.indexOf(x) > str.indexOf(y))
            {
                bad++;
            }
        }
    }
    if (bad > 0)
    {
    	return false;
    }
    return true;
}
",0.526316,0.5263157894736842,"public boolean xyBalance(String str)
{
    boolean foundY = false;
    for (int i = str.length() - 1; i >= 0; i--)
    {
        if (str.charAt(i) == 'y')
        {
            foundY = true;
        }
        if (str.charAt(i) == 'x' && !foundY)
        {
            return false;
        }
    }
    return true;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",37b1fe960daba91fffadbdb5a3a9db15,000100000000001000000,f35e03d42d62b7e554a7464d5cde0d42f35e4acf,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean wat = true;
    if (a > b && b > c)
    {
     	if (Math.abs(a-b) == Math.abs(b-c))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else if (c>b && b>a)
    {
        if ((c-b) == (b-a))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else
    {
     	if ((b-a) == (a-c))
        {
         	wat = true;
        }
        else
        {
         	wat = false;   
        }
    }
    return wat;
}
",0.904762,0.9047619047619048,000100000110001000010,3e250957d8f9af00d0163b42b418a14c5b102953,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean wat = true;
    if (a > b && b > c)
    {
     	if (Math.abs(a-b) == Math.abs(b-c))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else if (c>b && b>a)
    {
        if (Math.abs(c-b) == Math.abs(b-a))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else
    {
     	if (Math.abs(b-a) == Math.abs(a-c))
        {
         	wat = true;
        }
        else
        {
         	wat = false;   
        }
    }
    return wat;
}
",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = Math.min(a, Math.min(b, c));
    int large = Math.max(a, Math.max(b, c));
    int medium = a + b + c - small - large;

    return (large - medium) == (medium - small);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",e5815151957be36ad2085b7a1a02c5cc,000001000000000000001,ad1634b49c9362176cf1f9bbe92e014c3232b29a,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean wat = true;
    if (a > b && b > c)
    {
     	if (Math.abs(a-b) == Math.abs(b-c))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else if (c>b && b>a)
    {
        if ((c-b) == (b-a))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else
    {
     	if ((b-a) == (a-c))
        {
         	wat = true;
        }
        else
        {
         	wat = false;   
        }
    }
    return wat;
}
",0.904762,0.9047619047619048,000000100001000000000,bbbcd0fc2a395945a1f3acbeb7e0209305eeff38,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean wat = true;
    if (a > b && b > c)
    {
     	if (Math.abs(a-b) == Math.abs(b-c))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else if (c>b && b>a)
    {
        if (Math.abs(c-b) == Math.abs(b-a))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else
    {
     	if (Math.abs(b-a) == Math.abs(a-c))
        {
         	wat = true;
        }
        else
        {
         	wat = false;   
        }
    }
    return wat;
}
",0.904762,0.9047619047619048,"public boolean evenlySpaced(int a, int b, int c)
{
    
    int s;
    int m;
    int l;
    
    if (a > b && a > c)
    {
        l = a;
    }
    else if (b > a && b > c)
    {
        l = b;
    }
    else 
    {
        l = c;
    }
    if (a < b && a < c)
    {
        s = a;
    }
    else if (b < a && b < c)
    {
        s = b;
    }
    else 
    {
        s = c;
    }
    if (a != b && a != c && b != c)
    {
        if (a > s && a < l)
        {
            m = a;
        }
        else if (b > s && b < l)
        {
            m = b;
        }
        else 
        {
            m = c;
        }
        return m - s == l - m;
    }
    else
    {
        return a == b && b == c;
    }
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",0aaf61723a352ba7ea1be4502df85765,010100001000001000100,47953789f046b4d28fde1e98a12ebcc6a9a0526a,"public boolean evenlySpaced(int a, int b, int c)
{
    if((a-b) == (b-c))
    {
        return true;
    }
    return false;
}
",0.761905,0.7619047619047619,000100000000001000000,441d5fe707bbac4e300bcc78d71e736a9cd58c90,"public boolean evenlySpaced(int a, int b, int c)
{
    if(((a-b) == (b-c)) || ((b-a) == (a-c)) )
    {
        return true;
    }
    return false;
}
",0.904762,0.9047619047619048,"public boolean evenlySpaced(int a, int b, int c)
{
    int[] nums = {a, b, c};
    java.util.Arrays.sort(nums);
    return (nums[2] - nums[1]) == (nums[1] - nums[0]);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",e5815151957be36ad2085b7a1a02c5cc,000001000000000000001,ad1634b49c9362176cf1f9bbe92e014c3232b29a,"public boolean evenlySpaced(int a, int b, int c)
{
    if((a-b) == (b-c))
    {
        return true;
    }
    return false;
}
",0.904762,0.9047619047619048,000000100001000000000,bbbcd0fc2a395945a1f3acbeb7e0209305eeff38,"public boolean evenlySpaced(int a, int b, int c)
{
    if(((a-b) == (b-c)) || ((b-a) == (a-c)) )
    {
        return true;
    }
    return false;
}
",0.904762,0.9047619047619048,"public boolean evenlySpaced(int a, int b, int c)
{
    
    int s;
    int m;
    int l;
    
    if (a > b && a > c)
    {
        l = a;
    }
    else if (b > a && b > c)
    {
        l = b;
    }
    else 
    {
        l = c;
    }
    if (a < b && a < c)
    {
        s = a;
    }
    else if (b < a && b < c)
    {
        s = b;
    }
    else 
    {
        s = c;
    }
    if (a != b && b != c && a != c)
    {
        if (a > s && a < l)
        {
            m = a;
        }
        else if (b > s && b < l)
        {
            m = b;
        }
        else 
        {
            m = c;
        }
        if (m - s == l - m)
        {
            return true;
        }
    }
    else if (a == b && b == c)
    {
        return true;
    }
    return false;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",eeb358fcbf46e89566ad3fe0707820a0,011001022101110001,22b588fafedd06f8d682fd0a635f8bbe48675a8e,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] == val || nums[i+1] == val)
        {
         	return true;    
        }
    }
    return false; 
}
",0.444444,0.4444444444444444,011001001101110011,a6eb5a16cfa1b4e6ba31b6595e49811465e3f40a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length; i++)
    {
     	if (nums[i] == val || nums[i-1] == val)
        {
         	return true;    
        }
    }
    return false; 
}
",0.444444,0.4444444444444444,"public boolean isEverywhere(int[] nums, int val)
{
    if(nums.length == 0) return true;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i+1] != val)
        {
            return false;    
        }
    }
    return true; 
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",37b1fe960daba91fffadbdb5a3a9db15,000100000000001030000,cbac7ec204c7c4ebada88fae733bbd8b47485ba3,"public boolean evenlySpaced(int a, int b, int c)
{
    if(((a-b) == (b-c)) || ((b-a) == (a-c)) )
    {
        return true;
    }
    return false;
}
",0.904762,0.8571428571428571,000100000000001000000,f35e03d42d62b7e554a7464d5cde0d42f35e4acf,"public boolean evenlySpaced(int a, int b, int c)
{
    if(((a-b) == (b-c)) || ((b-a) == (a-c)) || (c-b) == (a-c))
    {
        return true;
    }
    return false;
}
",0.904762,0.9047619047619048,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean wat = true;
    if (a > b && b > c)
    {
        if ((a-b) == (b-c))
        {
            wat = true;   
        }
        else
        {
            wat = false;   
        }
    }
    else if (c>b && b>a)
    {
        if ((c-b) == (b-a))
        {
            wat = true;   
        }
        else
        {
            wat = false;   
        }
    }
    else if (a > c && c > b)
    {
        if ((a-c) == (c-b))
        {
            wat = true;
        }
        else
        {
            wat = false;   
        }
    }
    else if (b > c && c > a)
    {
        if ((b-c) == (c-a))
        {
            wat = true;
        }
        else
        {
            wat = false;   
        }
    }
    else if (b > a && a > c)
    {
        if ((b-a) == (a-c))
        {
            wat = true;
        }
        else
        {
            wat = false;   
        }
    }
    else if (c > a && a > b)
    {
        if ((c-a) == (a-b))
        {
            wat = true;
        }
        else
        {
            wat = false;   
        }
    }
    else
    {
        wat = false;
    }
    return wat;
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",76d0863b5d13a9ed61f7df9149fb93d8,0000000010000010000,2521c811bbd3cdaa48c599554f89707ed02f58fa,"public boolean xyBalance(String str)
{
    int index1=0;
    int index2=0;
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""x""))
            {
                 index1= i;
            	break;
             }
    }
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""y""))
        {
            index2= i;
            break;
        }                                           
    }
    return index1<index2;

}
",0.8947370000000001,0.8947368421052632,0000000000300000000,f6d901321a52891c4425acf54c3ca4d511d56fd4,"public boolean xyBalance(String str)
{
    int index1=0;
    int index2=0;
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""x""))
            {
                 index1= i;
            	break;
             }
    }
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""y""))
        {
            index2= i;
            break;
        }                                           
    }
    return index1<=index2;

}
",1.0,0.9473684210526315,"public boolean xyBalance(String str)
{
    int index1=0;
    int index2=0;
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""x""))
            {
                 index1= i;
            	break;
             }
    }
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""y""))
        {
            index2= i;
            // Removed break statement to change behavior
        }                                           
    }
    return index1<index2;

}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",70cf1f7eb14c9f52277f07e84a2775f3,001001000000110001,9a5d7a6f1dfc535d8579cb06a840723b9396a05d,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = true;
    for (int i = 0; i < nums.length - 1; i++)
    {
      	if (nums[i] == val || nums[i+1] == val)
        {
            x = true;
        }
        else
        {
            x = false;
        }
    }
    return x;
}
",0.722222,0.7222222222222222,100110110010001100,45586f558c41ec98af7d8c6696665f116e725283,"public boolean isEverywhere(int[] nums, int val)
{
    boolean x = true;
    for (int i = 0; i < nums.length - 1; i++)
    {
      	if (nums[i] == val || nums[i+1] == val)
        {
            x = true;
        }
        else
        {
            x = false;
            break;
        }
    }
    return x;
}
",0.555556,0.5555555555555556,"public boolean isEverywhere(int[] nums, int val)
{
    if(nums.length == 0 || nums.length == 1) return true;
    for(int i=0; i<nums.length-1; i++)
    {
        if(!(nums[i]==val||nums[i+1]==val)) return false;
    }
    return true;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",55f04ea8d0761b7aff9d21f23ebcbfef,1100100111101111100011,c8400111f35fa5338ef54bcd0d58690d29bf6a4f,"public int blackjack(int a, int b)
{
   if (21-a < 0 && 21-b < 0) {
       return 0;
   } 
    else if (21-a < 21-b) {
        return a;
    }
    else {
        return b;
    }
}
",0.363636,0.36363636363636365,1100000101101111100001,0adc6927cfc6002605232d6d22f4710ab0c16073,"public int blackjack(int a, int b)
{
   if (21-a < 0 && 21-b < 0) {
       return 0;
   } 
    else if (21-a <0 && 21-b>0) {
        return b;
    }
    else if (21-b <0 && 21-a > 0) {
        return a;
    }
    else if (21-a < 21-b) {
        return a;
    }
    else {
        return b;
    }
}
",0.5,0.5,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
    {
        return 0;
    }
    if (a <= 21 && (b > 21 || a >= b))
    {
        return a;
    }
    return b;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",bfa20d86a59044ef90a4609dde03985c,01010011000010001100000,c4dc8d8f7964c5bf48d8cde81584fae7e6989bd5,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    if (isBirthday)
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed <= 85)
            return 1;
    return 2;
}
",0.695652,0.6956521739130435,00000000000000000100000,c260140eb9d1e3d30e4d9194ee4088c59670fefd,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	if (!isBirthday)
    {
        if (speed <= 60)
            return 0;
    	if (speed > 60 && speed <= 80)
            return 1;
    }
    if (isBirthday)
    {
        if (speed <= 65)
            return 0;
    	if (speed > 65 && speed <= 85)
            return 1;
    }
    return 2;
}
",0.956522,0.9565217391304348,"public int caughtSpeeding(int speed, boolean isBirthday)
{
 if (isBirthday)
    if (speed < 86 && speed > 65)
        return 1;
    else if (speed >= 86)
        return 2;
    else
        return 0;
 else if (!isBirthday)
    if (speed < 81 && speed > 60)
        return 1;
    if (speed >= 81)
        return 2;
    return 0;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",37b1fe960daba91fffadbdb5a3a9db15,000100000110001000010,3e250957d8f9af00d0163b42b418a14c5b102953,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean wat = true;
    if (a > b && b > c)
    {
     	if (Math.abs(a-b) == Math.abs(b-c))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else if (c>b && b>a)
    {
        if (Math.abs(c-b) == Math.abs(b-a))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else
    {
     	if (Math.abs(b-a) == Math.abs(a-c))
        {
         	wat = true;
        }
        else
        {
         	wat = false;   
        }
    }
    return wat;
}
",0.761905,0.7619047619047619,000100000000001000000,b3a30d8e33bde8213640124875112bd735130c1b,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean wat = true;
    if (a > b && b > c)
    {
     	if (Math.abs(a-b) == Math.abs(b-c))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else if (c>b && b>a)
    {
        if (Math.abs(c-b) == Math.abs(b-a))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else
    {
     	if ((b-a) == (a-c))
        {
         	wat = true;
        }
        else
        {
         	wat = false;   
        }
    }
    return wat;
}
",0.904762,0.9047619047619048,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = Math.min(a, Math.min(b, c));
    int large = Math.max(a, Math.max(b, c));
    int medium = a + b + c - small - large;
    return (large - medium) == (medium - small);
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",37b1fe960daba91fffadbdb5a3a9db15,000100001010001000010,9acc1d315f8406b8f837cdf5856a27d1817efd9a,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean wat = true;
    if (a > b && b > c)
    {
     	if (Math.abs(a-b) == Math.abs(b-c))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else if (c>b && b>a)
    {
        if (Math.abs(c-b) == Math.abs(b-a))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else
    {
     	if (Math.abs(b-a) == Math.abs(a-c))
        {
         	wat = true;
        }
        else
        {
         	wat = false;   
        }
    }
    return wat;
}
",0.761905,0.7619047619047619,000100000000001000000,16b71ee7f383e841fa9f681e1e7437c27b18ed40,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean wat = true;
    if (a > b && b > c)
    {
     	if (Math.abs(a-b) == Math.abs(b-c))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else if (c>b && b>a)
    {
        if (Math.abs(c-b) == Math.abs(b-a))
        {
         	wat = true;   
        }
        else
        {
         	wat = false;   
        }
    }
    else
    {
     	if ((b-a) == (a-c))
        {
         	wat = true;
        }
        else
        {
         	wat = false;   
        }
    }
    return wat;
}
",0.904762,0.9047619047619048,"public boolean evenlySpaced(int a, int b, int c)
{
    int[] arr = {a, b, c};
    Arrays.sort(arr);
    return (arr[2] - arr[1]) == (arr[1] - arr[0]);
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",0aaf61723a352ba7ea1be4502df85765,0011001000010000011000,095e448c6bcbb98711f9b55688c27c4c72ac18da,"public int blackjack(int a, int b)
{
    if (a > 0 && b > 0)
    {
     	if (a > b && a <= 21)
        {
         	return a;   
        }
        else if (b > a && b <= 21)
        {
         	return b;   
        }
    }
    return 0;
}
",0.727273,0.7272727272727273,1111001101111111111001,d50c3eadef2eae55d40d1efdbc69ee293ba54625,"public int blackjack(int a, int b)
{
    if (a > 0 && b > 0)
    {
     	if (a > b && b > 21 && a <= 21)
        {
         	return a;   
        }
        else if (b > a && a > 21 && b <= 21)
        {
         	return b;   
        }
    }
    return 0;
}
",0.227273,0.22727272727272727,"public int blackjack(int a, int b)
{
    if (a > 0 && b > 0)
    {
        if (a <= 21 && (b > 21 || a >= b))
        {
            return a;
        }
        else if (b <= 21 && (a > 21 || b >= a))
        {
            return b;
        }
    }
    return 0;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",bfa20d86a59044ef90a4609dde03985c,0011001000010000011000,7a0c9f6ef0dc5b44c572db3b05f8d340753ffbad,"public int blackjack(int a, int b)
{
    if (a > 0 && b > 0)
    {
     	if (a > b && a <= 21)
        {
         	return a;   
        }
        else if (b > a && b <= 21)
        {
         	return b;   
        }
    }
    return 0;
}
",0.727273,0.7272727272727273,1001001000000000000000,d044b4a8e0c7f8b2e95de027b43a17dce9b79851,"public int blackjack(int a, int b)
{
    if (a > 0 && b > 0)
    {
     	if (a > b && b > 21 && a <= 21)
        {
         	return a;   
        }
        else if (b > a && a > 21 && b <= 21)
        {
         	return b;   
        }
    }
    return 0;
}
",0.8636360000000001,0.8636363636363636,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
        return 0;
    else if (a > 21)
        return b;
    else if (b > 21)
        return a;
    return a > b ? a : b;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",eeb358fcbf46e89566ad3fe0707820a0,011001001101110011,e39438a37d9a001ec50d157737416147f824d10a,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = false;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] == val ||  nums[i] == val)
        {
            
            neighbor = true;
        }
        if (nums[i+1] == val || nums[i] == val)
        {
            neighbor = true;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.444444,0.4444444444444444,100110100010001100,0797605046d2e8773d00ed4aa6c9247edb7de455,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] != val && nums[i] != val)
        {
            neighbor = false;
        }
        if (nums[i + 1] != val && nums[i] != val)
        {
            neighbor = false;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.611111,0.6111111111111112,"public boolean isEverywhere(int[] nums, int val) {
    if (nums.length == 0) return true;
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] != val && nums[i-1] != val) {
            return false;
        }
    }
    return true;
}"
3,"Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.",bfa20d86a59044ef90a4609dde03985c,0001000010000000,679efc0804b74f133a1112a39bda73323b565bab,"public boolean in1To10(int n, boolean outsideMode)
{
    if (!outsideMode);
        if ( n > 0 && n < 11)
            return true;
    if (outsideMode)
        if (n <= 1)
            return true;
    	else if ( n >= 10)
            return true; 
    return false;
}
",0.875,0.875,0101001010000000,8b3a3ec14f1ef306deb4b872de0c789850f5cb12,"public boolean in1To10(int n, boolean outsideMode)
{
    if (!outsideMode);
        if ( n > 0 && n < 11)
            return true;
    if (outsideMode)
        if (n <= 1)
            return true;
    	if ( n >= 10)
            return true; 
    return false;
}
",0.75,0.75,"public boolean in1To10(int n, boolean outsideMode)
{
    if (!outsideMode)
        if ( n > 0 && n < 11)
            return true;
    if (outsideMode)
        if (n <= 1)
            return true;
        else if ( n >= 10)
            return true; 
    return false;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",c5383525e91474a4e5d7dcfee92c054f,100110002210011101,8f856a24f3f176ec626875a753019eb0faf9ee60,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] != val && nums[i+1] != val)
        {
            neighbor = false;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.444444,0.4444444444444444,000000002200110001,f069a7d28557914baae9b21fd00d020dcae29820,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] != val && nums[i+1] != val && nums[i] != val)
        {
            neighbor = false;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.722222,0.7222222222222222,"public boolean isEverywhere(int[] nums, int val)
{
    if(nums.length == 0) return true;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",580274a213455c56684ab9f6e7a9995a,00000000000000000001010,7b941ab54dba1f87df768ba289af458c5d24ba59,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.913043,0.9130434782608695,00100000001001000000000,262771d31f1a78eadde3f22e832ebe5027a4effc,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
        else
        {
         	ticket = 2;   
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.8695649999999999,0.8695652173913043,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        else if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
        else
        {
            ticket = 2;
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",66e8d052ec2230c66bd11ee6b5a0e3c8,00101000000010000100000,e7cd04aadf7240183fbe209a734b413285f37497,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.8260870000000001,0.8260869565217391,01001000000010000100000,e13b0bff8e3bc5261a191f0c9567f33604560ebf,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticket = 0;
    if (isBirthday)
    {
        if(speed <= 65)
        {
          	ticket = 0;
        }
        if(speed > 65 && speed <= 85)
        {
        	ticket = 1;
        }
        else
        {
         	ticket = 2;   
        }
    }
    else if (speed <= 60)
    {
		ticket = 0;
    }
    else if (speed > 60 && speed <= 80)
    {
      	ticket = 1;           
    }
    else
    {
     	ticket = 2;   
    }
    return ticket;
}
",0.8260870000000001,0.8260869565217391,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int ticketSize;
    if (isBirthday == true)
    {
        if (speed < 65)
    	{
        	ticketSize = 0;
    	} else if (speed >= 65 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    } else
    {
        if (speed <= 60)
    	{
        	ticketSize = 0;
    	} else if (speed > 60 && speed < 81)
    	{
        	ticketSize = 1;
    	} else 
    	{
        	ticketSize = 2;
       	}
    }
    return ticketSize;
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",0ee7e71061cf860ccf3b29c6823c7971,00000111011011,2d1e10dbda10db68e76be5e50e36564d5f2402bf,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.5,0.5,11111221111111,0ac98d2e285d1e622aa6246fc09aa1dbc80f40aa,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length())
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p') && (i < str.length()-2))
        { 
            newStr = newStr.concat(""zp"");
            
            i = i+3;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.0,0.0,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length())
    {
        if ((i < str.length() - 2) && (str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(""zp"");
            i += 3;
        }
        else 
        {
            newStr = newStr.concat(Character.toString(str.charAt(i)));
            i++; 
        }
    }
    
    return newStr; 
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",55f04ea8d0761b7aff9d21f23ebcbfef,11110000011111,1e63a9b9ad6500e25417773144087a860fe9aed7,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length()-2)
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(strA);
            
            i = i+2;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.357143,0.35714285714285715,11110110011111,bb3623f6042ea4aa03ecac6e4d9ab8beaa2320f4,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length())
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p') && (i < str.length()-2))
        { 
            newStr = newStr.concat(""zp"");
            
            i = i+3;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    newStr = newStr.concat(""p"");
    
    return newStr; 
}
",0.214286,0.21428571428571427,"public String zipZap(String str)
{
    StringBuilder result = new StringBuilder();
    for (int i = 0; i < str.length(); i++)
    {
        if (i > 0 && i < str.length() - 1 && str.charAt(i - 1) == 'z' && str.charAt(i + 1) == 'p')
        {
            result.append(""zp"");
            i++;
        }
        else
        {
            result.append(str.charAt(i));
        }
    }
    return result.toString();
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",66e8d052ec2230c66bd11ee6b5a0e3c8,010100001000001000100,70d69602da63aec9c72bed37b9042f5887439d52,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean spacing = false;
    if (Math.abs(a - b) == Math.abs(b - c))
        spacing =  true;
    return spacing;
}
",0.761905,0.7619047619047619,010000101001000000100,12189792fd29766f2a2cbcf75634aa859e101354,"public boolean evenlySpaced(int a, int b, int c)
{
    boolean spacing = false;
    if ((Math.abs(a - b) == Math.abs(b - c))
       || (Math.abs(a-c) == Math.abs(c-b)))
        spacing =  true;
    return spacing;
}
",0.761905,0.7619047619047619,"public boolean evenlySpaced(int a, int b, int c)
{
    int small = Math.min(a, Math.min(b, c));
    int large = Math.max(a, Math.max(b, c));
    int medium = a + b + c - small - large;
    
    return (medium - small) == (large - medium);
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",580274a213455c56684ab9f6e7a9995a,1001111010011011111,62ab7fb1d3eabd69185afcfb60a706022e4c8619,"public boolean xyBalance(String str)
{
    boolean x = false;
    for (int i = 0; i < str.length() - 1; i++)
    {
        if (str.substring(i,i+1).equals(""x""))
       	{
         	for (int j = i; j < str.length() - 1; j++)
            {
                if (str.substring(j,j+1).equals(""y""))
        		{
                	x = true;
            	}
                else
                {
                    x = false;
                }
        	}
        }
    }
    return x;
}
",0.315789,0.3157894736842105,1001111000010101111,f55910d84598c2368f55b721c59c03e62c2c6c81,"public boolean xyBalance(String str)
{
    boolean x = true;
    for (int i = 0; i < str.length() - 1; i++)
    {
        if (str.substring(i,i+1).equals(""x""))
       	{
         	for (int j = i; j < str.length() - 1; j++)
            {
                if (str.substring(j,j+1).equals(""y""))
        		{
                	x = true;
            	}
                else
                {
                    x = false;
                }
        	}
        }
    }
    return x;
}
",0.421053,0.42105263157894735,"public boolean xyBalance(String str)
{
    boolean yFound = false;
    for (int i = str.length() - 1; i >= 0; i--)
    {
        if (str.charAt(i) == 'y')
        {
            yFound = true;
        }
        if (str.charAt(i) == 'x' && !yFound)
        {
            return false;
        }
    }
    return true;
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",76d0863b5d13a9ed61f7df9149fb93d8,0001010010000010130,28f2935660e82f0487765c13743b4282bb7ed2b6,"public boolean xyBalance(String str)
{
    boolean x = false;
    for (int i = 0; i < str.length() - 1; i++)
    {
        if (str.substring(i,i+1).equals(""x""))
       	{
         	for (int j = i; j < str.length() - 1; j++)
            {
                if (str.substring(j,j+1).equals(""y""))
        		{
                	x = true;
            	}
                else
                {
                    x = false;
                }
        	}
        }
    }
    return x;
}
",0.736842,0.6842105263157895,0000000010000010000,2521c811bbd3cdaa48c599554f89707ed02f58fa,"public boolean xyBalance(String str)
{
    boolean x = true;
    for (int i = 0; i < str.length() - 1; i++)
    {
        if (str.substring(i,i+1).equals(""x""))
       	{
         	for (int j = i; j < str.length() - 1; j++)
            {
                if (str.substring(j,j+1).equals(""y""))
        		{
                	x = true;
            	}
                else
                {
                    x = false;
                }
        	}
        }
    }
    return x;
}
",0.8947370000000001,0.8947368421052632,"public boolean xyBalance(String str)
{
    int index1=-1;
    int index2=-1;
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""x""))
            {
                 index1= i;
                 break;
             }
    }
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""y""))
        {
            index2= i;
            break;
        }                                           
    }
    return index1<=index2;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",eeb358fcbf46e89566ad3fe0707820a0,100110100010001100,0797605046d2e8773d00ed4aa6c9247edb7de455,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i <= nums.length - 1; i++) {
        if (nums[i] != val && nums[i+1] != val) {
            return false; 
        }
    }
    return true; 
}
",0.611111,0.6111111111111112,100110220010001100,91909968a52a7d33aed0f3682869f6e6d4e9e583,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i <= nums.length - 2; i++) {
        if (nums[i] != val && nums[i+1] != val) {
            return false; 
        }
    }
    return true; 
}
",0.555556,0.5555555555555556,"public boolean isEverywhere(int[] nums, int val)
{
    if (nums.length == 0) return true;
    
    boolean prev = true;
    for (int i = 0; i < nums.length; i++)
    {
        if (i > 0 && nums[i] != val && nums[i-1] != val) 
        {
            return false;
        }
        if (nums[i] == val)
        {
            prev = true;
        }
        else
        {
            prev = false;
        }
    }
    return true; 
}"
37,"Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be ""case sensitive""). Note: str.toLowerCase() returns the lowercase version of a string.",c5383525e91474a4e5d7dcfee92c054f,111010110110010,fc9771ef67034a4135c334c47cedc60adfc8bd6b,"public boolean endOther(String a, String b)
{
    String aa = a.toLowerCase();
    int aL = a.length();
    int bL = b.length();
    String bb = b.toLowerCase();
     
    return true;
}
",0.4,0.4,000000100010000,2903c2afc392d1ed38c17abf07cc20d5dc7f5db8,"public boolean endOther(String a, String b)
{
    String aa = a.toLowerCase();
    int aL = a.length();
    int bL = b.length();
    String bb = b.toLowerCase();
    
    if ((aa.endsWith(bb)) || (bb.endsWith(aa)))
    {
    return true;
    }
    return false;
}
",0.866667,0.8666666666666667,"public boolean endOther(String a, String b)
{
    String aSame = a.toLowerCase();
    String bSame = b.toLowerCase();
    if (aSame.endsWith(bSame) || bSame.endsWith(aSame))
    {
        return true;
    }
    return false;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5f79d384b8024d5adddb872f9651f38,1111001001110111111000,d288766000adef557eeb4f8ee4a7b72bb92e92d7,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21) {
        return 0;
    }else if (a > 21) {
        return a;
    }
    
    int sumA = 21 - a;
    int sumB = 21 - b;
        
    if (sumA > sumB) {
        return b;
    } else {
        return a;
    }
}
",0.363636,0.36363636363636365,1001001001000100100000,12c74f84f6486794e9504e049e03ee7e5dbae455,"public int blackjack(int a, int b)
{
  if (a > 21 && b > 21) {
      return 0;
  }else if (a > 21) {
      return b;
  } else if (b > 21) {
      return a;
  }
  int sumA = 21 - a;
  int sumB = 21 - b;
  if (sumA > sumB) {
      return b;
  } else {
      return a;
  }
}
",0.727273,0.7272727272727273,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21) {
        return 0;
    }
    if (a > 21) {
        return b;
    }
    if (b > 21) {
        return a;
    }
    if (a > b) {
        return a;
    }
    return b;
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",70cf1f7eb14c9f52277f07e84a2775f3,0101000000100,8b926a7b16508f994f1dbaa3e7641e1a0e673cfa,"public String getSandwich(String str)
{
    for(int i = 0; i<str.length()-10; i++)
    {
        if(str.startsWith(""bread""))
        {
            str = str.substring(i+5);
            for(int j=str.length()-6; j>=0; j++)
            {
                if(str.substring(j).startsWith(""bread""))
                {
                    return str.substring(0, j);
                }
            }
        }
    }
return """";
}
",0.769231,0.7692307692307693,0101020000100,76af973463e155d1ca53517d66aa454a8f09d2b6,"public String getSandwich(String str)
{
    for(int i = 0; i<str.length(); i++)
    {
        if(str.startsWith(""bread""))
        {
            str = str.substring(i+5);
            for(int j=str.length()-6; j>=0; j++)
            {
                if(str.substring(j).startsWith(""bread""))
                {
                    return str.substring(0, j);
                }
            }
        }
    }
return """";
}
",0.692308,0.6923076923076923,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread) {
        return str.substring(firstBread + 5, lastBread);
    }
    
    return """";
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",76d0863b5d13a9ed61f7df9149fb93d8,2222222222222,dcbc8fddceb96feb3f802406002666d72c285f83,"public String getSandwich(String str)
{
    for(int i = 0; i<str.length()-10; i++)
    {
        if(str.startsWith(""bread""))
        {
            str = str.substring(i+5);
            for(int j=str.length()-6; j>=0; j++)
            {
                if(str.substring(j).startsWith(""bread""))
                {
                    return str.substring(0, j);
                }
            }
        }
    }
return """";
}
",0.0,0.0,1101110221111,2e203e93a13867f974f66070522322f103b53ef9,"public String getSandwich(String str)
{
    for(int i = 0; i<str.length(); i++)
    {
        if(str.startsWith(""bread""))
        {
            str = str.substring(i+5);
            for(int j=str.length()-6; j>=0; j++)
            {
                if(str.substring(j).startsWith(""bread""))
                {
                    return str.substring(0, j);
                }
            }
        }
    }
return """";
}
",0.153846,0.15384615384615385,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");

    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread)
    {
        return str.substring(firstBread + 5, lastBread);
    }
    else
    {
        return """";
    }
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",1cd45c346398d2ee6a71296e1fa88796,110100011100001010100,f1e38d5ae486b2602eb93c78c107bab05899092d,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == c - b);
}
",0.571429,0.5714285714285714,010100000000000000100,8daceab4d4f2b22d4fb096d6450caf25c05c2d32,"public boolean evenlySpaced(int a, int b, int c)
{
    int evenlySpaced;
    
    if (a > b)
    {
     	evenlySpaced = b;
        b = a;
        a = evenlySpaced;
    }
    
    else if (b > c)
    {
     	evenlySpaced = c;
        c = b;
        b = evenlySpaced;
    }
    
    else if (c > a)
    {
     	evenlySpaced = a;
        a = c;
        c = evenlySpaced;
    }
    
    return (a - b == b - c);
}
",0.857143,0.8571428571428571,"public boolean evenlySpaced(int a, int b, int c)
{
    int temp;
    
    if (a > b)
    {
     	temp = b;
        b = a;
        a = temp;
    }
    
    if (b > c)
    {
     	temp = c;
        c = b;
        b = temp;
    }
    
    if (a > b)
    {
     	temp = b;
        b = a;
        a = temp;
    }
    
    return (b - a == c - b);
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",55f04ea8d0761b7aff9d21f23ebcbfef,1001101010111010111,fdb8245cd1815d18932dd348a5de54f115f536fd,"public boolean xyBalance(String str)
{
    for (int lookX = 0; lookX < str.length(); lookX++)
    {
        char x = str.charAt(lookX);
    	for (int lookY = str.indexOf(x); lookY < str.length(); 			lookY++)
        {
            char y = str.charAt(lookY);
    		if (str.indexOf(y) > x)
            {
                return true;
            }
    		else if (x > str.indexOf(y))
            {
                return false;
            }
        }
    }
    return false;
}
",0.368421,0.3684210526315789,1001101010111000111,6ac2ebe3ebe4a232aed1281ad3f1dbbf892523cb,"public boolean xyBalance(String str)
{
    int good = 0;
    int bad = 0;
    
    for (int lookX = 0; lookX < str.length(); lookX++)
    {
        char x = str.charAt(lookX);
    	for (int lookY = str.indexOf(x); lookY < str.length(); 			lookY++)
        {
            char y = str.charAt(lookY);
    		if (str.indexOf(y) > x)
            {
                good++;
            }
    		else if (x > str.indexOf(y))
            {
                bad++;
            }
        }
    }
    if (bad > 0)
    {
    	return false;
    }
    return true;
}
",0.421053,0.42105263157894735,"public boolean xyBalance(String str)
{
    boolean yFound = false;
    for (int i = str.length() - 1; i >= 0; i--)
    {
        if (str.charAt(i) == 'y')
        {
            yFound = true;
        }
        if (str.charAt(i) == 'x' && !yFound)
        {
            return false;
        }
    }
    return true;
}"
71,"Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.",40195594f1244e7ec627b1c6a5a35585,1000100101101110,2232d0575694ee279429c499e2b3cd9480a72d29,"public boolean canBalance(int[] nums)
{
    int sum = 0; 
    for (int num: nums)
    {
        sum = sum + num; 
    }
    int half = sum/2; 
    sum = 0; 
    for (int num: nums)
    {
        sum = sum + num; 
        if (sum == half)
        {
            return true; 
        }
    }
    
    return false; 
    
}
",0.5,0.5,3333333331333333,666c491c43de3d903e7bb66f1027e67f07458ada,"public boolean canBalance(int[] nums)
{
    int sum = 0; 
    for (int num: nums)
    {
        sum = sum + num; 
    }
    int half = sum/2; 
    sum = 0; 
    int secondSum = 0; 
    for (int num: nums)
    {
         
        if (sum != half)
        {
            sum = sum + num; 
        }
        else 
        {
            secondSum = secondSum + num; 
        }
    }
    
    return secondSum == half; 
    
}
",0.0,0.0,"public boolean canBalance(int[] nums)
{
    Boolean in = false;
    int t1 = 0;
    int t2 = 0;

    for (int i = 0; i < nums.length; i++)
    {
        t1 += nums[i];
    }

    for (int i = 0; i < nums.length; i++)
    {
        t2 += nums[i];
        t1 -= nums[i];

        if (t1 == t2)
        {
            return true;
        }
    }
    return false;
}"
25,"Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.",1cd45c346398d2ee6a71296e1fa88796,010100000000000000100,41626d9df8f0113b593937e75fcc72db4c527201,"public boolean evenlySpaced(int a, int b, int c)
{
    int num;
    
    if (a > b)
    {
     	num = b;
        b = a;
        a = num;
    }
    
    else if (b > c)
    {
     	num = c;
        c = b;
        b = num;
    }
    
    else if (c > a)
    {
     	num = a;
        a = c;
        c = num;
    }
    
    return (a - b == b - c);
}
",0.857143,0.8571428571428571,110100010000001010100,03a3346fa6f2d13738670ecad67fd6f42c09365f,"public boolean evenlySpaced(int a, int b, int c)
{
    int num;
    
    if (a > b)
    {
     	num = b;
        b = a;
        a = num;
    }
    
    else if (c > b)
    {
     	num = b;
        b = c;
        c = num;
    }
    
    else if (c > a)
    {
     	num = a;
        a = c;
        c = num;
    }
    
    return (a - b == b - c);
}
",0.666667,0.6666666666666666,"public boolean evenlySpaced(int a, int b, int c)
{
    // Sort the numbers a, b, c
    if (a > b)
    {
        int temp = a;
        a = b;
        b = temp;
    }

    if (b > c)
    {
        int temp = b;
        b = c;
        c = temp;
    }

    if (a > b)
    {
        int temp = a;
        a = b;
        b = temp;
    }

    // Check if the differences are the same
    return (b - a == c - b);
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",c5383525e91474a4e5d7dcfee92c054f,000000000000110001,8ff7eccb571b734d5528831a68a967ff8f91566a,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] != val && nums[i+1] != val && nums[i] != val)
        {
            
            neighbor = false;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.833333,0.8333333333333334,000000100001110001,4af7ca01120e0471eabf53239e456e0dae82458e,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = false;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] == val ||  nums[i] == val)
        {
            
            neighbor = true;
        }
        if (nums[i+1] == val || nums[i] == val)
        {
            neighbor = true;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.722222,0.7222222222222222,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    if (nums.length == 0)
    {
        return false;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] != val && nums[i+1] != val && nums[i] != val)
        {
            neighbor = false;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = true;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = true;
    }
    return neighbor;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",eeb358fcbf46e89566ad3fe0707820a0,011001001101110011,e39438a37d9a001ec50d157737416147f824d10a,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = true;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] != val && nums[i+1] != val && nums[i] != val)
        {
            
            neighbor = false;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.444444,0.4444444444444444,100110100010001100,0797605046d2e8773d00ed4aa6c9247edb7de455,"public boolean isEverywhere(int[] nums, int val)
{
    boolean neighbor = false;
    if (nums.length == 0)
    {
        return true;
    }
    if (nums.length == 1)
    {
        return true;
    }
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i - 1] == val ||  nums[i] == val)
        {
            
            neighbor = true;
        }
        if (nums[i+1] == val || nums[i] == val)
        {
            neighbor = true;
        }
    }
    if (nums[0] != val && nums[1] != val)
    {
        neighbor = false;
    }
    if (nums[nums.length - 1] != val && nums[nums.length - 2] != val)
    {
        neighbor = false;
    }
    return neighbor;
}
",0.611111,0.6111111111111112,"public boolean isEverywhere(int[] nums, int val)
{
    if (nums.length == 0) return true;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}"
46,"We'll say that a value is ""everywhere"" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.",eeb358fcbf46e89566ad3fe0707820a0,011001001101110011,e39438a37d9a001ec50d157737416147f824d10a,"public boolean isEverywhere(int[] nums, int val)
{
    for(int i = 0; i < nums.length - 1; i++)
    {
     	if(nums[i] == val && nums[i+1] == val)
        {
         	return true;   
        }
    }
    return false;
}
",0.444444,0.4444444444444444,100110100010001100,0797605046d2e8773d00ed4aa6c9247edb7de455,"public boolean isEverywhere(int[] nums, int val)
{
    for(int i = 0; i < nums.length - 1; i++)
    {
     	if(nums[i] != val && nums[i+1] != val)
        {
         	return false;   
        }
    }
    return true;
}
",0.611111,0.6111111111111112,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}"
34,"Given a string str, find all places where a three-letter combination starting with ""z"" and ending with ""p"" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like ""zipXzap"" would produce a result of ""zpXzp"".",0ee7e71061cf860ccf3b29c6823c7971,00000220000000,1e8a4ee5c87793a0bf21f6a96599ec34cc341016,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length())
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p') && (i < str.length()-2))
        { 
            newStr = newStr.concat(""zp"");
            
            i = i+3;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    
    return newStr; 
}
",0.857143,0.8571428571428571,30330000033333,59f4e78216f6989b97c7e59b28f1f154e72f08af,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length())
    {
        String strA = Character.toString(str.charAt(i));
        if (i < str.length()-2){
        if ((str.charAt(i) == 'z') && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(""zp"");
            
            i = i+3;
            
        }
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    
    return newStr; 
}
",0.428571,0.42857142857142855,"public String zipZap(String str)
{
    String newStr = """"; 
    int i = 0; 
    while(i < str.length())
    {
        String strA = Character.toString(str.charAt(i));
        
        if ((str.charAt(i) == 'z') && (i < str.length()-2) && (str.charAt(i+2) == 'p'))
        { 
            newStr = newStr.concat(""zp"");
            
            i = i+3;
            
        }
        else 
        {
            newStr = newStr.concat(strA);
            i++; 
        }
    }
    
    
    return newStr; 
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",c8720c9e82b818798e7b391fd62adf33,0001000000011,9cb0bbc68c8c33c77c5b06338a61be7688b2325c,"public String getSandwich(String str)
{
    if (str.startsWith(""bread"") && str.endsWith(""bread""))
    {
        
        return str.substring(5, str.length() - 5);
    }
    return """";
}
",0.769231,0.7692307692307693,0021002220011,4c5bb330513fbb0e12f871a8ed93bf6e603f0c18,"public String getSandwich(String str)
{
    
    if (str.indexOf(""bread"") != -1 )
        {
    if (str.indexOf(""bread"") != str.lastIndexOf(""bread""))
    {
        
        return str.substring(str.indexOf(""bread"") + 5, str.lastIndexOf(""bread""));
    }
                                        }
    return """";
}
",0.461538,0.46153846153846156,"public String getSandwich(String str)
{
    int a = 0;
    int b = 0;
    if (str.matches(""(.*)bread(.*)bread(.*)""))
    {
    	for (int i = 0; i < str.length(); i ++)
        {
        	if (str.startsWith(""bread"", i))
            {
            	a = i;
                break;
            }
        }
        for (int j = str.length() - 5; j > a; j --)
        {
        	if (str.startsWith(""bread"", j))
            {
            	b = j;
                break;
            }
        }
        return str.substring(a + 5, b);
    }
    else
    {
    	return("""");
    }
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",2e0a791950a53842e60d83295368cdff,1101120001111,40d1a30118717da635b4841832b582a2df1b9ccb,"public String getSandwich(String str)
{
    if (str.startsWith(""bread"") && str.endsWith(""bread""))
    {
        
        return str.substring(5, str.length() - 6);
    }
    return """";
}
",0.307692,0.3076923076923077,0101000000100,6eae70fb9ae54ec6a277f02dc219de3e53a5c4bf,"public String getSandwich(String str)
{
    if (str.startsWith(""bread"") && str.endsWith(""bread""))
    {
        
        return str.substring(5, str.length() - 5);
    }
    return """";
}
",0.769231,0.7692307692307693,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread)
    {
        return str.substring(firstBread + 5, lastBread);
    }
    return """";
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",76d0863b5d13a9ed61f7df9149fb93d8,2222222222222,dcbc8fddceb96feb3f802406002666d72c285f83,"public String getSandwich(String str)
{
    if (str.startsWith(""bread"") && str.endsWith(""bread""))
    {
        
        return str.substring(5, str.length() - 6);
    }
    return """";
}
",0.0,0.0,1101110221111,2e203e93a13867f974f66070522322f103b53ef9,"public String getSandwich(String str)
{
    if (str.startsWith(""bread"") && str.endsWith(""bread""))
    {
        
        return str.substring(5, str.length() - 5);
    }
    return """";
}
",0.153846,0.15384615384615385,"public String getSandwich(String str)
{
    int firstIndex = str.indexOf(""bread"");
    int lastIndex = str.lastIndexOf(""bread"");
    
    if (firstIndex != -1 && lastIndex != -1 && firstIndex != lastIndex)
    {
        return str.substring(firstIndex + 5, lastIndex);
    }
    else 
    {
        return """";
    }
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",580274a213455c56684ab9f6e7a9995a,1101100001111,21725a79d7f59366756f2079796cea9f25128d50,"public String getSandwich(String str)
{	
    String x = """";
	for (int i = 0; i < str.length() - 1; i++)
    {
        if (str.substring(i).startsWith(""bread"") && str.substring(i).endsWith(""bread""))
        {
            x = str.substring(i, str.length() - 5);
        }
    }
    return x;
}
",0.384615,0.38461538461538464,2101220002222,5ff5b5064ecad1cf6e023531a35cd2e5f0e9aede,"public String getSandwich(String str)
{	
    String x = """";
	for (int i = 0; i < str.length() - 1; i++)
    {
        if (str.substring(i).startsWith(""bread"") && str.substring(i).endsWith(""bread""))
        {
            x = str.substring(i + 5, str.length() - 5);
        }
    }
    return x;
}
",0.307692,0.3076923076923077,"public String getSandwich(String str)
{	
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread) {
        return str.substring(firstBread + 5, lastBread);
    }
    
    return """";
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",76d0863b5d13a9ed61f7df9149fb93d8,2222222222222,b86f78b25e953e4e5a98cee3a2c76cc8b5f0d145,"public String getSandwich(String str)
{	
    String x = """";
	for (int i = 0; i < str.length() - 1; i++)
    {
        if (str.substring(i).startsWith(""bread"") && str.substring(i).endsWith(""bread""))
        {
            x = str.substring(i, str.length() - 5);
        }
    }
    return x;
}
",0.0,0.0,1101100221111,bbc16981de5bfbcd396b06b2626233be1c7d43a8,"public String getSandwich(String str)
{	
    String x = """";
	for (int i = 0; i < str.length() - 1; i++)
    {
        if (str.substring(i).startsWith(""bread"") && str.substring(i).endsWith(""bread""))
        {
            x = str.substring(i + 5, str.length() - 5);
        }
    }
    return x;
}
",0.230769,0.23076923076923078,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread) {
        return str.substring(firstBread + 5, lastBread);
    } else {
        return """";
    }
}"
13,"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.",bfa20d86a59044ef90a4609dde03985c,01110011000011001100000,e4e7376deb47592fd61bb7799392be1717626263,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed + 5;
    }
    if (speed >= 81)
    {
        return 2;
    }
    else if (speed < 81 && speed >= 61)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",0.608696,0.6086956521739131,01010011000010001100000,c9226d8a6040208d08b3762e217f35bd4cf6563d,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed - 5;
    }
    if (speed >= 81)
    {
        return 2;
    }
    else if (speed < 81 && speed >= 61)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",0.695652,0.6956521739130435,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
        if (speed <= 65)
            return 0;
        else if (speed <= 85)
            return 1;
        else
            return 2;
    else
        if (speed <= 60)
            return 0;
        else if (speed <= 80)
            return 1;
        else
            return 2;
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5f79d384b8024d5adddb872f9651f38,1001001001000100100000,12c74f84f6486794e9504e049e03ee7e5dbae455,"public int blackjack(int a, int b)
{
    int bj=0;
    
    int da=21-a;
    int db=21-b;
    if(da>db)
    {
        bj=b;
    }
    if(db>da)
    {
        bj=a;
    }
    
    if((a>21)&&(b>21))
    {
        bj=0;
    }
    return bj;
    
}
",0.727273,0.7272727272727273,0110000100111011011001,ec440fd647af59cbea91a966ccc1596f685d24fa,"public int blackjack(int a, int b)
{
    int bj=0;
    
    int da=21-a;
    int db=21-b;
    if(da>db)
    {
        bj=b;
    }
    if(db>da)
    {
        bj=a;
    }
    
    if((a>21)&&(b>21))
    {
        bj=0;
    }
    if((a>21)&&(b<21))
    {
        bj=b;
    }
    if((b>21)&&(a<21))
    {
        bj=a;
    }
    return bj;
    
}
",0.5,0.5,"public int blackjack(int a, int b)
{
   if ( a > 21 && b > 21)
   {
      return 0; 
   }
    if (a > 21) return b;
    if (b > 21) return a;
    if (21 - a < 21 - b)
    {
        return a;
    }
    else 
        return b;
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",76d0863b5d13a9ed61f7df9149fb93d8,1101120221111,a4a2d962cdb1bf5e798a44645445350677cdcfbc,"public String getSandwich(String str)
{
    if (str.substring(0, 5).equals(str.substring(str.length()-5))
               && str.substring(0, 5).equals(""bread""))
    {
        return str.substring(5, str.length() -6);
    }
    else 
        {
            return """";
        }
}
",0.153846,0.15384615384615385,0101000220100,e8b9031044e51a0953bb7e563e3b7afa35a8aced,"public String getSandwich(String str)
{
    if (str.substring(0, 5).equals(str.substring(str.length()-5))
               && str.substring(0, 5).equals(""bread""))
    {
        return str.substring(5, str.length() -5);
    }
    else 
        {
            return """";
        }
}
",0.6153850000000001,0.6153846153846154,"public String getSandwich(String str) {
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != lastBread && firstBread != -1 && lastBread != -1) {
        return str.substring(firstBread + 5, lastBread);
    } else {
        return """";
    }
}"
40,"A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of ""bread"" in str. Return the empty string """" if there are not two pieces of bread.",c8720c9e82b818798e7b391fd62adf33,1101110001111,763b6c97906e17d677512513055666f414fdacb0,"public String getSandwich(String str)
{
    if (str.substring(0, 5).equals(str.substring(str.length()-5))
               && str.substring(0, 5).equals(""bread""))
    {
        return str.substring(5, str.length() -6);
    }
    else 
        {
            return """";
        }
}
",0.307692,0.3076923076923077,1101110001110,3882167b06ce4b874f853f64abe9071ce233ca01,"public String getSandwich(String str)
{
    if (str.substring(0, 5).equals(str.substring(str.length()-5))
               && str.substring(0, 5).equals(""bread""))
    {
        return str.substring(5, str.length() -5);
    }
    else 
        {
            return """";
        }
}
",0.384615,0.38461538461538464,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    
    if (firstBread != -1 && lastBread != -1 && firstBread != lastBread)
    {
        return str.substring(firstBread + 5, lastBread);
    }
    else
    {
        return """";
    }
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",43a87a86ea9aee0255325e2865d6b503,0000000000000030000,cc203182fce5b3c0c48fea7ab101ba0ef177cbb3,"public boolean xyBalance(String str)
{
  
int length;
char yum;
length = ((str.length() - 1));
for(int j = length; j >= 0; j--)
{
yum = (str.charAt(j));
if(yum == 'x')
{
return false;
}
else if(yum == 'y')
{
return true;
}
}
return true;  
}
",1.0,0.9473684210526315,0000000030000000000,cf24e5272cdfb4e93e7c1b9ec9f97e69d2bf8958,"public boolean xyBalance(String str)
{
int length;
length = ((str.length() - 1));  
char yum;
for(int j = length; j >= 0; j--)
{
yum = (str.charAt(j));
if(yum == 'x')
{
return false;
}
else if(yum == 'y')
{
return true;
}
}
return true;  
}
",1.0,0.9473684210526315,"public boolean xyBalance(String str)
{
  
int length;
char yum;
length = ((str.length() - 1));
for(int j = length; j >= 0; j--)
{
yum = (str.charAt(j));
if(yum == 'x')
{
return false;
}
else if(yum == 'y')
{
return true;
}
}
return false;  
}"
39,"We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So ""xxy"" is balanced, but ""xyx"" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.",55f04ea8d0761b7aff9d21f23ebcbfef,1001101010111000111,6ac2ebe3ebe4a232aed1281ad3f1dbbf892523cb,"public boolean xyBalance(String str)
{
  
int length;
char yum;
length = ((str.length() - 1));
for(int j = length; j >= 0; j--)
{
yum = (str.charAt(j));
if(yum == 'x')
{
return false;
}
else if(yum == 'y')
{
return true;
}
}
return true;  
}
",0.421053,0.42105263157894735,0111101000100100110,4fb7147b0bf83505f03a86853250e86431950ae4,"public boolean xyBalance(String str)
{
int length;
length = ((str.length() - 1));  
char yum;
for(int j = length; j >= 0; j--)
{
yum = (str.charAt(j));
if(yum == 'x')
{
return false;
}
else if(yum == 'y')
{
return true;
}
}
return true;  
}
",0.526316,0.5263157894736842,"public boolean xyBalance(String str) {
    boolean foundY = false;
    for (int i = str.length() - 1; i >= 0; i--) {
        if (str.charAt(i) == 'y') {
            foundY = true;
        }
        if (str.charAt(i) == 'x' && !foundY) {
            return false;
        }
    }
    return true;
}"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",4346ad94c2790cac390e684155a2ecba,0110011011000111110101111,ff909e5e3342b7a834c4bd79cbcd668517f946bc,"public int noTeenSum(int a, int b, int c)
{
 return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
 if (n < 13 || n < 19 || n == 15 || n == 16) {
     return n;
 }
    else {
        return 0;
    }
 }
     
",0.36,0.36,0100000001011001100000101,ae723d70dee8b8d420d85ae1ad47f99956feae1e,"public int noTeenSum(int a, int b, int c)
{
 return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
 if (n <= 13 || n >= 19 || n == 15 || n == 16) {
     return n;
 }
    else {
        return 0;
    }
 }
     
",0.68,0.68,"public int fixTeen(int n)
{
 if (n < 13 || n > 19 || n == 15 || n == 16) {
     return n;
 }
    else {
        return 0;
    }
 }"
22,"Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. ""decomposition"").",eeb358fcbf46e89566ad3fe0707820a0,1111110111111111111110111,b8f9820fb0ba5ce547dca7c0cedfea8708ea51d7,"public int noTeenSum(int a, int b, int c)
{
 return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
 if (n < 13 || n < 19 || n == 15 || n == 16) {
     return n;
 }
    else {
        return 0;
    }
 }
     
",0.08,0.08,1111111110111110111111011,4634664a318ff8fdb4b748ad81799233f8869796,"public int noTeenSum(int a, int b, int c)
{
 return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
 if (n <= 13 || n >= 19 || n == 15 || n == 16) {
     return n;
 }
    else {
        return 0;
    }
 }
     
",0.12,0.12,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        return 0;
    }
    return n;
}"
37,"Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be ""case sensitive""). Note: str.toLowerCase() returns the lowercase version of a string.",e620a25ae37b9a8ba0362d5f02343161,122010122210220,c0cf854143752be8b4b15da38f6628751ae0242a,"public boolean endOther(String a, String b)
{
    if (a.toLowerCase().endsWith(b) || b.toLowerCase().endsWith(a))
    {
        return true;
    }
   	else
    {
        return false;
    }
}
",0.266667,0.26666666666666666,022202022200220,63a18412e4c2b14704035c90b9c0b27aa278d48b,"public boolean endOther(String a, String b)
{
    if (a.toLowerCase().endsWith(b.toLowerCase()) || 		b.toLowerCase().endsWith(a.toLowerCase()))
    {
        return true;
    }
   	else
    {
        return false;
    }
}
",0.4,0.4,"boolean endOther(String a, String b)
{
    String newA= a.toLowerCase();
    String newB = b.toLowerCase();
    
    int aLength = newA.length();
    int bLength = newB.length();
    
    if (aLength >= bLength && newA.substring(aLength - bLength).equals(newB))
    {
     return true;   
    }
    
    else if (bLength >= aLength && newB.substring(bLength - aLength).equals(newA))
    {
     return true;   
    }
    
    else{
        
        return false;
    }
}"
37,"Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be ""case sensitive""). Note: str.toLowerCase() returns the lowercase version of a string.",0aaf61723a352ba7ea1be4502df85765,000101001001101,3641af2f1f7c563f36393745fff883c2040f419b,"public boolean endOther(String a, String b)
{
    String nA = a.toLowerCase();
    String nB = b.toLowerCase();
    
    int lA = a.length();
    int lB = b.length();
    
    if (lA > lB)
    {
        //String sA = nA.substring(lA - lB, lA + 1);
        return true;
    }
    else if (lA < lB)
    {
        return true;
    }
    else
    {
        return true;
    }
}
",0.6,0.6,022000022200220,53ba2bfdf1cb3a9c3b240cd1db1677c741cea6e5,"public boolean endOther(String a, String b)
{
    String nA = a.toLowerCase();
    String nB = b.toLowerCase();
    
    int lA = a.length();
    int lB = b.length();
    
    if (lA >= lB)
    {
        String s = nA.substring(lA - lB);
        return (s.equals(b));
    }
    else
    {
        String s = nA.substring(lA - lB);
        return (s.equals(a));
    }
}
",0.533333,0.5333333333333333,"public boolean endOther(String a, String b)
{
    String nA = a.toLowerCase();
    String nB = b.toLowerCase();
    
    int lA = a.length();
    int lB = b.length();
    
    if (lA > lB)
    {
        String sA = nA.substring(lA - lB, lA);
        return sA.equals(nB);
    }
    else if (lA < lB)
    {
        String sB = nB.substring(lB - lA, lB);
        return sB.equals(nA);
    }
    else
    {
        return nA.equals(nB);
    }
}"
24,"Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.",c5383525e91474a4e5d7dcfee92c054f,1100110111101111100111,34b9b4b86b92a60ba5756aa42ba3b4ce1148ddbe,"public int blackjack(int a, int b)
{
    if (a <= 21 && b <= 21)
   		if (a < b)
            return b;
    	else if (b < a)
            return a;
    return 0;
}
",0.272727,0.2727272727272727,0011001000010000010000,4a67f7ccba2be360467dde33ff8dd8bc9193f1bc,"public int blackjack(int a, int b)
{
    if (a <= 21 && b <= 21)
   		if (a < b)
            return b;
    	else if (b < a)
            return a;
    if (a > 21 && b <= 21)
        return b;
    if (b > 21 && a <= 21)
        return a;
    return 0;
}
",0.772727,0.7727272727272727,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
    {
        return 0;
    }
    if (a > 21)
    {
        return b;
    }
    if (b > 21)
    {
        return a;
    }
    return Math.max(a, b);
}"
5,"Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.",37b1fe960daba91fffadbdb5a3a9db15,10001001,46d9b5ff2505f812e6e0d0459eabc6c9c455064c,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep == true)
    {
        return false;
    }
    else if (isMorning == true && isMom  == true)
    {
        return true;
    }
    else
    {
        return false;
    }
}
",0.625,0.625,00001000,6d2b1eb3ef8e76c417efaf05dadabe7bbfba4210,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep == true)
    {
        return false;
    }
    else if (isMorning == true && isMom  == true)
    {
        return true;
    }
    else if (isMorning == true)
    {
        return false;
    }
    else
    {
        return true;
    }
}
",0.875,0.875,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    if (isMorning)
    {
        return isMom;
    }
    return true;
}"
